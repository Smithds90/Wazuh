openapi: '3.0.0'
info:
  description: "The Wazuh API is an open source RESTful API that allows for interaction\
    \ with the Wazuh manager from a web browser, command line tool like cURL or any\
    \ script or program that can make web requests. The Wazuh Kibana app relies on\
    \ this heavily and Wazuhâ€™s goal is to accommodate complete remote management of\
    \ the Wazuh infrastructure via the Wazuh Kibana app. Use the API to easily perform\
    \ everyday actions like adding an agent, restarting the manager(s) or agent(s)\
    \ or looking up syscheck details.\n"
  version: 4.0.0
  title: "Wazuh API"
  license:
    name: GPL 2.0
    url: 'https://github.com/wazuh/wazuh/blob/master/LICENSE'

components:
  schemas:
    ## Common models
    ApiResponse:
      type: object
      required:
      - error
      properties:
        error:
          type: integer
          format: int32
        message:
          type: string
    
    ListMetadata:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32

    ## Agents models
    Agent:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AgentStatus'
        configSum:
          type: string
        group:
          type: array
          items:
            type: string
        name:
          type: string
        mergedSum:
          type: string
        ip:
          type: string
        manager:
          type: string
        node_name:
          type: string
        dateAdd:
          type: string
        version:
          type: string
        lastKeepAlive:
          type: string
        os:
          type: object
          properties:
            major:
              type: string
            name:
              type: string
            uname:
              type: string
            platform:
              type: string
            version:
              type: string
            codename:
              type: string
            arch:
              type: string
            minor:
              type: string
        id:
          type: string
  
    AgentByName:
      type: object
      properties:
        ip:
          type: string
        status:
          $ref: '#/components/schemas/AgentStatus'
        dateAdd:
          type: string
        name:
          type: string
        registerIP:
          type: string
        node_name:
          type: string
        id:
          type: string
  
    AgentAffected:
      type: object
      properties:
        msg:
          type: string
        affected_agents:
          type: array
          items:
            type: integer
    
    AllAgentAffected:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AgentAffected'
      properties:
        older_than:
          type: string
        total_affected_agents:
          type: integer
          format: int32
    
    AgentGroup:
      type: object
      properties:
        items:
          type: array
          items:
            properties:
              count:
                type: integer
              name:
                type: string
              mergedSum:
                type: string
              configSum:
                type: string
    
    AgentGroupDeleted:
      type: object
      properties:
        msg:
          type: string
        ids:
          type: array
          items:
            type: string
        affected_agents:
          type: array
          items:
            type: integer
          
    AgentIdKey:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
          
    AgentSimple:
      type: object
      properties:
        version:
          type: string
        id:
          type: string
        name:
          type: string
    
    AgentStatus:
      type: string
      enum:
      - active
      - pending
      - neverconnected
      - disconnected
    
    AgentConfiguration:
      type: object
      properties:
        configuration:
          type: array
          items:
            properties:
              file:
                type: string
              logformat:
                type: string
              command:
                type: string
              alias:
                type: string
              target:
                type: array
                items:
                  type: string
              frequency:
                type: integer
    
    GroupConfiguration:
      type: object
      properties:
        filter:
          type: object
          properties:
            os:
              type: string
        config:
          type: object
          properties:
            localfile:
              type: array
              items:
                properties:
                  location:
                    type: string
                  log_format:
                    type: string
    
    ## Cache models
    GroupCache:
      type: object
      properties:
        all:
          type: array
          items:
            type: string
        group:
          type: object
    
    GroupCacheComplete:
      type: object
      properties:
        all:
          type: array
          items:
            type: string
        group:
          type: object
          properties:
            agents:
              type: array
              items:
                type: string
                
    ## CisCat models
    CiscatResults:
      type: object
      properties:
        profile:
          type: string
        score:
          type: integer
        error:
          type: integer
        scan:
          type: object
          properties:
            id:
              type: integer
            time:
              type: string
        fail:
          type: integer
        benchmark:
          type: integer
        pass:
          type: integer
        notchecked:
          type: integer
        unknown:
          type: integer
          
    # SCA models
    SCAChecks:
      type: object
      properties:
        file:
          type: string
        policy_id:
          type: string
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        rationale:
          type: string
        remediation:
          type: string
        process:
          type: string
        directory:
          type: string
        registry:
          type: string
        references:
          type: string
        result:
          type: string
          enum:
            - "passed"
            - "failed"

    SCADatabase:
      type: object
      properties:
        policy_id:
          type: string
        name:
          type: string
        description:
          type: string
        references:
          type: string
        pass:
          type: integer
        fail:
          type: integer
        score:
          type: integer
        end_scan:
          type: string
        start_scan:
          type: string
        
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: "Intended method to get a token"
      x-basicInfoFunc: api.authentication.check_user
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: api.authentication.decode_token
  parameters:
    agent_id:
      in: path
      name: agent_id
      description: Agent ID
      required: true
      schema:
        type: integer
    agent_name:
      in: path
      name: agent_name
      description: Agent name.
      required: true
      schema:
        type: string
    benchmark:
      in: query
      name: benchmark
      description: Filters by benchmark.
      schema:
        type: string
    component:
      in: path
      name: component
      description: Selected agent's component.
      required: true
      schema:
        type: array
        items:
          type: string
          enum:
          - agent
          - agentless
          - analysis
          - auth
          - com
          - csyslog
          - integrator
          - logcollector
          - mail
          - monitor
          - request
          - syscheck
          - wmodules
    configuration:
      in: path
      name: configuration
      description: Selected agent's configuration to read
      required: true
      schema:
        type: array
        items:
          type: string
          enum:
          - client
          - buffer
          - labels
          - internal
          - agentless
          - global
          - active_response
          - alerts
          - command
          - rules
          - decoders
          - auth
          - active-response
          - cluster
          - csyslog
          - integration
          - localfile
          - socket
          - remote
          - syscheck
          - rootcheck
          - wmodules
    description:
      in: query
      name: description
      description: Filters by policy description.
      schema:
        type: string
    directory:
      in: query
      name: directory
      description: Filters by directory.
      schema:
        type: string
    error:
      in: query
      name: error
      description: Filters by encountered errors.
      schema:
        type: integer
    fail:
      in: query
      name: fail
      description: Filters by failed checks.
      schema:
        type: integer
    fields:
      in: query
      name: fields
      description: List of fields affecting the operation.
      schema:
        type: string
    file:
      in: query
      name: file
      description: Filters by filename.
      schema:
        type: integer
    file_name:
      in: path
      name: file_name
      description: Filename.
      required: true
      schema:
        type: string
    format:
      in: query
      name: fromat
      description: Optional. Output format (JSON, XML).
      schema:
        type: array
        items:
          type: string
          enum:
          - json
          - xml
    group_cache:
      in: path
      name: group
      description: Cache group.
      required: true
      schema:
        type: string
    group_id:
      in: path
      name: group_id
      description: Group ID.
      required: true
      schema:
        type: string
    hash:
      in: query
      name: hash
      description: Select algorithm to generate the sum.
      schema:
        type: string
    limit:  
      in: query
      name: limit
      description: Maximum number of elements to return
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    list_agents:
      in: query
      name: list_agents
      description: Array of agent's IDs
      required: true
      schema:
        type: array
        items:
          type: integer
    list_groups:
      in: query
      name: list_groups
      description: Array of group's IDs
      schema:
        type: array
        items:
          type: string
    name:
      in: query
      name: name
      description: Filters by agent name.
      schema:
        type: string
    notchecked:
      in: query
      name: notchecked
      description: Filters by not checked.
      schema:
        type: integer
    offset:
      in: query
      name: offset
      description: First element to return in the collection
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    olderThanParam:
      in: query
      name: older_than
      description: |
        Filters out disconnected agents for longer than specified. Time in seconds, â€˜[n_days]dâ€™, â€˜[n_hours]hâ€™, â€˜[n_minutes]mâ€™ or â€˜[n_seconds]sâ€™. For never connected agents, uses the register date.
      schema:
        type: string
    pass:
      in: query
      name: pass
      description: Filters by passed checks.
      schema:
        type: integer
    pretty:
      in: query
      name: pretty
      description: Show results in human-readable format
      schema:
        type: boolean
        default: false
    process:
      in: query
      name: process
      description: Filters by process name.
      schema:
        type: integer
    profile:
      in: query
      name: profile
      description: Filters by evaluated profile.
      schema:
        type: string
    policy_id:
      in: path
      name: policy_id
      description: Filters by policy id.
      required: True
      schema:
        type: integer
    purge:
      in: query
      name: purge
      description: Delete an agent from the key store
      schema:
        type: boolean
        default: false
    query:
      in: query
      name: q
      description: Query to filter results by. For example q=&quot;status=Active&quot;
      schema:
        type: string
    rationale:
      in: query
      name: rationale
      description: Filters by rationale.
      schema:
        type: string
    registry:
      in: query
      name: registry
      description: Filters by registry.
      schema:
        type: string
    references:
      in: query
      name: references
      description: Filters by references.
      schema:
        type: string
    remediation:
      in: query
      name: remediation
      description: Filters by remediation.
      schema:
        type: string
    result:
      in: query
      name: result
      description: Filters by result.
      schema:
        type: string
    score:
      in: query
      name: score
      description: Filters by final score.
      schema:
        type: integer
    search:
      in: query
      name: search
      description: Looks for elements with the specified string
      schema:
        type: string
    select:  
      in: query
      name: select
      description: Select which fields to return (separated by comma)
      schema:
        type: array
        items:
          type: string
    # It'd be more appropriate to be an array of strings, and separate the ascending or descending order in another param
    sort:
      in: query
      name: sort
      description: |
            Sorts the collection by a field or fields (separated by comma). Use +/- at the beginning to list in ascending or descending order.
      schema:
        type: string
    statusParam:
      in: query
      name: status
      description: Filters by agent status. Use commas to enter multiple statuses.
      schema:
        type: array
        items:
          type: string
          enum:
          - active
          - pending
          - neverconnected
          - disconnected
    title:
      in: query
      name: title
      description: Filters by title.
      schema:
        type: string
    type:
      in: query
      name: type
      description: Type of file.
      schema:
        type: array
        items:
          type: string
          enum:
          - conf
          - rootkit_files
          - rootkit_trojans
          - rcl
    unknown:
      in: query
      name: unknown
      description: Filters by unknown results.
      schema:
        type: integer
    version:
      in: query
      name: version
      description: Filters by agents version.
      schema:
        type: string
    wait_for_complete:
      in: query
      name: wait_for_complete
      description: Disable timeout response
      schema:
        type: boolean
        default: false

tags:
  - name: active-response
    description: 'Agents Active Response'
  - name: agents
    description: 'Agents management related operations'
  - name: cache
    description: 'API cache management'
  - name: ciscat
    description: ''
  - name: cluster
    description: ''
  - name: sca
    description: 'Policy monitoring'
  - name: decoders
    description: ''
  - name: experimental
    description: ''
  - name: lists
    description: ''
  - name: login
    description: 'User authentication'
  - name: manager
    description: ''
  - name: rootcheck
    description: ''
  - name: rules
    description: ''
  - name: syscheck
    description: ''
  - name: syscollector
    description: ''

security:
    - jwt: []

paths:
  /active-response/{agent_id}:
    put:
      tags:
        - active-response
      summary: 'Run an AR command in the agent'
      description: 'Runs an Active Response command on a specified agent'
      operationId: api.controllers.active_response_controller.active_response
      parameters:
        - $ref: '#/components/parameters/agent_id'
      
      requestBody:
        content:
          application/json:
              schema:
                properties:
                  command:
                    description: Command running in the agent.
                    type: string
                    
                  custom:
                    description: Custom.
                    type: boolean
                    default: false
  
                  arguments:
                    description: Command arguments.
                    type: array
                    items:
                      type: string
                required:
                  - command
      responses:
        '200':
          description: 'Command send to agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      type: string
                example:
                  data: "Command sent."
                  error: 0

  /agents:
    delete:
      tags:
      - agents
      summary: Delete agents
      description: |
        Removes agents, using a list of them or a criterion based on the status or time of the last connection. The Wazuh API must be restarted after removing an agent.
      operationId: api.controllers.agents_controller.delete_agents
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/list_agents'
        - $ref: '#/components/parameters/purge'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/olderThanParam'
      responses:
        '200':
          description: Delete agents
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AllAgentAffected'  
              example:
                error: 0
                data:
                  msg: All selected agents were removed
                  affected_agents:
                  - '003'
                  - '005'
                  older_than: 10s
                  total_affected_agents: 2
    get:
      tags:
      - agents
      summary: 'Get all agents'
      description: 'Returns a list with the available agents.'
      operationId: api.controllers.agents_controller.get_all_agents
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/select'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/olderThanParam'
        - in: query
          name: os.platform
          description: Filters by OS platform.
          schema:
            type: string
        - in: query
          name: os.version
          description: Filters by OS version.
          schema:
            type: string
        - in: query
          name: os.name
          description: Filters by OS name.
          schema:
            type: string
        - in: query
          name: manager
          description: Filters by manager hostname to which agents are connected.
          schema:
            type: string
        - $ref: '#/components/parameters/version'
        - in: query
          name: group
          description: Filters by group of agents.
          schema:
            type: string
        - in: query
          name: node_name
          description: Filters by node name.
          schema:
            type: string
        - $ref: '#/components/parameters/name'
        - in: query
          name: ip
          description: Filters by agent IP
          schema:
            type: string
      responses:
        '200':
          description: 'List of agents or error description'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/Agent'
              example:
                error: 0
                data:
                  totalItems: 7
                  items:
                  - status: Active
                    configSum: ab73af41699f13fdd81903b5f23d8d00
                    group:
                    - default
                    name: agent1
                    mergedSum: f1a9e24e02ba4cc5ea80a9d3feb3bb9a
                    ip: 192.168.185.7
                    manager: manager
                    node_name: node02
                    dateAdd: '2018-10-11 09:38:47'
                    version: Wazuh v3.8.0
                    lastKeepAlive: '2018-10-11 13:58:08'
                    os:
                      major: '16'
                      name: Ubuntu
                      uname: Linux |ubuntu |4.4.0-135-generic |#161-Ubuntu SMP Mon Aug 27 10:45:01
                        UTC 2018 |x86_64
                      platform: ubuntu
                      version: 16.04.5 LTS
                      codename: Xenial Xerus
                      arch: x86_64
                      minor: '04'
                    id: '001'
                  - status: Active
                    name: manager
                    ip: 127.0.0.1
                    manager: manager
                    node_name: node01
                    dateAdd: '2018-10-11 09:37:23'
                    version: Wazuh v3.8.0
                    lastKeepAlive: '9999-12-31 23:59:59'
                    os:
                      major: '18'
                      name: Ubuntu
                      uname: Linux |manager |4.15.0-36-generic |#39-Ubuntu SMP Mon Sep 24 16:19:09
                        UTC 2018 |x86_64
                      platform: ubuntu
                      version: 18.04.1 LTS
                      codename: Bionic Beaver
                      arch: x86_64
                      minor: '04'
                    id: '000'
                  - status: Never connected
                    dateAdd: '2018-10-11 13:58:23'
                    name: NewHost_2
                    ip: 10.0.10.10
                    id: '123'
                    node_name: unknown
                  - status: Never connected
                    dateAdd: '2018-10-11 13:58:22'
                    name: NewHost
                    ip: 10.0.0.9
                    id: '007'
                    node_name: unknown
                  - status: Never connected
                    dateAdd: '2018-10-11 13:58:10'
                    group:
                    - default
                    name: server001
                    ip: 10.0.0.62
                    id: '002'
                    node_name: unknown
    post:
      tags:
      - agents
      summary: 'Add agent'
      description: 'Add a new agent.'
      operationId: api.controllers.agents_controller.add_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'

      requestBody:
        content:
          application/json:
              schema:
                properties:
                  name:
                    description: Agent name.
                    type: string
                  ip:
                    description: "If this is not included, the API will get the IP automatically. If you are behind a proxy, you must set the option config.BehindProxyServer to yes at config.js. Allowed values: IP, IP/NET, ANY"
                    type: string
                  force_time:
                    description: Remove the old agent with the same IP if disconnected since <force_time> seconds.
                    type: integer
                    minimum: 1
                required:
                - name
                - ip
      responses:
        '200':
          description: 'Add an agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentIdKey'
              example:
                error: 0
                data:
                  id: "007"
                  key: MDA3IE5ld0hvc3QgMTAuMC4wLjkgZTk5MDE2ZTkzMjMyZDBjZDYyMGIyZTZmMTM2ZjMzMDQxMjY3M2E0NGRmOTNmODk1NzFjMGQyYzczY2VlYzRhZQ==
  /agents/{agent_id}:
    delete:
      tags:
        - agents
      summary: 'Delete an agent'
      description: 'Removes an agent.'
      operationId: api.controllers.agents_controller.delete_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/purge'
      responses:
        '200':
          description: 'Delete agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentAffected'
              example:
                error: 0
                data:
                  msg: All selected agents were removed
                  affected_agents:
                  - '008'
    get:
      tags:
        - agents
      summary: 'Get an agent'
      description: 'Returns various information from an agent.'
      operationId: api.controllers.agents_controller.get_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: 'Get agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/Agent'
              example:
                error: 0
                data:
                    lastKeepAlive: '9999-12-31 23:59:59'
                    ip: 127.0.0.1
                    manager: manager
                    os:
                      arch: x86_64
                      codename: Bionic Beaver
                      major: '18'
                      minor: '04'
                      name: Ubuntu
                      platform: ubuntu
                      uname: Linux |manager |4.15.0-36-generic |#39-Ubuntu SMP Mon Sep 24 16:19:09
                        UTC 2018 |x86_64
                      version: 18.04.1 LTS
                    status: Active
                    version: Wazuh v3.8.0
                    dateAdd: '2018-10-11 09:37:23'
                    name: manager
                    node_name: node01
                    id: '000'
  /agents/{agent_id}/config/{component}/{configuration}:
    get:
      tags:
        - agents
      summary: 'Get active configuration'
      description: 'Returns the active configuration in JSON format.'
      operationId: api.controllers.agents_controller.get_agent_config
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/component'
        - $ref: '#/components/parameters/configuration'
      responses:
        '200':
          description: 'Get agent configuration'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/AgentConfiguration'
              example:
                error: 0
                data:
                    localfile:
                      - logformat: command
                        command: df -P
                        alias: df -P
                        target:
                          - agent
                        frequency: 360
                      - logformat: full_command
                        command: netstat -tulpn | sed 's/\\([[:alnum:]]\\+\\)\\ \\+[[:digit:]]\\+\\ \\+[[:digit:]]\\+\\ \\+\\(.*\\):\\([[:digit:]]*\\)\\ \\+\\([0-9\\.\\:\\*]\\+\\).\\+\\ \\([[:digit:]]*\\/[[:alnum:]\\-]*\\).*/\\1 \\2 == \\3 == \\4 \\5/' | sort -k 4 -g | sed 's/ == \\(.*\\) ==/:\\1/' | sed 1,2d
                        alias: netstat listening ports
                        target:
                          - agent
                        frequency: 360
                      - logformat: full_command
                        command: last -n 20
                        alias: last -n 20
                        target:
                          - agent
                        frequency: 360
                      - file: /var/ossec/logs/active-responses.log
                        logformat: syslog
                        target:
                          - agent
                      - file: /var/log/auth.log
                        logformat: syslog
                        target:
                          - agent
                      - file: /var/log/syslog
                        logformat: syslog
                        target:
                          - agent
                      - file: /var/log/dpkg.log
                        logformat: syslog
                        target:
                          - agent
                      - file: /var/log/kern.log
                        logformat: syslog
                        target:
                          - agent
  /agents/{agent_id}/group:
    delete:
      tags:
        - agents
      summary: 'Remove all agent groups.'
      description: 'Removes the group of the agent. The agent will automatically revert to the "default" group.'
      operationId: api.controllers.agents_controller.delete_agent_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
      responses:
        '200':
          description: 'Remove the group of the agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      type: string
                example:
                  error: 0
                  data: "Group unset for agent '004'."
  /agents/{agent_id}/group/is_sync:
    get:
      tags:
        - agents
      summary: 'Get sync status of agent'
      description: 'Returns the sync status in JSON format.'
      operationId: api.controllers.agents_controller.get_sync_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
      responses:
        '200':
          description: 'Get agent sync'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        properties:
                          syncef:
                            type: boolean
                        
              example:
                error: 0
                data:
                    synced: false
  /agents/{agent_id}/group/{group_id}:
    delete:
      tags:
        - agents
      summary: 'Remove a single group of an agent'
      description: 'Remove the group of the agent but will leave the rest of its group if it belongs to a multigroup.'
      operationId: api.controllers.agents_controller.delete_agent_single_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: 'Remove the group of the agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      type: string
                example:
                  error: 0
                  data: "Group 'dmz' unset for agent '004'."
    put:
      tags:
        - agents
      summary: 'Add agent group'
      description: 'Adds an agent to the specified group.'
      operationId: api.controllers.agents_controller.put_agent_single_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/group_id'
        - in: query
          name: force_single_group
          description: Wheter to append new group to current agent's group or replace it.
          schema:
            type: boolean
      responses:
        '200':
          description: 'Add agent to group'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data: 
                        type: string
                example:
                  error: 0
                  data: "Group '004' already belongs to group 'dmz'."
  /agents/{agent_id}/key:
    get:
      tags:
        - agents
      summary: 'Get agent key'
      description: 'Returns the key of an agent.'
      operationId: api.controllers.agents_controller.get_agent_key
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
      responses:
        '200':
          description: 'Get agent key'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: string
                        
              example:
                error: 0
                data: MDA0IG1haW5fZGF0YWJhc2UgMTAuMC4wLjE1IDIzNGM1Y2MzZjhhNzA2OWY2ZGRjN2I0NDc1MWZmNmE1Zjg3MjExMTJiZWJhNmFhMWUyMDIzNWI4MTBjYWNiM2I=
  /agents/{agent_id}/restart:
    put:
      tags:
        - agents
      summary: 'Restart an agent'
      description: 'Restarts the specified agent.'
      operationId: api.controllers.agents_controller.put_restart_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
      responses:
        '200':
          description: 'Agent restarted'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentAffected'
                example:
                  error: 0
                  data: 
                    msg: All selected agents were restarted
                    affected_agents:
                      - "007"
  /agents/{agent_id}/upgrade:
    put:
      tags:
        - agents
      summary: 'Upgrade agent using online repository'
      description: 'Upgrade the agent using a WPK file from online repository.'
      operationId: api.controllers.agents_controller.put_upgrade_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - in: query
          name: wpk_repo
          description: WPK repository.
          schema:
            type: string
        - $ref: '#/components/parameters/version'
        - in: query
          name: use_http
          description: Use protocol http. If it's false use https. By default the value is set to false.
          schema:
            type: boolean
        - in: query
          name: force
          description: Force upgrade.
          schema:
            type: integer
            enum:
              - "0"
              - "1"
      responses:
        '200':
          description: 'Agent upgraded'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data: 
                        type: string
              example:
                error: 0
                data: "Upgrade procedure started"
  /agents/{agent_id}/upgrade_custom:
    put:
      tags:
        - agents
      summary: 'Upgrade agent using online repository'
      description: 'Upgrade the agent using a WPK file from online repository.'
      operationId: api.controllers.agents_controller.put_upgrade_custom_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - in: query
          name: file_path
          description: Path to the WPK file. The file must be on a folder on the Wazuh's installation directory (by default, <code>/var/ossec</code>).
          schema:
            type: string
        - in: query
          name: installer
          description: Installation script.
          schema:
            type: string
      responses:
        '200':
          description: 'Agent upgraded'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data: 
                        type: string
              example:
                error: 0
                data: "Installation started"
  /agents/{agent_name}:
    put:
      tags:
        - agents
      summary: 'Add agent (quick method)'
      description: 'Adds a new agent with name :agent_name. This agent will use ANY as IP.'
      operationId: api.controllers.agents_controller.put_new_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_name'
      responses:
        '200':
          description: 'Agent added'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentIdKey'
              example:
                error: 0
                data:
                  id: "008"
                  key: MDA4IG15TmV3QWdlbnQgYW55IDIyNGVmNmI4NjYyMDk5OTc5NzdiZWJhNDRmZTAyNDI0NjU2ZDM1NjhjNWJiZWI4Njk0M2JkMzdjZjA5YjZlM2M=
  /agents/{agent_id}/upgrade_result:
    get:
      tags:
        - agents
      summary: 'Get upgrade result from agent'
      description: 'Returns the upgrade result from an agent.'
      operationId: api.controllers.agents_controller.get_agent_upgrade
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - in: query
          name: timeout
          description: Seconds to wait for the agent to respond.
          schema:
            type: integer
          
      responses:
        '200':
          description: 'Get agent upgrade result'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: string
                        
              example:
                error: 0
                data: Agent upgraded successfully
  /agents/group/{group_id}:
    delete:
      tags:
        - agents
      summary: 'Remove a single group of multiple agents'
      description: 'Remove a list of agents of a group.'
      operationId: api.controllers.agents_controller.delete_multiple_agent_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/list_agents'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: 'Remove the group of multiple agents'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentAffected'
              example:
                error: 0
                data:
                  msg: All selected agents were removed to group dmz
                  affected_agents:
                  - '001'
                  - '002'
    post:
      tags:
        - agents
      summary: 'Add a list of agents to a group'
      description: 'Adds a list of agents to the specified group.'
      operationId: api.controllers.agents_controller.post_multiple_agent_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
      
      requestBody:
        content:
          application/json:
            schema:
              properties:
                agent_id_list:
                  description: List of agents ID.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: 'Add multiple agents to a group'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentAffected'
              example:
                error: 0
                data:
                  msg: All selected agents assigned to group dmz
                  affected_agents:
                  - '001'
                  - '002'
  /agents/groups:
    delete:
      tags:
        - agents
      summary: 'Delete a list of groups'
      operationId: api.controllers.agents_controller.delete_list_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/list_groups'
      responses:
        '200':
          description: 'Remove multiple group of multiple agents'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentGroupDeleted'
              example:
                error: 0
                data:
                  msg: All selected groups were removed
                  affected_groups:
                  - 'webserver'
                  - 'dataserver'
                  affected_agents:
                  - '002'
                  - '005'
                  - '003'
    get:
      tags:
        - agents
      summary: 'Get groups'
      description: 'Returns the list of existing agent groups.'
      operationId: api.controllers.agents_controller.get_list_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/hash'
      responses:
        '200':
          description: 'List all groups'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentGroup'
              example:
                error: 0
                data:
                  item:
                  - count: 2
                    name: default
                    mergedSum: f8d49771911ed9d5c45b03a40babd065
                    configSum: ab73af41699f13fdd81903b5f23d8d00
                  - count: 3
                    name: dmz
                    mergedSum: 220d6c5fc253f251827ee7487341c0fc
                    configSum: cfbae9ecc10eb15f1b4fc736de6758cc
                  - count: 0
                    name: pciserver
                    mergedSum: 220d6c5fc253f251827ee7487341c0fc
                    configSum: ab73af41699f13fdd81903b5f23d8d00

  /agents/groups/{group_id}:
    delete:
      tags:
        - agents
      summary: 'Remove group'
      description: 'Removes the group. Agents that were assigned to the removed group will automatically revert to the "default" group.'
      operationId: api.controllers.agents_controller.delete_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: 'Remove a group and revert agents to default group'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentGroupDeleted'
              example:
                error: 0
                data:
                  msg: All selected groups were removed
                  affected_groups:
                  - 'dmz'
                  affected_agents:
    get:
      tags:
        - agents
      summary: 'Get agents in a group'
      description: 'Returns the list of agents in a group.'
      operationId: api.controllers.agents_controller.get_agent_in_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/select'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/statusParam'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: 'List of agents or error description'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/Agent'
              example:
                error: 0
                data:
                  totalItems: 3
                  items:
                  - os:
                      arch: x86_64
                      codename: Bionic Beaver
                      major: '18'
                      minor: '04'
                      name: Ubuntu
                      platform: ubuntu
                      uname: Linux |agent-1 |4.15.0-43-generic |#46-Ubuntu SMP Thu Dec 6 14:45:28 UTC 2018 |x86_64
                      version: 18.04.1 LTS
                    group:
                      - default
                      - dmz
                    lastKeepAlive: '2019-02-19 10:31:09'
                    ip: 172.17.0.201
                    manager: manager
                    status: Active
                    version: Wazuh v3.8.2
                    dateAdd: '2019-02-19 10:25:42'
                    name: agent-1
                    configSum: ab73af41699f13fdd81903b5f23d8d00
                    registerIP: 172.17.0.201
                    node_name: node01
                    id: '001'
                    mergedSum: f8d49771911ed9d5c45b03a40babd065
                  - group:
                    - default
                    - dmz
                    lastKeepAlive: '10.0.0.62'
                    status: Never connected
                    dateAdd: '2019-02-19 10:30:59'
                    name: server001
                    registerIP: 10.0.0.62
                    node_name: unknown
                    id: '002'
                  - group:
                    - dmz
                    lastKeepAlive: '10.0.0.15'
                    status: Never connected
                    dateAdd: '2019-02-19 10:31:00'
                    name: main_database
                    registerIP: 10.0.0.15
                    node_name: unknown
                    id: '004'
    put:
      tags:
        - agents
      summary: 'Create a group'
      description: 'Creates a new group.'
      operationId: api.controllers.agents_controller.put_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: 'Add new agent'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data: 
                        type: string
              example:
                error: 0
                data: "Group 'pciserver' created"
  /agents/groups/{group_id}/configuration:
    get:
      tags:
        - agents
      summary: 'Get group configuration'
      description: 'Returns the group configuration (agent.conf).'
      operationId: api.controllers.agents_controller.get_group_config
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 'Get group configuration'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/GroupConfiguration'
              example:
                error: 0
                data:
                  totalItems: 1
                  items:
                  - filters:
                      os: Linux
                  - config:
                      localfile:
                      - location: /var/log/linux.log
                      - log_format: syslog
    post:
      tags:
        - agents
      summary: 'Put configuration file (agent.conf) into a group'
      description: 'Upload the group configuration (agent.conf).'
      operationId: api.controllers.agents_controller.post_group_config
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
        
      requestBody:
        content:
          application/xml:
            schema:
              properties:
                file_name:
                  description: Updated file
                  type: string
      
      responses:
        '200':
          description: 'Upload configuration'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      type: string
              example:
                error: 0
                data: Agent configuration was updated successfully
  /agents/groups/{group_id}/files:
    get:
      tags:
        - agents
      summary: 'Get group files'
      description: 'Returns the files belonging to the group.'
      operationId: api.controllers.agents_controller.get_group_files
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/hash'
      responses:
        '200':
          description: 'Get group files'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                properties:
                                  filename:
                                    type: string
                                  hash:
                                    type: string
              example:
                error: 0
                data:
                  totalItems: 24
                  items:
                    - filename: agent.conf
                      hash: ab73af41699f13fdd81903b5f23d8d00
                    - filename: ar.conf
                      hash: 76d8be9b97d8eae4c239e530ee7e71c8
                    - filename: cis_apache2224_rcl.txt
                      hash: 3c2469443a08b01c454ca35558cb9fa6
                    - filename: cis_debian_linux_rcl.txt
                      hash: cc12fdba595817758f308024f61acb71
                    - filename: cis_mysql5-6_community_rcl.txt
                      hash: f5f770160baf596373e4f77f987cc422
                    - filename: cis_mysql5-6_enterprise_rcl.txt
                      hash: de9865c809f1555d537e5a49872eaf4c
                    - filename: cis_rhel5_linux_rcl.txt
                      hash: a3af38b3f81a48332c7bcd9cf8aa6eff
                    - filename: cis_rhel6_linux_rcl.txt
                      hash: bdcfa3ab90b553f8e5c84cfa9fd90289
                    - filename: cis_rhel7_linux_rcl.txt
                      hash: 039e579029e3edcf8241fb391f46b12f
                    - filename: cis_rhel_linux_rcl.txt
                      hash: 569cd8a2cc7527cc75f81f77098de461
                    - filename: cis_sles11_linux_rcl.txt,
                      hash: d86ee36d384930293cbcc83c8fb57c93
                    - filename: cis_sles12_linux_rcl.txt
                      hash: 6f58710fa8eef659dc782a3fa4699e33
                    - filename: cis_win2012r2_domainL1_rcl.txt
                      hash: 8819dfa3523933b113e27a85fc9e568d
                    - filename: cis_win2012r2_domainL2_rcl.txt
                      hash: e8a2c7ab57bc8102b237f061b8f82dce
                    - filename: cis_win2012r2_memberL1_rcl.txt
                      hash: 38c88156d03af9372efd620e6e57d473
                    - filename: cis_win2012r2_memberL2_rcl.txt
                      hash: c4b62b3e01b5f5634a9719eb8a104028
                    - filename: merged.mg
                      hash: f8d49771911ed9d5c45b03a40babd065
                    - filename: rootkit_files.txt
                      hash: e5ddcac443143cef6237d5f9b8d48585
                    - filename:  rootkit_trojans.txt
                      hash: 6bcf7016d3e6b4c7faa62cf265c24dcc
                    - filename: system_audit_rcl.txt
                      hash: be69b84dd5ee73200bb903a46270e18c
                    - filename: system_audit_ssh.txt
                      hash: 407c1f5e103f0cb58249eb7252a84797
                    - filename: win_applications_rcl.txt
                      hash: 0a4ad12c8145aca8a28d31de5c448b48
                    - filename: win_audit_rcl.txt
                      hash: 92d8011facc8b921ece301ea4ce6a616
                    - filename: win_malware_rcl.txt
                      hash: 6a8d3c63a0e77dea35aaed3ee2cca3a1
  /agents/groups/{group_id}/files/{file_name}:
    get:
      tags:
        - agents
      summary: 'Get a file in group'
      description: 'Returns the specified file belonging to the group parsed to JSON.'
      operationId: api.controllers.agents_controller.get_group_file
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/file_name'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/format'
      responses:
        '200':
          description: 'Get group file'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            controls:
                              type: array
                              items:
                                properties:
                                  condition:
                                    type: string
                                  name:
                                    type: string
                                  reference:
                                    type: string
                                  checks:
                                    type: array
                                    items:
                                      type: string
              example:
                error: 0
                data:
                  controls:
                    - ...: ...
                    - condition: all required
                      name: CIS - Testing against the CIS Debian Linux Benchmark v1
                      reference: CIS_Debian_Benchmark_v1.0pdf
                      checks: 
                        - f:/etc/debian_version
    post:
      tags:
        - agents
      summary: 'Upload file into a group'
      operationId: api.controllers.agents_controller.post_group_file
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/file_name'
      
      requestBody:
        content:
          application/xml:
            schema:
              properties:
                file_name:
                  description: Updated file
                  type: string
      
      responses:
        '200':
          description: 'Post group file'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      type: string
              example:
                error: 0
                data: Agent configuration was updated successfully
  /agents/groups/insert:
    post:
      tags:
        - agents
      summary: 'Get a file in group'
      description: 'Returns the specified file belonging to the group parsed to JSON.'
      operationId: api.controllers.agents_controller.insert_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
      requestBody:
        content:
          application/json:
              schema:
                properties:
                  name:
                    description: Agent name.
                    type: string
                    
                  ip:
                    description: "If this is not included, the API will get the IP automatically. If you are behind a proxy, you must set the option config.BehindProxyServer to yes at config.js. Allowed values: IP, IP/NET, ANY"
                    type: string
                    
                  id:
                    description: Agent ID.
                    type: string
                    
                  key:
                    description: "Agent key. Minimum length: 64 characters. Allowed values: ^[a-zA-Z0-9]+$"
                    type: string
  
                  force:
                    description: Remove the old agent with the same IP if disconnected since <force> seconds.
                    type: integer
      responses:
        '200':
          description: 'Get group file'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentIdKey'
              example:
                error: 0
                data:
                  id: 123
                  key: MTIzIE5ld0hvc3RfMiAxMC4wLjEwLjEwIDFhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpNjQ=
  /agents/name/{agent_name}:
    get:
      tags:
        - agents
      summary: 'Get an agent by its name'
      description: 'Returns various information from an agent called :agent_name.'
      operationId: api.controllers.agents_controller.get_agent_by_name
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_name'
        - $ref: '#/components/parameters/select'
      responses:
        '200':
          description: 'Get agent'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/AgentByName'
              example:
                error: 0
                data:
                  ip: 10.0.0.9
                  status: Never connected
                  dateAdd: "2019-02-19 10:31:12"
                  name: NewHost
                  registerIP: 10.0.0.9
                  node_name: unknown
                  id: "007"
  /agents/no_group:
    get:
      tags:
        - agents
      summary: 'Get agents without group'
      description: 'Returns a list with the available agents without group.'
      operationId: api.controllers.agents_controller.get_agent_no_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/select'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: 'Get agents without group'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/AgentByName'
              example:
                error: 0
                data:
                  totalItems: 3
                  items:
                    - ip: 10.0.0.20
                      status: Never connected
                      dateAdd: "2019-02-19 10:31:00"
                      name: server002
                      registerIP: 10.0.0.20
                      node_name: unknown
                      id: "006"
                    - ip: 10.0.0.9
                      status: Never connected
                      dateAdd: "2019-02-19 10:31:12"
                      name: NewHost
                      registerIP: 10.0.0.9
                      node_name: unknown
                      id: "007"
                    - ip: 10.0.10.10
                      status: Never connected
                      dateAdd: "2019-02-19 10:31:13"
                      name: NewHost_2
                      registerIP: 10.0.10.10
                      node_name: unknown
                      id: "123"
  /agents/outdated:
    get:
      tags:
        - agents
      summary: 'Get outdated agents'
      description: 'Returns the list of outdated agents.'
      operationId: api.controllers.agents_controller.get_agent_outdated
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: 'Get outdated agents'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/AgentSimple'
              example:
                error: 0
                data:
                  totalItems: 2
                  items:
                    - version: Wazuh v3.0.0
                      id: "003"
                      name: main_database
                    - version: Wazuh v3.0.0
                      id: "004"
                      name: dmz002
  /agents/restart:
    post:
      tags:
      - agents
      summary: 'Restart a list of agents'
      operationId: api.controllers.agents_controller.restart_list_agents
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  description: Array of agent ID's.
                  type: array
                  items:
                    type: string
                  
      responses:
        '200':
          description: Agents restarted
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AgentAffected'
                example:
                  error: 0
                  data:
                    msg: All selected agents were restarted
                    affected_agents:
                    - '002'
                    - '004'
    put:
      tags:
      - agents
      summary: 'Restarts all agents'
      operationId: api.controllers.agents_controller.restart_all_agents
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: Agents restarted
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                example:
                  error: 0
                  data: "Restarting all agents"
  /agents/stats/distinct:
    get:
      tags:
        - agents
      summary: 'Get distinct fields in agents'
      description: 'Returns all the different combinations that agents have for the selected fields. It also indicates the total number of agents that have each combination.'
      operationId: api.controllers.agents_controller.get_agent_fields
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/select'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: 'Get fields in agents'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                properties:
                                  os:
                                    properties:
                                      platform:
                                        type: string
                                        nullable: true
                                      version:
                                        type: string
                                        nullable: true
                                      name:
                                        type: string
                                        nullable: true
                                  count:
                                    type: integer
              example:
                error: 0
                data:
                  totalItems: 7
                  items:
                    - os:
                        platform: ubuntu
                      count: 2
                    - count: 5
  /agents/summary:
    get:
      tags:
        - agents
      summary: 'Get agents summary'
      description: 'Returns a summary of the available agents.'
      operationId: api.controllers.agents_controller.get_agent_summary
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: 'Get summary of agents'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      properties:
                        Total:
                          type: integer
                        Active:
                          type: integer
                        Disconnected:
                          type: integer
                        Never connected:
                          type: integer
                        Pending:
                          type: integer
              example:
                error: 0
                data:
                  Total: 7
                  Active: 2
                  Disconnected: 0
                  Never connected: 5
                  Pending: 0
  /agents/summary/os:
    get:
      tags:
        - agents
      summary: 'Get OS summary'
      description: 'Returns a summary of the OS.'
      operationId: api.controllers.agents_controller.get_agent_summary_os
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: 'Get summary of agents OS'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                type: string
              example:
                error: 0
                data:
                  totalItems: 1
                  items:
                    - ubuntu
  
  /cache/:
    delete:
      tags:
        - cache
      summary: 'Clear entire cache'
      description: 'Clears entire cache'
      operationId: api.controllers.cache_controller.delete_cache
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: 'Cache delete'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/GroupCache'
              example:
                error: 0
                data:
                  all:
                    -
                  groups:
    get:
      tags:
        - cache
      summary: 'Get cache index'
      description: 'Returns current cache index.'
      operationId: api.controllers.cache_controller.get_cache
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: 'Cache index'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/GroupCache'
              example:
                error: 0
                data:
                  all:
                    -
                  groups:
      
  /cache/{group}:
    delete:
      tags:
        - cache
      summary: 'Clear group cache'
      description: 'Clears cache of the specified group.'
      operationId: api.controllers.cache_controller.delete_cache_group
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/group_cache'
      responses:
        '200':
          description: 'Cache group delete'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/GroupCacheComplete'
              example:
                error: 0
                data:
                  all:
                    - /agents/stats/distinct?pretty&fields=os.platform
                  groups:
                    agents:
                      - /agents/stats/distinct?pretty&fields=os.platform
  
  /cache/config:
    get:
      tags:
        - cache
      summary: 'Return cache configuration.'
      description: 'Returns cache configuration.'
      operationId: api.controllers.cache_controller.get_cache_config
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
      responses:
        '200':
          description: 'Cache index'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      properties:
                        debug:
                          type: boolean
                        defaultDuration:
                          type: integer
                        enabled:
                          type: boolean
                        appendKey:
                          type: array
                          items:
                            type: string
                        jsonp:
                          type: boolean
                        redisClient:
                          type: boolean
              example:
                error: 0
                data:
                  debug: false
                  defaultDuration: 750
                  enabled: false
                  appendKey:
                    -
                  jsonp: false
                  redisClient: false
      
  /ciscat/{agent_id}/results:
    get:
      tags:
      - ciscat
      summary: 'Get CIS-CAT results from an agent'
      description: "Returns the agent's ciscat results info."
      operationId: api.controllers.ciscat_controller.get_agents_cistat_results
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/select'
        - $ref: '#/components/parameters/benchmark'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/pass'
        - $ref: '#/components/parameters/fail'
        - $ref: '#/components/parameters/error'
        - $ref: '#/components/parameters/notchecked'
        - $ref: '#/components/parameters/unknown'
        - $ref: '#/components/parameters/score'
        
      responses:
        '200':
          description: 'List of agents or error description'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/CiscatResults'
              example:
                error: 0
                data:
                  totalItems: 2
                  items:
                  - profile: xccdf_org.cisecurity.benchmarks_profile_Level_2_-_Server
                    score: 57
                    error: 0
                    scan:
                      id: 1406741147
                      time: "2018-09-06T07:50:15.632-07:00"
                    fail: 79
                    benchmark: CIS Ubuntu Linux 16.04 LTS Benchmark
                    pass: 104
                    notchecked: 36
                    unknown: 1
                  - profile: xccdf_org.cisecurity.benchmarks_profile_Level_1_-_Workstation
                    score: 64
                    error: 0
                    scan:
                      id: 1406741147
                      time: "2018-09-06T07:50:52.630-07:00"
                    fail: 53
                    benchmark: CIS Ubuntu Linux 16.04 LTS Benchmark
                    pass: 96
                    notchecked: 71
                    unknown: 0
  
  /sca/{agent_id}:
    get:
      tags:
      - sca
      summary: 'Get security configuration assessment (SCA) database'
      description: 'Returns the security SCA database of an agent.'
      operationId: api.controllers.sca_controller.get_sca_agent
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/references'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: 'SCA database elements'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/SCADatabase'
              example:
               error: 0
               data:
                totalItems: 2
                items:
                - name: "System audit for SSH hardening"
                  pass: 3
                  score: 33
                  references: "https://www.ssh.com/ssh/"
                  fail: 6
                  description: "Guidance for establishing a secure configuration for SSH service vulnerabilities."
                  policy_id: "system_audit_ssh"
                  end_scan: "2019-03-06 10:12:02"
                  start_scan: "2019-03-06 10:12:02"
                - name: "CIS benchmark for Debian/Linux"
                  pass: 36
                  score: 87
                  references: "https://www.cisecurity.org/cis-benchmarks/"
                  fail: 5
                  description: "This document provides prescriptive guidance for establishing a secure configuration posture for Debian Linux systems running on x86 and x64 platforms. Many lists are included including filesystem types, services, clients, and network protocols. Not all items in these lists are guaranteed to exist on all distributions and additional similar items may exist which should be considered in addition to those explicitly mentioned."
                  policy_id: "cis_debian"
                  end_scan: "2019-03-06 10:11:53"
                  start_scan: "2019-03-06 10:11:53"

  /sca/{agent_id}/checks/{policy_id}:
    get:
      tags:
      - sca
      summary: 'Get policy monitoring alerts for a given policy'
      description: 'Returns the policy monitoring alerts for a given policy'
      operationId: api.controllers.sca_controller.get_sca_checks
      parameters:
        - $ref: '#/components/parameters/pretty'
        - $ref: '#/components/parameters/wait_for_complete'
        - $ref: '#/components/parameters/agent_id'
        - $ref: '#/components/parameters/policy_id'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/rationale'
        - $ref: '#/components/parameters/remediation'
        - $ref: '#/components/parameters/file'
        - $ref: '#/components/parameters/process'
        - $ref: '#/components/parameters/directory'
        - $ref: '#/components/parameters/registry'
        - $ref: '#/components/parameters/references'
        - $ref: '#/components/parameters/result'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: 'List of SCA Checks for a given policy ID'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      allOf:
                        - $ref: '#/components/schemas/ListMetadata'
                        - type: object
                          properties:
                            items:
                              type: array
                              items:
                                $ref: '#/components/schemas/SCAChecks'
              example:
                error: 0
                data:
                  totalItems: 2
                  items:
                  - result: "passed"
                    title: "Web exploits (uncommon file name inside htdocs) - Possible compromise"
                    directory:  "/var/www,/var/htdocs,/home/httpd,/usr/local/apache,/usr/local/apache2,/usr/local/www"
                    id: 1008
                    policy_id: "system_audit"
                    compliance:
                    - key: "pci_dss"
                      value: "6.5, 6.6, 11.4"
                  - file: "/etc/php.ini"
                    result: "passed"
                    title: "PHP - Displaying of errors is enabled"
                    id: 1003
                    policy_id: "system_audit"
                    compliance:
                    - 

  /security/user/authenticate:
    get:
      tags:
      - login
      summary: 'User/password authentication to get an access token'
      description: 'This method should be called to get an API token. This token will expire at some time.'
      operationId: api.controllers.login_controller.login_user
      security:
        - basicAuth: []
      responses:
        '200':
          description: 'Login successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: 'Access unauthorized'

externalDocs:
  description: Find more about Wazuh API usage
  url: 'https://documentation.wazuh.com/current/user-manual/api/index.html'

