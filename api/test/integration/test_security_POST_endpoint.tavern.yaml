---
test_name: POST /security/roles

includes:
  - !include common.yaml

marks:
  - usefixtures:
    - security_tests

stages:

  # Authentication stage
  - type: ref
    id: login_get_token

  # POST /security/roles
  - name: Add a role to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        rule:
          MATCH:
            definition: "normal_rule"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: !anyint
              name: test_i
              policies: []
              rule:
                MATCH:
                  definition: normal_rule
          total_affected_items: 1

  # POST /security/roles
  - name: Add a role to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        rule:
          FIND:
            definition: "normal_rule1"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: !anyint
              name: test_i1
              policies: []
              rule:
                FIND:
                  definition: normal_rule1
          total_affected_items: 1

  # POST /security/roles
  - name: Add a role to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i2"
        rule:
          FIND$:
            definition: "normal_rule2"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: !anyint
              name: test_i2
              policies: []
              rule:
                FIND$:
                  definition: normal_rule2
          total_affected_items: 1

  # POST /security/roles
  - name: Add an existent role (name) to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        rule:
          definition1: "normal_rule1"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4005
                message: !anystr
                remediation: !anything
              id:
                - test_i
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  # POST /security/roles
  - name: Add an existent role (rule) to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        rule:
          definition: "normal_rule"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4005
                message: !anystr
                remediation: !anything
              id:
                - test_i1
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr
---
test_name: POST /security/policies

stages:

  # POST /security/policies
  - name: Add a policy to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: !anyint
              name: test_i
              policy:
                actions:
                  - agent:delete
                effect: allow
                resources:
                  - agent:id:004
                  - agent:id:005
                  - agent:id:006
              roles: []
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # POST /security/policies
  - name: Add a policy to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          actions:
            - "agent:update"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: !anyint
              name: test_i1
              policy:
                actions:
                  - agent:update
                effect: allow
                resources:
                  - agent:id:004
                  - agent:id:005
                  - agent:id:006
              roles: []
          total_affected_items: 1

  # POST /security/policies
  - name: Add a policy to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i2"
        policy:
          actions:
            - "agent:upgrade"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "deny"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: !anyint
              name: test_i2
              policy:
                actions:
                  - agent:upgrade
                effect: deny
                resources:
                  - agent:id:004
                  - agent:id:005
                  - agent:id:006
              roles: []
          total_affected_items: 1

  # POST /security/policies
  - name: Add an existent policy (name) to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4009
                message: !anystr
                remediation: !anything
              id:
                - test_i
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  # POST /security/policies
  - name: Add an existent policy (policy) to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4009
                message: !anystr
                remediation: !anything
              id:
                - test_i1
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  # POST /security/policies
  - name: Add an invalid policy to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          actions:
            - "[agent:delete"
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4006
                message: !anystr
                remediation: !anystr
              id:
                - test_i1
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  # POST /security/policies
  - name: Add an invalid policy to the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: "test_i1"
        policy:
          resources:
            - "agent:id:004"
            - "agent:id:005"
            - "agent:id:006"
          effect: "allow"
    response:
      status_code: 400
      body:
        detail: !anystr
        status: 400
        title: "Bad Request"
        type: "about:blank"
---
test_name: POST /security/roles/{role_id}/policies/{policy_id}

stages:

  # POST /security/roles/{role_id}/policies/{policy}
  - name: Create link role-policy
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/4/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 2
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          total_affected_items: 1

  # POST /security/roles/{role_id}/policies/{policy}
  - name: Create link role-policy
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/3/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 3
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          total_affected_items: 1

  # POST /security/roles/{non-existent role_id}/policies/{policy}
  - name: Create link role-policy (non-existent role)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 2,3
    response:
      status_code: 200
      body: &error
        data:
          affected_items: []
          failed_items:
            - error:
                code: !anyint
                message: !anystr
                remediation: !anything
              id: !anything
          total_affected_items: 0
          total_failed_items: 2

  # POST /security/roles/{role_id}/policies/{non-existent policy}
  - name: Create link role-policy (non-existent policy)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/2/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 999,56
    response:
      status_code: 200
      body:
        <<: *error

  # POST /security/roles/{non-existent role_id}/policies/{non-existent policy}
  - name: Create link role-policy (Both non-existent)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 999,2
    response:
      status_code: 200
      body:
        <<: *error
