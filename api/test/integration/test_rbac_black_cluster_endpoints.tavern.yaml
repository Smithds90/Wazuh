---
test_name: /cluster/local/config

marks:
  - usefixtures:
    - cluster_black_rbac_tests

includes:
  - !include common.yaml

stages:

    # Authentication stage
  - type: ref
    id: login_get_token

  - name: Get cluster config
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/local/config"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body: &permission_denied
        code: 4000
        detail: !anystr

---
test_name: GET /cluster/healthcheck

stages:

  - name: Get cluster healtcheck
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/healthcheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_nodes: 'worker1,worker2'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - info:
                name: "worker1"
                ip: !anystr
                version: !anystr
                type: !anystr
                n_active_agents: !anyint
              status: !anything
          failed_items:
            - error:
                code: 4000
                message: !anystr
                remediation: !anystr
              id:
                - 'worker2'
          total_affected_items: 1
          total_failed_items: 1
        message: !anystr

  - name: Get cluster healtcheck
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/healthcheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - info:
                name: "worker1"
                ip: !anystr
                version: !anystr
                type: !anystr
                n_active_agents: !anyint
              status: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

---
test_name: GET /cluster/local/info

stages:

  - name: Get cluster node
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/local/info"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: GET /cluster/nodes

stages:

  - name: Get cluster nodes
    request: &get_cluster_nodes
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 5
    response:
      status_code: 200
      body:
        data:
          affected_items: &cluster_nodes_response
            - name: !anystr
              type: !anystr
              version: !anystr
              ip: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

  - name: Get cluster nodes
    request:
      <<: *get_cluster_nodes
      params:
        limit: 500
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *cluster_nodes_response
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

  - name: Filters (type) -> master
    request:
      <<: *get_cluster_nodes
      params:
        type: master
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
        message: !anystr

  - name: Filters (type) -> worker
    request:
      <<: *get_cluster_nodes
      params:
        limit: 5
        type: worker
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *cluster_nodes_response
              type: worker
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

---
test_name: GET /cluster/nodes/{node_id}

stages:

  - name: Get cluster {worker1} (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_nodes: 'worker2'
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Get cluster {worker2} (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_nodes: 'worker1'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *cluster_nodes_response
              type: worker
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

  - name: Get cluster {master-node,worker1,worker2} (Allow, Deny, Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_nodes: 'master-node,worker1,worker2'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *cluster_nodes_response
              type: worker
          failed_items:
            - error:
                code: 4000
                message: !anystr
                remediation: !anystr
              id:
                - 'master-node'
                - 'worker2'
          total_affected_items: 1
          total_failed_items: 2
        message: !anystr

---
test_name: GET /cluster/status

stages:

  - name: Get cluster status
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: GET /cluster/{node_id}/configuration

stages:

  - name: Request {node_id}
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - alerts: !anything
              auth: !anything
              cis-cat: !anything
              cluster: !anything
              command: !anything
              global: !anything
              localfile: !anything
              open-scap: !anything
              osquery: !anything
              remote: !anything
              rootcheck: !anything
              ruleset: !anything
              sca: !anything
              syscheck: !anything
              syscollector: !anything
              vulnerability-detector: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

  - name: Request (worker1) (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/master-node/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: GET /cluster/configuration/validation

stages:

  - name: Request cluster validation
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/configuration/validation"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - name: worker1
              status: 'OK'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

  - name: Request cluster validation
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/configuration/validation"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_nodes: 'worker1,worker2'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - name: worker1
              status: OK
          failed_items:
            - error:
                code: 4000
                message: !anystr
                remediation: !anystr
              id:
                - worker2
          total_affected_items: 1
          total_failed_items: 1
        message: !anystr

---
test_name: GET /cluster/{node_id}/configuration/{component}/{configuration}

stages:

  - name: Try to show the config of analisys/global through a worker
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/configuration/analysis/global"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to show the config of analisys/global through a worker
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/configuration/analysis/global"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200

---
test_name: GET /cluster/{node_id}/files

marks:
  - xfail

stages:

  - name: Get ossec.conf {worker1} (Allow) (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: ruleset/decoders/0005-wazuh_decoders.xml
    response:
      status_code: 200
      body:
        contents: !anystr

  - name: Get ossec.conf {worker1} (Allow) (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: etc/ossec.conf
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Get ossec.conf {worker2} (Deny) (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: ruleset/decoders/0005-wazuh_decoders.xml
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Get ossec.conf {worker2} (Deny) (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: etc/ossec.conf
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: DELETE /cluster/{node_id}/files

marks:
  - xfail

stages:

  - name: Delete rules file (Deny) (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/files"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: ruleset/decoders/0005-wazuh_decoders.xml
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Delete rules file (Allow) (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/files"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: etc/ossec.conf
    response:
      status_code: 400

  - name: Delete rules file (Deny) (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/files"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: etc/ossec.conf
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Delete rules file (Allow) (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/files"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        path: ruleset/decoders/0005-wazuh_decoders.xml
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: PUT /cluster/{node_id}/files

marks:
  - xfail

stages:

  - name: Upload ossec.conf {worker1} (Allow) (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/files"
      method: PUT
      data: "{ossec_conf}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
      params:
        overwrite: True
        path: etc/ossec.conf
    response:
      status_code: 200

  - name: Upload ossec.conf {worker2} (Deny) (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/files"
      method: PUT
      data: "{ossec_conf}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
      params:
        overwrite: True
        path: etc/ossec.conf
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: GET /cluster/{node_id}/info

stages:

  - name: Request {node_id}
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/info"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Request {node_id}
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/info"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

---
test_name: GET /cluster/{node_id}/logs

stages:

  - name: Request {worker1} (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request {worker2} (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: GET /cluster/{node_id}/logs/summary

stages:

  - name: Request {worker1} (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/logs/summary"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request {worker2} (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/logs/summary"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: GET /cluster/{node_id}/stats

stages:

  - name: Cluster stats {worker2} today (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Cluster stats {worker1} today (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        date: "2019-08-27"
    response:
      status_code: 200

---
test_name: GET /cluster/{node_id}/status

stages:

  - name: Request {worker1} (Allow)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request {worker2} (Deny)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: PUT /cluster/restart

stages:

  - name: Restart cluster
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_nodes: 'worker1,worker2'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - worker2
          failed_items:
            - error:
                code: 4000
                message: !anystr
                remediation: !anystr
              id:
                - worker1
          total_affected_items: 1
          total_failed_items: 1
        message: !anystr
    delay_after: 30

  - name: Restart cluster
    request:
      url: "{protocol:s}://{host:s}:{port:d}/cluster/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - 'master-node'
            - 'worker2'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0
        message: !anystr
