---
test_name: GET /rules

marks:
  - usefixtures:
    - base_tests

includes:
  - !include common.yaml

stages:
  - type: ref
    id: login_get_token

  - name: Try to show the rules of the system
    request: &general_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items: &rules_response
            - description: !anystr
              details: !anything
              file: !anystr
              gdpr: !anything
              groups: !anything
              id: !anyint
              level: !anyint
              path: !anystr
              pci: !anything
              status: !anystr
              gpg13: !anything
              hipaa: !anything
              nist_800_53: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the rules of the system, offset = 0
    request:
      <<: *general_rules_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - description: !anystr
              file: !anystr
              status: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      save:
        body:
          second_rule_description: data.affected_items.1.description
          second_rule_file: data.affected_items.1.file
          second_rule_status: data.affected_items.1.status

  - name: Try to show the rules of the system, offset = 1
    request:
      <<: *general_rules_request
      params:
        limit: 2
        offset: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - description: "{second_rule_description}"
              file: "{second_rule_file}"
              status: "{second_rule_status}"
            - <<: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the rules of the system, without limit
    request:
      <<: *general_rules_request
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Try to show the rules of the system with a existent state
    request:
      <<: *general_rules_request
      params:
        status: disabled
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - <<: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to get all rules with limit = 0
    request:
      <<: *general_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body: &error_response
        detail: !anystr
        status: 400
        title: "Bad Request"
        type: "about:blank"

  - name: Sort without limit
    request:
      <<: *general_rules_request
      params:
        sort: -file
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Search in rules
    request:
      url: "{protocol:s}://{host:s}:{port:d}/rules"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        search: web
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - <<: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      save:
        body:
          rule_id: data.affected_items.1.id

  - name: Test search
    request:
      <<: *general_rules_request
      params:
        search: web
        offset: 1
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: !int "{rule_id}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Invalid parameter
    request:
      <<: *general_rules_request
      params:
        noexist: nothing
    response:
      status_code: 400
      body: &error_null
        detail: "Extra query parameter(s) noexist not in spec"
        status: 400
        title: null
        type: "about:blank"

  - name: Invalid status
    request:
      <<: *general_rules_request
      params:
        status: aCtIvE
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Invalid parameters - Extra fields
    request:
      <<: *general_rules_request
      params:
        status: enabled
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

  - name: Filters status
    request:
      <<: *general_rules_request
      params:
        status: enabled
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - <<: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter status without limit
    request:
      <<: *general_rules_request
      params:
        status: enabled
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Try to show the rules of the system with a non-existent state
    request:
      url: "{protocol:s}://{host:s}:{port:d}/rules"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        status: notexist
    response:
      status_code: 400
      body:
        <<: *error_response

---
test_name: GET /rules filters

stages:

  - name: Filter group
    request:
      <<: *general_rules_request
      params:
        group: web
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter group without limit
    request:
      <<: *general_rules_request
      params:
        group: web
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Try to show the rules by levels
    request:
      <<: *general_rules_request
      params:
        level: 2
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - <<: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter levels without limit
    request:
      <<: *general_rules_request
      params:
        level: 2
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Try to show the rules by levels (invalid interval)
    request:
      <<: *general_rules_request
      params:
        level: 2-4-5
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter path
    request:
      <<: *general_rules_request
      params:
        path: ruleset/rules
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - <<: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter path without limit
    request:
      <<: *general_rules_request
      params:
        path: ruleset/rules
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Filter file
    request:
      <<: *general_rules_request
      params:
        file: 0015-ossec_rules.xml
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - <<: *rules_response
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      save:
        body:
          pci_value: data.affected_items.1.pci.0
          gdpr_value: data.affected_items.1.gdpr.0
          gpg13_value: data.affected_items.1.gpg13.0
          hipaa_value: data.affected_items.1.hipaa.0
          nist-800-53_value: data.affected_items.1.nist_800_53.0

  - name: Filter file without limit
    request:
      <<: *general_rules_request
      params:
        file: 0015-ossec_rules.xml
        offset: 1
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - pci:
              - "{pci_value}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter pci
    request:
      <<: *general_rules_request
      params:
        pci: "{pci_value}"
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - pci:
              - "{pci_value}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter pci without limit
    request:
      <<: *general_rules_request
      params:
        pci: "{pci_value}"
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Filter gdpr
    request:
      <<: *general_rules_request
      params:
        gdpr: "{gdpr_value}"
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - gdpr:
              - "{gdpr_value}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter gdpr without limit
    request:
      <<: *general_rules_request
      params:
        gdpr: "{gdpr_value}"
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Filter gpg13
    request:
      <<: *general_rules_request
      params:
        gpg13: "{gpg13_value}"
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - gpg13:
              - "{gpg13_value}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter gpg13 without limit
    request:
      <<: *general_rules_request
      params:
        gpg13: "{gpg13_value}"
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Filter hipaa
    request:
      <<: *general_rules_request
      params:
        hipaa: "{hipaa_value}"
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - hipaa:
              - "{hipaa_value}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter hipaa without limit
    request:
      <<: *general_rules_request
      params:
        hipaa: "{hipaa_value}"
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Filter nist-800-53
    request:
      <<: *general_rules_request
      params:
        nist-800-53: "{nist-800-53_value}"
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - nist_800_53:
              - "{nist-800-53_value}"
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter nist-800-53 without limit
    request:
      <<: *general_rules_request
      params:
        nist-800-53: "{nist-800-53_value}"
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

---
test_name: GET /rules/requirement/pci

stages:

  - name: Try to show the rules by requirement pci
    request: &pci_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules/requirement/pci"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - 1.1.1
            - 1.3.4
          failed_items: []
          total_affected_items: 38
          total_failed_items: 0
        message: Selected rules were shown

  - name: Try to show the rules by requirement pci, limit and offset
    request:
      <<: *pci_rules_request
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - 1.1.1
          failed_items: []
          total_affected_items: 38
          total_failed_items: 0
        message: Selected rules were shown

  - name: Try to show the rules by requirement pci, limit = 0
    request:
      <<: *pci_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *pci_rules_request
      params:
        limit: 1000
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 38
          total_failed_items: 0
        message: Selected rules were shown
      save:
        body:
          affected_items: data.affected_items

  - name: Filter sort
    request:
      <<: *pci_rules_request
      params:
        sort: "-"
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            affected_items: "{affected_items}"

  - name: Filter search
    request:
      <<: *pci_rules_request
      params:
        search: 10
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Invalid filter
    request:
      <<: *pci_rules_request
      params:
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

---
test_name: GET /rules/requirement/gdpr

stages:

  - name: Try to show the rules by requirement gdpr
    request: &gdpr_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules/requirement/gdpr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - II_5.1.f
            - IV_30.1.g
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0
        message: Selected rules were shown

  - name: Try to show the rules by requirement gdpr, limit and offset
    request:
      <<: *gdpr_rules_request
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - II_5.1.f
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0
        message: Selected rules were shown

  - name: Try to show the rules by requirement gdpr, limit = 0
    request:
      <<: *gdpr_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *gdpr_rules_request
      params:
        limit: 1000
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0
        message: Selected rules were shown
      save:
        body:
          affected_items: data.affected_items

  - name: Filter reverse sort
    request:
      <<: *gdpr_rules_request
      params:
        limit: 1000
        sort: "-"
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            affected_items: "{affected_items}"

  - name: Filter search
    request:
      <<: *gdpr_rules_request
      params:
        search: 10
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Invalid filter
    request:
      <<: *gdpr_rules_request
      params:
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

---
test_name: GET /rules/requirement/gpg13

stages:

  - name: Try to show the rules by requirement gpg13
    request: &gpg13_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules/requirement/gpg13"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  - name: Try to show the rules by requirement gpg13, limit and offset
    request:
      <<: *gpg13_rules_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '1.3'
            - '10.1'
          failed_items: []
          total_affected_items: 28
          total_failed_items: 0
        message: Selected rules were shown

  - name: Try to show the rules by requirement gpg13, limit = 0
    request:
      <<: *gpg13_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *gpg13_rules_request
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
        message: Selected rules were shown
      save:
        body:
          affected_items: data.affected_items

  - name: Filter sort
    request:
      <<: *gpg13_rules_request
      params:
        limit: 1000
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 28
          total_failed_items: 0
        message: Selected rules were shown
      save:
        body:
          affected_items: data.affected_items

  - name: Filter reverse sort
    request:
      <<: *gpg13_rules_request
      params:
        sort: "-"
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            affected_items: "{affected_items}"

  - name: Filter search
    request:
      <<: *gpg13_rules_request
      params:
        search: 10
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Invalid filter
    request:
      <<: *gpg13_rules_request
      params:
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

---
test_name: GET /rules/requirement/hipaa

stages:

  - name: Try to show the rules by requirement hipaa
    request: &hipaa_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules/requirement/hipaa"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the rules by requirement hipaa, limit and offset
    request:
      <<: *hipaa_rules_request
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the rules by requirement hipaa, limit = 0
    request:
      <<: *hipaa_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *hipaa_rules_request
      params:
        sort: "-"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter search
    request:
      <<: *hipaa_rules_request
      params:
        search: 1
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Invalid filter
    request:
      <<: *hipaa_rules_request
      params:
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

---
test_name: GET /rules/requirement/nist-800-53

stages:

  - name: Try to show the rules by requirement nist-800-53
    request: &nist-800-53_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules/requirement/nist-800-53"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the rules by requirement nist-800-53, limit and offset
    request:
      <<: *nist-800-53_rules_request
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the rules by requirement nist-800-53, limit = 0
    request:
      <<: *nist-800-53_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *nist-800-53_rules_request
      params:
        sort: "-"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter search
    request:
      <<: *nist-800-53_rules_request
      params:
        search: 10
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Invalid filter
    request:
      <<: *nist-800-53_rules_request
      params:
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

---
test_name: GET /rules/groups

stages:

  - name: Try to show the rules groups
    request: &groups_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules/groups"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the groups of rules, limit and offset
    request:
      <<: *groups_rules_request
      params:
        offset: 0
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Try to show the groups of rules, limit = 0
    request:
      <<: *groups_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *groups_rules_request
      params:
        sort: "-"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter search
    request:
      <<: *groups_rules_request
      params:
        search: web
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Invalid filter
    request:
      <<: *groups_rules_request
      params:
        noexist: nothing
    response:
      status_code: 400
      body:
        <<: *error_null

---
test_name: GET /rules/files

stages:

  - name: Get the rules files
    request: &files_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Get the rules files, limit = 1, offset = 0
    request:
      <<: *files_rules_request
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint
      save:
        body:
          affected_items: data.affected_items

  - name: Get the rules files, limit = 0
    request:
      <<: *files_rules_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *files_rules_request
      params:
        sort: "-file"
        limit: 1
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            affected_items: "{affected_items}"

  - name: Invalid filter
    request:
      <<: *files_rules_request
      params:
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

  - name: Invalid filter - Extra field
    request:
      <<: *files_rules_request
      params:
        status: enabled
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

  - name: Filter status
    request:
      <<: *files_rules_request
      params:
        status: enabled
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: !anyint

  - name: Filter download
    request:
      url: "{protocol:s}://{host:s}:{port:d}/rules/files/0350-amazon_rules.xml/download"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

---
test_name: GET /rules/{rule_ids}

stages:

  - name: Try to show a rule with a existent id
    request: &id_rules_request
      url: "{protocol:s}://{host:s}:{port:d}/rules"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        rule_ids: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show a rule with two existent ids
    request:
      <<: *id_rules_request
      params:
        rule_ids: 200,201
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
            - <<: *rules_response
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Try to show a rule with a existent id and no existent one
    request:
      <<: *id_rules_request
      params:
        rule_ids: 200,9
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
          failed_items:
            - error:
                code: 1208
                message: The specified rule does not exist
                remediation: !anystr
              id:
                - 9
          total_affected_items: 1
          total_failed_items: 1
        message: Some rules could not be shown

  - name: Try to show a rule with a existent id, limit = 0
    request:
      <<: *id_rules_request
      params:
        limit: 0
        rule_ids: 1
    response:
      status_code: 400
      body:
        <<: *error_response

  - name: Filter sort
    request:
      <<: *id_rules_request
      params:
        sort: -file
        rule_ids: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *rules_response
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Filter search error
    request:
      <<: *id_rules_request
      params:
        search: error
        rule_ids: 200
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Invalid filter
    request:
      <<: *id_rules_request
      params:
        noexist: True
        rule_ids: 201
    response:
      status_code: 400
      body:
        <<: *error_null

  - name: No rule
    request:
      url: "{protocol:s}://{host:s}:{port:d}/rules"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        rule_ids: 9999999999
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1208
                message: The specified rule does not exist
                remediation: !anystr
              id:
                - 9999999999
          total_affected_items: 0
          total_failed_items: 1
        message: No rule was shown
