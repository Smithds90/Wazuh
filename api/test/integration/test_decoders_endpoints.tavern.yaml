---
test_name: GET /decoders

includes:
  - !include common.yaml

stages:
    # Authentication stage
  - type: ref
    id: login_get_token

    # GET /decoders
  - name: Try to get all decoders
    request: &get_decoders
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/decoders"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        # We get totalItems number of arrays in items, using !anything to check items key is in the response
        data:
          items: !anything
          totalItems: !anyint

    # GET /decoders?limit=1
  - name: Try to get decoders using limit parameter
    request:
      <<: *get_decoders
      params:
        limit: 1
    response:
      status_code: 200
      body:
        data:
          items: &full_items_array
            - details: !anything
              file: !anystr
              name: !anystr
              path: !anystr
              position: !anyint
              status: !anystr
          totalItems: !anyint
      # Save some data for future use in the test
      save:
        body:
          returned_file: data.items.0.file
          returned_path: data.items.0.path
          returned_status: data.items.0.status

    # We implement a dual stage to check offset parameter behaviour
    # GET /decoders?limit=2&offset=0
  - name: Try to get decoders using limit and offset parameter
    request:
      <<: *get_decoders
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      body:
        data:
          items:
            - <<: *full_items_array
            - <<: *full_items_array
          totalItems: !anyint
      # Save second item to check offset in next stage
      save:
        body:
          offset_item: data.items.1

    # GET /decoders?limit=1&offset=1
  - name: Try to get decoders using limit and offset parameter
    request:
      <<: *get_decoders
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      body:
        data:
          items:
              # Check offset matches with previous request
            - details: !anything
              file: "{offset_item.file}"
              name: "{offset_item.name}"
              path: "{offset_item.path}"
              position: !int "{offset_item.position}"
              status: "{offset_item.status}"
          totalItems: !anyint

    # GET /decoders?limit=1&search=a
  - name: Try to get decoders using limit and search parameter
    request:
      <<: *get_decoders
      params:
        limit: 1
        search: a
    response:
      status_code: 200
      body:
        data:
          items:
            - <<: *full_items_array
          totalItems: !anyint

    # GET /decoders?limit=1&file={returned_file}
  - name: Try to get decoders using limit and file parameter
    request:
      <<: *get_decoders
      params:
        limit: 1
        file: "{returned_file:s}"
    response:
      status_code: 200
      body:
        data:
          items:
            - file: "{tavern.request_vars.params.file}"
          totalItems: !anyint

    # GET /decoders?limit=1&path={returned_path}
  - name: Try to get decoders using limit and path parameter
    request:
      <<: *get_decoders
      params:
        limit: 1
        path: "{returned_path:s}"
    response:
      path_code: 200
      body:
        data:
          items:
            - path: "{tavern.request_vars.params.path}"
          totalItems: !anyint

    # GET /decoders?limit=1&status={returned_status}
  - name: Try to get decoders using limit and status parameter
    request:
      <<: *get_decoders
      params:
        limit: 1
        status: "{returned_status:s}"
    response:
      status_code: 200
      body:
        data:
          items:
            - status: "{tavern.request_vars.params.status}"
          totalItems: !anyint
