---
test_name: GET /agents

marks:
  - usefixtures:
    - agents_black_rbac_tests

includes:
 - !include common.yaml

stages:

  # Authentication stage
  - type: ref
    id: login_get_token

  - name: Get all agents (Partially allowed, user agnostic)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: '001'
            - id: '003'
            - id: '005'
            - id: '007'
            - id: '009'
            - id: '011'
          failed_items: []
          total_affected_items: 6
          total_failed_items: 0

  - name: Get a list of agents (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '002,004'
    response:
      status_code: 400
      body: &permission_denied
        code: 4000
        detail: "Permission denied"

  - name: Get a list of agents (Partially allowed, user aware)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '001,003,004,005,006'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: '001'
            - id: '003'
            - id: '005'
          failed_items:
            - error:
                code: 4000
              id:
                - '004'
                - '006'
          total_affected_items: 3
          total_failed_items: 2
        message: !anystr

  - name: Get a list of agents (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '001,003,007,011'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: '001'
            - id: '003'
            - id: '007'
            - id: '011'
          total_affected_items: 4
          total_failed_items: 0
        message: !anystr

---
test_name: GET /agents/{agent_id}

stages:

  - name: Try to get agent 008 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/008"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Get agent 009 (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/009"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: '009'
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

---
test_name: GET /agents/{agent_id}/config/{component}/{configuration}

stages:

  - name: Try tp get Request-Agent-Client for agent 004 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/004/config/agent/client"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Get Request-Agent-Client for agent 003 (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/003/config/agent/client"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          client:
            auto_restart: !anystr
            config-profile: !anystr
            crypto_method: !anystr
            notify_time: !anyint
            remote_conf: !anystr
            server: !anything
            time-reconnect: !anyint

---
test_name: GET /agents/{agent_id}/group/is_sync

stages:

  - name: Try to get sync of agent 008 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/008/group/is_sync"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Get agent sync (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/007/group/is_sync"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: '007'
              synced: !anybool
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /agents/{agent_id}/key

stages:

 - name: Try get key agent 006 (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/006/key"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 400
     body:
       <<: *permission_denied

 - name: Get agent key for 005 (Allowed)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/005/key"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - id: '005'
         failed_items: []
         total_affected_items: 1
         total_failed_items: 0

---
test_name: GET /agents/groups

stages:

 - name: Get all groups (Partially allowed, user agnostic)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - name: 'group2'
           - name: 'group3'
         failed_items: []
         total_affected_items: 2
         total_failed_items: 0

 - name: Try to read group1 (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
     params:
       list_groups: 'group1'
   response:
     status_code: 400
     body:
       <<: *permission_denied

 - name: Get a list of groups (Partially allowed, user aware)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
     params:
       list_groups: 'default,group2,group3'
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - name: 'group2'
           - name: 'group3'
         failed_items:
           - error:
               code: 4000
             id:
               - 'default'
         total_affected_items: 2
         total_failed_items: 1

 - name: Get a list of groups (Allowed)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
     params:
       list_groups: 'group2,group3'
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - name: 'group2'
           - name: 'group3'
         failed_items: []
         total_affected_items: 2
         total_failed_items: 0

---
test_name: GET /agents/groups/{group_id}

stages:

 - name: Try get all agents in one group (Partially allowed, user agnostic)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group3"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - id: '003'
           - id: '007'
         failed_items: []
         total_affected_items: 2
         total_failed_items: 0

---
test_name: GET /agents/groups/{group_id}/configuration

stages:

 - name: Try to get the configuration of a group (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/default/configuration"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 400
     body:
       <<: *permission_denied

 - name: Try get the configuration of a group (Allowed)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group2/configuration"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         items:
           - config: !anything
             filters: !anything
         totalItems: !anyint

---
test_name: GET /agents/groups/{group_id}/files

stages:

 - name: Try get the files of a group (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group1/files"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 400
     body:
       <<: *permission_denied

 - name: Try get the files of a group (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group3/files"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
     params:
       limit: 2
       offset: 0
   response:
     status_code: 200
     body:
       data:
         items:
           - filename: agent.conf
             hash: !anystr
           - filename: ar.conf
             hash: !anystr
         totalItems: !anyint

---
test_name: GET /agents/groups/{group_id}/files/{filename}/json

stages:

 - name: Try get one file of a group (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/default/files/agent.conf/json"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 400
     body:
       <<: *permission_denied

 - name: Try get one file of a group (Allowed)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group2/files/agent.conf/json"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data: !anything

---
test_name: GET /agents/groups/{group_id}/files/{filename}/xml

stages:

 - name: Try get one file of a group (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group1/files/agent.conf/xml"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 400
     body:
       <<: *permission_denied

 - name: Try get one file of a group (Allowed)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group3/files/agent.conf/xml"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     headers:
       content-type: application/xml

---
test_name: GET /agents/name/{agent_name}

stages:

 - name: Basic response agents name (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/name/wazuh-agent2"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 400
     body:
       <<: *permission_denied

 - name: Basic response agents name (Allowed)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/name/wazuh-agent1"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - id: '001'
             name: 'wazuh-agent1'
         failed_items: []
         total_affected_items: 1
         total_failed_items: 0

---
test_name: GET /agents/no_group

stages:

 - name: Get the agents without group (Partially allowed, user agnostic)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/no_group"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - id: '011'
         failed_items: []
         total_affected_items: 1
         total_failed_items: 0

---
test_name: GET /agents/outdated

stages:

 - name: Get the outdated agents (Partially allowed, user agnostic)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/outdated"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
     params:
       limit: 1
       sort: -id
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - id: '009'
         failed_items: []
         total_affected_items: !anyint
         total_failed_items: 0

---
test_name: GET /agents/stats/distinct

stages:

 - name: Get the different combinations for os.platform (Partially allowed, user agnostic)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/stats/distinct"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
     params:
       limit: 2
       fields: os.platform
   response:
     status_code: 200
     body:
       data:
         affected_items:
           - count: 5
             os:
               platform: !anystr
           - count: !anyint
         failed_items: []
         total_affected_items: !anyint
         total_failed_items: 0

---
test_name: GET /agents/summary/status

stages:

 - name: Get the agents status summary (Partially allowed, user agnostic)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/summary/status"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         active: 4
         disconnected: 1
         never_connected: 1
         pending: 0
         total: 6

---
test_name: GET /agents/summary/os

stages:

 - name: Get the summary/os of all agents (Partially allowed, user agnostic)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/summary/os"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 200
     body:
       data:
         items:
           - 'ubuntu'
         totalItems: 1

---
test_name: GET /agents/{agent_id}/upgrade_result

stages:

 - name: Try get upgrade result agent 002 (Denied)
   request:
     url: "{protocol:s}://{host:s}:{port:d}/agents/002/upgrade_result?wait_for_complete=true"
     method: GET
     headers:
       Authorization: "Bearer {test_login_token}"
   response:
     status_code: 400
     body:
       <<: *permission_denied

---
test_name: DELETE /agents/{agent_id}/group/{group_id}

stages:

  - name: Try to remove agent 004 from group2 (Denied group)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/004/group/group2"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to remove agent 001 from group1 (Denied agent)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/group1"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to remove agent 004 from group1 (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/004/group/group1"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        code: 1734

  - name: Remove agent 005 from group1 (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/005/group/group1"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        message: "Agent '005' removed from 'group1'."
    delay_after: 1

---
test_name: DELETE /agents/{agent_id}/group

stages:

  - name: Try to remove agent 008 from all groups (Denied agent)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/008/group"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to remove agent 009 from group2 (Denied group)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/009/group"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_groups: 'group2'
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Remove agent 009 from all groups Partially allowed, user agnostic)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/009/group"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - 'group1'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr
    delay_after: 1

  - name: Try to remove agent 005 from a list of groups (Partially allowed, user aware)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/005/group"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_groups: 'default,group1,group3'
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1734
              id:
                - 'group1'
            - error:
                code: 4000
              id:
                - 'default'
                - 'group3'
          total_affected_items: 0
          total_failed_items: 3
        message: !anystr
    delay_after: 1

---
test_name: DELETE /agents/group/{group_id}

stages:

  - name: Try to remove all agents from group2 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group2"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Remove all agents from group1 (Partially allowed, user agnostic)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group1"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
        message: !anystr
    delay_after: 1

  - name: Remove a list of agents from group1 (Partially allowed, user aware)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group1"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '004,007,008,998,999'
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1734
              id:
                - '004'
            - error:
                code: 4000
              id:
                - '007'
                - '008'
                - '998'
                - '999'
          total_affected_items: 0
          total_failed_items: 5
        message: !anystr
    delay_after: 1

---
test_name: DELETE /agents/groups/{group_id}

stages:

  - name: Try to delete group1 (Group denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group1"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to delete group2 (Group modification denied, indirectly denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group2"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_agents: []
          affected_items: []
          failed_items:
            - error:
                code: 4015
              id:
                - 'group2'
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

# THIS FAILS BECAUSE BLACK MODE DOES NOT LET A NON EXISTING GROUP THAT IS NOT DENIED TO GO THROUGH
#  - name: Try to delete group antonio (Allowed)
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/antonio"
#      method: DELETE
#      headers:
#        Authorization: "Bearer {test_login_token}"
#    response:
#      status_code: 200
#      body:
#        data:
#          affected_agents: []
#          affected_items: []
#          failed_items:
#            - error:
#                code: 1710
#              id:
#                - 'antonio'
#          total_affected_items: 0
#          total_failed_items: 1
#        message: !anystr

---
test_name: DELETE /agents/groups

marks:
  - xfail

stages:

  - name: Try to delete all groups (Partially allowed, indirectly denied to delete group2, user agnostic)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_agents: []
          affected_items: []
          failed_items:
            - error:
                code: 4015
              id:
                - 'group2'
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr
    delay_after: 1

# THIS FAILS BECAUSE BLACK MODE DOES NOT LET A NON EXISTING GROUP THAT IS NOT DENIED TO GO THROUGH
  - name: Try to delete a list of groups (Partially allowed, indirectly denied to delete group2, user aware)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_groups: 'default,group1,group2,group3,pepito,antonio'
    response:
      status_code: 200
      body:
        data:
          affected_agents: []
          affected_items: []
          failed_items:
            - error:
                code: 1710
              id:
                - antonio
            - error:
                code: 4000
              id:
                - default
                - group1
                - group3
                - pepito
            - error:
                code: 4015
              id:
                - group2
          total_affected_items: 0
          total_failed_items: 6
        message: !anystr

---
test_name: DELETE /agents/{agent_id}

stages:

  - name: Try to delete agent 003 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/003"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Delete agent 002 (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/002"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '002'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr
    delay_after: 1

---
test_name: DELETE /agents

stages:

  - name: Try to delete a list of agents (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '003,009'
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to delete a list of agents (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '004,006'
        older_than: '0s'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '004'
            - '006'
          failed_items: []
          older_than: 0s
          total_affected_items: 2
          total_failed_items: 0
        message: !anystr
    delay_after: 1

  - name: Try to delete a list of agents (Partially allowed, user aware)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '000,007,008,999'
        older_than: '0s'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '008'
          failed_items:
            - error:
                code: 1703
              id:
                - '000'
            - error:
                code: 4000
              id:
                - '007'
                - '999'
          older_than: 0s
          total_affected_items: 1
          total_failed_items: 3
        message: !anystr
    delay_after: 1

  - name: Try to delete all agents (Partially allowed, user agnostic)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        older_than: '0s'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '010'
            - '012'
          older_than: 0s
          total_affected_items: 2
          total_failed_items: 0
        message: !anystr
    delay_after: 1

---
test_name: POST /agents

stages:

  - name: Try to create a new agent (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        name: "NewAgentPost"
        ip: "any"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: POST /agents/insert

stages:

  - name: Try to create a new agent specifying id, ip, key and name (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/insert"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        name: "NewAgentPostInsert"
        ip: "any"
        id: "750"
        key: "1abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi64"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: POST /agents/{agent_name}

stages:

  - name: Try to create new agent specifying its name (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/test_agent"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: POST /agents/groups/{group_id}

stages:

  - name: Try to create a group called group4 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group4"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: PUT /agents/group/{group_id}

stages:

  - name: Try to assign all agents to group2 (Group denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group2"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to assign a list of agents to group1 (Agents denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '003,008,011'
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to assign a list of agents to group1 (Partially allowed, user aware)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: '001,002,005'
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '005'
          failed_items:
            - error:
                code: 4000
              id:
                - '001'
                - '002'
          total_affected_items: 1
          total_failed_items: 2
        message: !anystr

  - name: Try to assign all agents to group1 (Partially allowed, user agnostic)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '009'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

---
test_name: PUT /agents/groups/{group_id}/configuration

stages:

  - name: Update group1 configuration (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group1/configuration"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: "application/xml"
      data:
        "{file_xml:s}"
    response:
      status_code: 200
      body:
        message: !anystr

  - name: Try to update group3 configuration (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group3/configuration"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: "application/xml"
      data:
        "{file_xml:s}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: PUT /agents/restart

marks:
  - xfail

stages:

  - name: Try to restart agent 001 (Denied)default,group1,group3,pepito
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: "001"
    response:
      status_code: 400
      body:
        <<: *permission_denied

# THIS FAILS BECAUSE ONE OF THE DISTRIBUTED RESPONSES IS A 4000 EXCEPTION AND IT KILLS THE WAZUH RESULTS
  - name: Try to restart a list of agents (Partially allowed, user aware)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: "000,001,002,005"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '005'
          failed_items:
            - error:
                code: 4000
              id:
                - '000'
                - '001'
                - '002'
          total_affected_items: 1
          total_failed_items: 3
        message: !anystr
    delay_after: 45

# THIS FAILS BECAUSE ONE OF THE DISTRIBUTED RESPONSES IS A 4000 EXCEPTION AND IT KILLS THE WAZUH RESULTS
  - name: Try to restart all agents (Partially allowed, user agnostic)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '005'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr
    delay_after: 45

---
test_name: PUT /agents/{agent_id}/group/{group_id}

stages:

  - name: Try to assign agent 003 to group1 (Agent denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/003/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to assign agent 009 to group3 (Group denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/009/group/group3"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Try to assign agent 005 to group1 (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/005/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1751
              id:
                - '005'
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

---
test_name: PUT /agents/{agent_id}/restart

stages:

  - name: Try to restart agent 008 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/008/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

  - name: Restart agent 005 (Allowed)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/005/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - '005'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr
    delay_after: 45

---
test_name: PUT /agents/{agent_id}/upgrade

stages:

  - name: Try to upgrade agent 004 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/004/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied

---
test_name: PUT /agents/{agent_id}/upgrade_custom

stages:

  - name: Try to customly upgrade agent 004 (Denied)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/004/upgrade_custom?installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *permission_denied
