---
test_name: Set up environment and get authentication token

includes:
  - !include common.yaml

marks:
    - usefixtures:
      - experimental_test

stages:
    # Authentication stage
  - type: ref
    id: login_get_token

---
test_name: DELETE /experimental/syscheck

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscheck"
      method: DELETE
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr

#---
#test_name: GET /experimental/ciscat/results
#
#stages:
#
#  - name: Request
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          totalItems: !anyint
#          items: !anything
#      # Save some data for future use in the test
#      save:
#        body:
#          benchmark: data.items.0.benchmark
#          profile: data.items.0.profile
#          pass: data.items.0.pass
#          fail: data.items.0.fail
#          error: data.items.0.error
#          notchecked: data.items.0.notchecked
#          unknown: data.items.0.unknown
#          score: data.items.0.score
#
#  - name: Filters -> benchmark={benchmark},select=benchmark,limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        benchmark: "{benchmark}"
#        select: benchmark
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - agent_id: !anystr
#              benchmark: "{benchmark}"
#
#  - name: Filters -> search={pass},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        search: "{pass}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - pass: !int "{pass}"
#
#  - name: Filters -> search={unknown},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        search: "{unknown}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - unknown: !int "{unknown}"
#
#  - name: Filters -> benchmark={benchmark},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        benchmark: "{benchmark}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - benchmark: "{benchmark}"
#
#  - name: Filters -> profile={profile},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        profile: "{profile}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - profile: "{profile}"
#
#  - name: Filters -> pass={pass},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        pass: "{pass}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - pass: !int "{pass}"
#
#  - name: Filters -> fail={fail},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        fail: "{fail}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - fail: !int "{fail}"
#
#  - name: Filters -> error={error},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        error: "{error}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - error: !int "{error}"
#
#  - name: Filters -> notchecked={notchecked},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        notchecked: "{notchecked}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - notchecked: !int "{notchecked}"
#
#  - name: Filters -> unknown={unknown},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        unknown: "{unknown}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - unknown: !int "{unknown}"
#
#  - name: Filters -> score={score},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/ciscat/results"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        score: "{score}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - score: !int "{score}"

---
test_name: GET /experimental/syscollector/hardware

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - cpu:
                cores: !anyint
                mhz: !anything  # this value may be integer or float
                name: !anystr
              ram:
                free: !anyint
                total: !anyint
                usage: !anyint
              scan:
                id: !anyint
                time: !anystr
              board_serial: !anystr
              agent_id: !anystr
      # Save some data for future use in the test
      save:
        body:
          ram_free: data.items.0.ram.free
          ram_total: data.items.0.ram.total
          cpu_cores: data.items.0.cpu.cores
          cpu_mhz: data.items.0.cpu.mhz
          cpu_name: data.items.0.cpu.name
          board_serial: data.items.0.board_serial

  - name: Filters -> ram_free={ram_free},select=ram_free,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        ram_free: "{ram_free}"
        select: ram_free

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              ram_free: !int "{ram_free}"

  - name: Filters -> search={ram_free},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{ram_free}"

    response:
      status_code: 200
      body:
        data:
          items:
            - ram:
                free: !int "{ram_free}"

  - name: Filters -> search={board_serial},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{board_serial}"

    response:
      status_code: 200
      body:
        data:
          items:
            - board_serial: "{board_serial}"

  - name: Filters -> ram_free={ram_free},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        ram_free: "{ram_free}"

    response:
      status_code: 200
      body:
        data:
          items:
            - ram:
                free: !int "{ram_free}"

  - name: Filters -> ram_total={ram_total},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        ram_total: "{ram_total}"

    response:
      status_code: 200
      body:
        data:
          items:
            - ram:
                total: !int "{ram_total}"

  - name: Filters -> cpu_cores={cpu_cores},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        cpu_cores: "{cpu_cores}"

    response:
      status_code: 200
      body:
        data:
          items:
            - cpu:
                cores: !int "{cpu_cores}"

  - name: Filters -> cpu_mhz={cpu_mhz},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        cpu_mhz: "{cpu_mhz}"

    response:
      status_code: 200
      body:
        data:
          items:
            - cpu:
                mhz: !float "{cpu_mhz}"

  - name: Filters -> cpu_name={cpu_name},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        cpu_name: "{cpu_name}"

    response:
      status_code: 200
      body:
        data:
          items:
            - cpu:
                name: "{cpu_name}"

  - name: Filters -> board_serial={board_serial},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/hardware"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        board_serial: "{board_serial}"

    response:
      status_code: 200
      body:
        data:
          items:
            - board_serial: "{board_serial}"

---
test_name: GET /experimental/syscollector/netaddr

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - proto: !anystr
              iface: !anystr
              scan_id: !anyint
              broadcast: !anystr
              address: !anystr
              netmask: !anystr
              agent_id: !anystr
      # Save some data for future use in the test
      save:
        body:
          proto: data.items.0.proto
          address: data.items.0.address
          broadcast: data.items.0.broadcast
          netmask: data.items.0.netmask

  - name: Filters -> proto={proto},select=proto,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        proto: "{proto}"
        select: proto

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              proto: "{proto}"

  - name: Filters -> search={proto},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{proto}"

    response:
      status_code: 200
      body:
        data:
          items:
            - proto: "{proto}"

  - name: Filters -> search={address},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{address}"

    response:
      status_code: 200
      body:
        data:
          items:
            - address: "{address}"

  - name: Filters -> proto={proto},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        proto: "{proto}"

    response:
      status_code: 200
      body:
        data:
          items:
            - proto: "{proto}"

  - name: Filters -> address={address},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        address: "{address}"

    response:
      status_code: 200
      body:
        data:
          items:
            - address: "{address}"

  - name: Filters -> broadcast={broadcast},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        broadcast: "{broadcast}"

    response:
      status_code: 200
      body:
        data:
          items:
            - broadcast: "{broadcast}"

  - name: Filters -> netmask={netmask},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netaddr"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        netmask: "{netmask}"

    response:
      status_code: 200
      body:
        data:
          items:
            - netmask: "{netmask}"

---
test_name: GET /experimental/syscollector/netiface

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - rx:
                bytes: !anyint
                dropped: !anyint
                errors: !anyint
                packets: !anyint
              scan:
                id: !anyint
                time: !anystr
              tx:
                bytes: !anyint
                dropped: !anyint
                errors: !anyint
                packets: !anyint
              mac: !anystr
              name: !anystr
              type: !anystr
              mtu: !anyint
              state: !anystr
              agent_id: !anystr
      # Save some data for future use in the test
      save:
        body:
          name: data.items.0.name
          #adapter: data.items.0.adapter
          type: data.items.0.type
          state: data.items.0.state
          mtu: data.items.0.mtu
          tx_packets: data.items.0.tx.packets
          rx_packets: data.items.0.rx.packets
          tx_bytes: data.items.0.tx.bytes
          rx_bytes: data.items.0.rx.bytes
          tx_errors: data.items.0.tx.errors
          rx_errors: data.items.0.rx.errors
          tx_dropped: data.items.0.tx.dropped
          rx_dropped: data.items.0.rx.dropped

  - name: Filters -> name={name},select=name,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        name: "{name}"
        select: name

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              name: "{name}"

  - name: Filters -> search={state},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{state}"

    response:
      status_code: 200
      body:
        data:
          items:
            - state: "{state}"

  - name: Filters -> search={type},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{type}"

    response:
      status_code: 200
      body:
        data:
          items:
            - type: "{type}"

  - name: Filters -> name={name},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        name: "{name}"

    response:
      status_code: 200
      body:
        data:
          items:
            - name: "{name}"

#  - name: Filters -> adapter={adapter},limit=1
#
#    request:
#      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
#      method: GET
#      headers:
#        Authorization: "Bearer {test_login_token}"
#      params:
#        limit: 1
#        adapter: "{adapter}"
#
#    response:
#      status_code: 200
#      body:
#        data:
#          items:
#            - adapter: "{adapter}"

  - name: Filters -> state={state},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        state: "{state}"

    response:
      status_code: 200
      body:
        data:
          items:
            - state: "{state}"

  - name: Filters -> mtu={mtu},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        mtu: "{mtu}"

    response:
      status_code: 200
      body:
        data:
          items:
            - mtu: !int "{mtu}"
          
  - name: Filters -> tx_packets={tx_packets},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        tx_packets: "{tx_packets}"

    response:
      status_code: 200
      body:
        data:
          items:
            - tx:
                packets: !int "{tx_packets}"

  - name: Filters -> rx_packets={rx_packets},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        rx_packets: "{rx_packets}"

    response:
      status_code: 200
      body:
        data:
          items:
            - rx:
                packets: !int "{rx_packets}"

  - name: Filters -> tx_bytes={tx_bytes},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        tx_bytes: "{tx_bytes}"

    response:
      status_code: 200
      body:
        data:
          items:
            - tx:
                bytes: !int "{tx_bytes}"

  - name: Filters -> rx_bytes={rx_bytes},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        rx_bytes: "{rx_bytes}"

    response:
      status_code: 200
      body:
        data:
          items:
            - rx:
                bytes: !int "{rx_bytes}"

  - name: Filters -> tx_errors={tx_errors},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        tx_errors: "{tx_errors}"

    response:
      status_code: 200
      body:
        data:
          items:
            - tx:
                errors: !int "{tx_errors}"

  - name: Filters -> rx_errors={rx_errors},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        rx_errors: "{rx_errors}"

    response:
      status_code: 200
      body:
        data:
          items:
            - rx:
                errors: !int "{rx_errors}"

  - name: Filters -> tx_dropped={tx_dropped},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        tx_dropped: "{tx_dropped}"

    response:
      status_code: 200
      body:
        data:
          items:
            - tx:
                dropped: !int "{tx_dropped}"

  - name: Filters -> rx_errors={rx_errors},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netiface"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        rx_dropped: "{rx_dropped}"

    response:
      status_code: 200
      body:
        data:
          items:
            - rx:
                dropped: !int "{rx_dropped}"  

---
test_name: GET /experimental/syscollector/netproto

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netproto"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netproto"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - iface:
              scan_id: !anyint
              type: !anystr
              dhcp: !anystr
              agent_id: !anystr
      # Save some data for future use in the test
      save:
        body:
          iface: data.items.0.iface
          type: data.items.0.type
          gateway: data.items.0.gateway
          dhcp: data.items.0.dhcp
  
  - name: Filters -> iface={iface},select=iface,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netproto"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        iface: "{iface}"
        select: iface

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              iface: "{iface}"

  - name: Filters -> search={iface},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netproto"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{iface}"

    response:
      status_code: 200
      body:
        data:
          items:
            - iface: "{iface}"

  - name: Filters -> search={type},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netproto"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{type}"

    response:
      status_code: 200
      body:
        data:
          items:
            - type: "{type}"

  - name: Filters -> iface={iface},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netproto"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        iface: "{iface}"

    response:
      status_code: 200
      body:
        data:
          items:
            - iface: "{iface}"

  - name: Filters -> type={type},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/netproto"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        type: "{type}"

    response:
      status_code: 200
      body:
        data:
          items:
            - type: "{type}"

---
test_name: GET /experimental/syscollector/os

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - os:
                major: !anystr
                minor: !anystr
                name: !anystr
                platform: !anystr
                version: !anystr
              scan:
                id: !anyint
                time: !anystr
              release: !anystr
              architecture: !anystr
              version: !anystr
              sysname: !anystr
              hostname: !anystr
              agent_id: !anystr
      # Save some data for future use in the test
      save:
        body:
          os_name: data.items.0.os.name
          architecture: data.items.0.architecture
          os_version: data.items.0.os.version
          version: data.items.0.version
          release: data.items.0.release

  - name: Filters -> os_name={os_name},select=os_name,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        os_name: "{os_name}"
        select: os_name

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              os_name: "{os_name}"

  - name: Filters -> search={architecture},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{architecture}"

    response:
      status_code: 200
      body:
        data:
          items:
            - architecture: "{architecture}"

  - name: Filters -> search={release},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{release}"

    response:
      status_code: 200
      body:
        data:
          items:
            - release: "{release}"

  - name: Filters -> os_name={os_name},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        os_name: "{os_name}"

    response:
      status_code: 200
      body:
        data:
          items:
            - os:
                name: "{os_name}"

  - name: Filters -> architecture={architecture},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        architecture: "{architecture}"

    response:
      status_code: 200
      body:
        data:
          items:
            - architecture: "{architecture}"

  - name: Filters -> os_version={os_version},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        os_version: "{os_version}"

    response:
      status_code: 200
      body:
        data:
          items:
            - os:
                version: "{os_version}"

  - name: Filters -> version={version},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        version: "{version}"

    response:
      status_code: 200
      body:
        data:
          items:
            - version: "{version}"

  - name: Filters -> release={release},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        release: "{release}"

    response:
      status_code: 200
      body:
        data:
          items:
            - release: "{release}"

---
test_name: GET /experimental/syscollector/packages

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - scan:
                id: !anyint
                time: !anystr
              name: !anystr
              section: !anystr
              size: !anyint
              description: !anystr
              architecture: !anystr
              vendor: !anystr
              version: !anystr
              format: !anystr
              agent_id: !anystr
      # Save some data for future use in the test
      save:
        body:
          vendor: data.items.0.vendor
          name: data.items.0.name
          architecture: data.items.0.architecture
          format: data.items.0.format
          version: data.items.0.version

  - name: Filters -> vendor={vendor},select=vendor,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        vendor: "{vendor}"
        select: vendor

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              vendor: "{vendor}"

  - name: Filters -> search={architecture},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{architecture}"

    response:
      status_code: 200
      body:
        data:
          items:
            - architecture: "{architecture}"

  - name: Filters -> search={format},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{format}"

    response:
      status_code: 200
      body:
        data:
          items:
            - format: "{format}"

  - name: Filters -> vendor={vendor},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        vendor: "{vendor}"

    response:
      status_code: 200
      body:
        data:
          items:
            - vendor: "{vendor}"

  - name: Filters -> name={name},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        name: "{name}"

    response:
      status_code: 200
      body:
        data:
          items:
            - name: "{name}"

  - name: Filters -> architecture={architecture},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        architecture: "{architecture}"

    response:
      status_code: 200
      body:
        data:
          items:
            - architecture: "{architecture}"

  - name: Filters -> format={format},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        format: "{format}"

    response:
      status_code: 200
      body:
        data:
          items:
            - format: "{format}"

  - name: Filters -> version={version},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/packages"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        version: "{version}"

    response:
      status_code: 200
      body:
        data:
          items:
            - version: "{version}"

---
test_name: GET /experimental/syscollector/ports

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - local:
                ip: !anystr
                port: !anyint
              remote:
                ip: !anystr
                port: !anyint
              scan:
                id: !anyint
                time: !anystr
              state: !anystr
              protocol: !anystr
              rx_queue: !anyint
              tx_queue: !anyint
              inode: !anyint
      # Save some data for future use in the test
      save:
        body:
          #pid: data.items.0.pid
          protocol_ports: data.items.0.protocol
          local_ip: data.items.0.local.ip
          local_port: data.items.0.local.port
          remote_ip: data.items.0.remote.ip
          tx_queue: data.items.0.tx_queue
          state: data.items.0.state
          #process: data.items.0.process

  - name: Filters -> protocol={protocol_ports},select=protocol,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        protocol: "{protocol_ports}"
        select: protocol

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              protocol: "{protocol_ports}"

  - name: Filters -> search={state},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{state}"

    response:
      status_code: 200
      body:
        data:
          items:
            - state: "{state}"

  - name: Filters -> search={tx_queue},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{tx_queue}"

    response:
      status_code: 200
      body:
        data:
          items:
            - tx_queue: !int "{tx_queue}"

  - name: Filters -> protocol={protocol_ports},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        protocol: "{protocol_ports}"

    response:
      status_code: 200
      body:
        data:
          items:
            - protocol: "{protocol_ports}"

  - name: Filters -> local_ip={local_ip},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        local_ip: "{local_ip}"

    response:
      status_code: 200
      body:
        data:
          items:
            - local:
                ip: "{local_ip}"

  - name: Filters -> local_port={local_port},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        local_port: "{local_port}"

    response:
      status_code: 200
      body:
        data:
          items:
            - local:
                port: !int "{local_port}"

  - name: Filters -> remote_ip={remote_ip},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        remote_ip: "{remote_ip}"

    response:
      status_code: 200
      body:
        data:
          items:
            - remote:
                ip: "{remote_ip}"

  - name: Filters -> tx_queue={tx_queue},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        tx_queue: "{tx_queue}"

    response:
      status_code: 200
      body:
        data:
          items:
            - tx_queue: !int "{tx_queue}"

  - name: Filters -> state={state},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/ports"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        state: "{state}"

    response:
      status_code: 200
      body:
        data:
          items:
            - state: "{state}"

---
test_name: GET /experimental/syscollector/processes

stages:

  - name: Request

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items: !anything

  - name: Filters -> limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1

    response:
      status_code: 200
      body:
        data:
          totalItems: !anyint
          items:
            - scan:
                id: !anyint
                time: !anystr
              fgroup: !anystr
              state: !anystr
              priority: !anyint
              suser: !anystr
              ppid: !anyint
              vm_size: !anyint
              session: !anyint
              pid: !anystr
              nlwp: !anyint
              name: !anystr
              euser: !anystr
              sgroup: !anystr
              size: !anyint
              stime: !anyint
              nice: !anyint
              share: !anyint
              processor: !anyint
              ruser: !anystr
              egroup: !anystr
              rgroup: !anystr
              pgrp: !anyint
              resident: !anyint
              utime: !anyint
              tgid: !anyint
              start_time: !anyint
              tty: !anyint
              agent_id: !anystr
      # Save some data for future use in the test
      save:
        body:
          pid: data.items.0.pid
          state: data.items.0.state
          ppid: data.items.0.ppid
          egroup: data.items.0.egroup
          euser: data.items.0.euser
          fgroup: data.items.0.fgroup
          name: data.items.0.name
          nlwp: data.items.0.nlwp
          pgrp: data.items.0.pgrp
          priority: data.items.0.priority
          rgroup: data.items.0.rgroup
          ruser: data.items.0.ruser
          sgroup: data.items.0.sgroup
          suser: data.items.0.suser

  - name: Filters -> pid={pid},select=pid,limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        pid: "{pid}"
        select: pid

    response:
      status_code: 200
      body:
        data:
          items:
            - agent_id: !anystr
              pid: "{pid}"

  - name: Filters -> search={state},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{state}"

    response:
      status_code: 200
      body:
        data:
          items:
            - state: "{state}"

  - name: Filters -> search={pgrp},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        search: "{pgrp}"

    response:
      status_code: 200
      body:
        data:
          items:
            - pgrp: !int "{pgrp}"

  - name: Filters -> pid={pid},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        pid: "{pid}"

    response:
      status_code: 200
      body:
        data:
          items:
            - pid: "{pid}"

  - name: Filters -> state={state},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        state: "{state}"

    response:
      status_code: 200
      body:
        data:
          items:
            - state: "{state}"

  - name: Filters -> ppid={ppid},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        ppid: "{ppid}"

    response:
      status_code: 200
      body:
        data:
          items:
            - ppid: !int "{ppid}"

  - name: Filters -> egroup={egroup},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        egroup: "{egroup}"

    response:
      status_code: 200
      body:
        data:
          items:
            - egroup: "{egroup}"

  - name: Filters -> euser={euser},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        euser: "{euser}"

    response:
      status_code: 200
      body:
        data:
          items:
            - euser: "{euser}"

  - name: Filters -> fgroup={fgroup},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        fgroup: "{fgroup}"

    response:
      status_code: 200
      body:
        data:
          items:
            - fgroup: "{fgroup}"

  - name: Filters -> name={name},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        name: "{name}"

    response:
      status_code: 200
      body:
        data:
          items:
            - name: "{name}"

  - name: Filters -> nlwp={nlwp},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        nlwp: "{nlwp}"

    response:
      status_code: 200
      body:
        data:
          items:
            - nlwp: !int "{nlwp}"

  - name: Filters -> pgrp={pgrp},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        pgrp: "{pgrp}"

    response:
      status_code: 200
      body:
        data:
          items:
            - pgrp: !int "{pgrp}"

  - name: Filters -> priority={priority},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        priority: "{priority}"

    response:
      status_code: 200
      body:
        data:
          items:
            - priority: !int "{priority}"

  - name: Filters -> rgroup={rgroup},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        rgroup: "{rgroup}"

    response:
      status_code: 200
      body:
        data:
          items:
            - rgroup: "{rgroup}"

  - name: Filters -> ruser={ruser},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        ruser: "{ruser}"

    response:
      status_code: 200
      body:
        data:
          items:
            - ruser: "{ruser}"

  - name: Filters -> sgroup={sgroup},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        sgroup: "{sgroup}"

    response:
      status_code: 200
      body:
        data:
          items:
            - sgroup: "{sgroup}"

  - name: Filters -> suser={suser},limit=1

    request:
      url: "{protocol:s}://{host:s}:{port:d}/experimental/syscollector/processes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
        suser: "{suser}"

    response:
      status_code: 200
      body:
        data:
          items:
            - suser: "{suser}"
