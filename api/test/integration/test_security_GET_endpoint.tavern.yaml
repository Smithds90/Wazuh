---
test_name: GET /security/roles

includes:
  - !include common.yaml

marks:
  - usefixtures:
    - security_tests

stages:

  # Authentication stage
  - type: ref
    id: login_get_token

  # GET /security/roles
  - name: Try to show the roles of the system
    request: &all_roles_request
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items: &roles
            - id: !anyint
              name: !anystr
              policies: !anything
              rule: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified roles were shown

  # GET /security/roles
  - name: Try to show the roles of the system, offset = 0
    request:
      <<: *all_roles_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
          total_affected_items: 2
      save:
        body:
          second_role_id: data.affected_items.1.id
          second_role_name: data.affected_items.1.name

  # GET /security/roles
  - name: Try to show the roles of the system, offset = 1
    request:
      <<: *all_roles_request
      params:
        limit: 2
        offset: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
          - id: !int "{second_role_id}"
            name: "{second_role_name}"
          - <<: *roles
          total_affected_items: 2

  # GET /security/roles
  - name: Try to show the roles of the system, without limit
    request:
      <<: *all_roles_request
    response:
      status_code: 200
      body:
        data:
          affected_items:
          - <<: *roles

  # GET /security/roles
  - name: Try to get all roles with limit = 0
    request:
      <<: *all_roles_request
      params:
        limit: 0
    response:
      status_code: 400
      body: &error_response
        detail: !anystr
        status: 400
        title: !anystr
        type: "about:blank"

  # GET /security/roles
  - name: Sort the roles
    request:
      <<: *all_roles_request
      params:
        sort: name
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
          total_affected_items: !anyint
      save:
        body:
          second_role_id: data.affected_items.1.id
          second_role_name: data.affected_items.1.name

  # GET /security/roles
  - name: Sort the roles, limit=2, offset=1
    request:
      <<: *all_roles_request
      params:
        sort: name
        limit: 2
        offset: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
          - id: !int "{second_role_id}"
            name: "{second_role_name}"
          - <<: *roles
          total_affected_items: !anyint

  # GET /security/roles
  - name: Sort without limit
    request:
      <<: *all_roles_request
      params:
        sort: -name
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  # GET /security/roles
  - name: Search in roles
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        search: wazuh
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *roles
          total_affected_items: !anyint

  # GET /security/roles
  - name: Search without limit
    request:
      <<: *all_roles_request
      params:
        search: wazuh
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
          total_affected_items: !anyint

  # GET /security/roles
  - name: Sort without limit, non existent sort parameter
    request:
      <<: *all_roles_request
      params:
        sort: +noexist
    response:
      status_code: 400
      body:
        <<: *error_response

  # GET /security/roles
  - name: Search without limit, non existent role
    request:
      <<: *all_roles_request
      params:
        search: noexist
    response:
      status_code: 200
      body:
        data:
          total_affected_items: 0

  # GET /security/roles
  - name: Invalid parameter
    request:
      <<: *all_roles_request
      params:
        noexist: nothing
    response:
      status_code: 400
      body: &error_null
        detail: "Extra query parameter(s) noexist not in spec"
        status: 400
        title: null
        type: "about:blank"

  # GET /security/roles
  - name: Invalid parameters - Extra fields
    request:
      <<: *all_roles_request
      params:
        search: wazuh
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

  # GET /security/roles
  - name: Try to show the roles of the system with a non-existent search
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        search: notexist
    response:
      status_code: 200
      body:
        data:
          total_affected_items: 0
---
test_name: GET /security/policies

stages:

  # GET /security/policies
  - name: Try to show the policies of the system
    request: &all_policies_request
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items: &policies
            - id: !anyint
              name: !anystr
              policy: !anything
          total_affected_items: !anyint

  # GET /security/policies
  - name: Try to show the policies of the system, offset = 0
    request:
      <<: *all_policies_request
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *policies
            - <<: *policies
          total_affected_items: !anyint
      save:
        body:
          second_policy_id: data.affected_items.1.id
          second_policy_name: data.affected_items.1.name

  # GET /security/policies
  - name: Try to show the policies of the system, offset = 1
    request:
      <<: *all_policies_request
      params:
        limit: 2
        offset: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
          - id: !int "{second_policy_id}"
            name: "{second_policy_name}"
          - <<: *policies
          total_affected_items: !anyint

  # GET /security/policies
  - name: Try to show the policies of the system, without limit
    request:
      <<: *all_policies_request
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  # GET /security/policies
  - name: Try to get all policies with limit = 0
    request:
      <<: *all_policies_request
      params:
        limit: 0
    response:
      status_code: 400
      body:
        <<: *error_response

  # GET /security/policies
  - name: Sort the policies
    request:
      <<: *all_policies_request
      params:
        sort: -name
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *policies
            - <<: *policies
          total_affected_items: !anyint

  # GET /security/policies
  - name: Sort without limit
    request:
      <<: *all_policies_request
      params:
        sort: -name
    response:
      status_code: 200
      body:
        data:
          total_affected_items: !anyint

  # GET /security/policies
  - name: Search in policies
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        search: wazuh
        limit: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *policies
          total_affected_items: !anyint
      save:
        body:
          policy_id: data.affected_items.0.id

  # GET /security/policies
  - name: Search without limit
    request:
      <<: *all_policies_request
      params:
        search: wazuh
    response:
      status_code: 200
      body:
        data:
          total_affected_items: 1

  # GET /security/policies
  - name: Search without limit, non existent policy
    request:
      <<: *all_policies_request
      params:
        search: noexist
    response:
      status_code: 200
      body:
        data:
          total_affected_items: 0

  # GET /security/policies
  - name: Invalid parameter
    request:
      <<: *all_policies_request
      params:
        noexist: nothing
    response:
      status_code: 400
      body:
        <<: *error_null

  # GET /security/policies
  - name: Invalid parameters - Extra fields
    request:
      <<: *all_policies_request
      params:
        search: wazuh
        noexist: True
    response:
      status_code: 400
      body:
        <<: *error_null

  # GET /security/policies
  - name: Try to show the policies of the system with a non-existent search
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        search: notexist
    response:
      status_code: 200
      body:
        data:
          total_affected_items: 0
---
test_name: GET /security/roles

stages:

  # GET /security/roles/{role_id}
  - name: Try to show a specified role in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        role_ids: 2,3,4
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *roles
            - <<: *roles
            - <<: *roles

  # GET /security/roles/{non-existent role_id}
  - name: Try to show a non-existent role in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        role_ids: 999
    response:
      status_code: 200
      body: &response_error
        data:
          affected_items: []
          failed_items:
            - error:
                code: !anyint
                message: !anystr
                remediation: !anystr
              id:
                - '999'
          total_affected_items: 0
          total_failed_items: 1
---
test_name: GET /security/policies/{policy_id}

stages:

  # GET /security/policies/{policy_id}
  - name: Try to show a specified policy in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 2,3,4
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *policies
            - <<: *policies
            - <<: *policies

  # GET /security/policies/{non-existent policy_id}
  - name: Try to show a non-existent policy in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 999
    response:
      status_code: 200
      body:
        <<: *response_error
