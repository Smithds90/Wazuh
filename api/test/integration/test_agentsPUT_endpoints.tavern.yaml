---
test_name: PUT /agents/group/{group_id}

marks:
  - usefixtures:
    - base_tests

includes:
 - !include common.yaml

stages:

    # Authentication stage
  - type: ref
    id: login_get_token

    # PUT /agents/group/wrong_group
  - name: Try to assign all agents to a non existing group
    request: &put_agents_group
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/wrong_group"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        code: 1710

    # PUT /agents/group/wrong_group?list_agents=wrong_agent
  - name: Try to assign an invalid agent_id to a non existing group
    request:
      <<: *put_agents_group
      params:
        list_agents: "wrong_agent"
    response:
      status_code: 400
      body: &error_spec
        detail: !anystr
        status: !anyint
        title: !anystr
        type: !anystr

    # PUT /agents/group/wrong_%_group
  - name: Try to assign all agents to an invalid group id
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/wrong_%_group"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *error_spec

    # PUT /agents/group/default?list_agents=998,999
  - name: Try to assign non existing agents to group default
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/default"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: "998,999"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1701
              id:
                - "998"
                - "999"
          total_affected_items: 0
          total_failed_items: 2
        message: !anystr

    # PUT /agents/group/default?list_agents=000,999
  - name: Try to assign 000 and a non existing agent to group default
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/default"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: "000,999"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1701
              id:
                - "999"
            - error:
                code: 1703
              id:
                - "000"
          total_affected_items: 0
          total_failed_items: 2
        message: !anystr

    # PUT /agents/group/default?list_agents=001,002
  - name: Try to assign agents 001 and 002 to group default where they already belong
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/default"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: "001,002"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1751
              id:
                - "001"
                - "002"
          total_affected_items: 0
          total_failed_items: 2
        message: !anystr

    # PUT /agents/group/group1?list_agents=003,004,005
  - name: Assign agents 003, 004 and 005 to group1
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: "003,004,005"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - "003"
            - "004"
          failed_items:
            - error:
                code: 1751
              id:
                - "005"
          total_affected_items: 2
          total_failed_items: 1
        message: !anystr

    # PUT /agents/group/group2
  - name: Assign all agents to group2
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group2"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - "001"
            - "003"
            - "004"
            - "007"
            - "009"
          total_affected_items: 5
        message: !anystr

    # PUT /agents/group/group2?force_single_group=true
  - name: Assign all agents to group2 with force_single_group
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/group/group2"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force_single_group: True
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - "001"
            - "002"
            - "003"
            - "004"
            - "005"
            - "006"
            - "007"
            - "008"
            - "009"
            - "010"
          total_affected_items: 10
        message: !anystr

---
test_name: PUT /agents/groups/{group_id}/configuration

stages:

    # PUT /agents/group/group2/configuration
  - name: Update group2 configuration
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group2/configuration"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: "application/xml"
      data:
        "{file_xml:s}"
    response:
      status_code: 200
      body:
        message: !anystr

    # PUT /agents/group/wrong_group/configuration
  - name: Try to update configuration of a non existing group
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/wrong_group/configuration"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: "application/xml"
      data:
        "{file_xml:s}"
    response:
      status_code: 400
      body:
        code: 1710

    # PUT /agents/group/group1/configuration
  - name: Try to update configuration using an empty file
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group1/configuration"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: "application/xml"
    response:
      status_code: 400
      body:
        code: 1112

    # PUT /agents/group/group1/configuration
  - name: Try to update configuration using an invalid configuration file
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group1/configuration"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: "application/xml"
      data:
        "{invalid_file_xml:s}"
    response:
      status_code: 400
      body:
        code: 1113

    # PUT /agents/group/group1/configuration
  - name: Try to update configuration using a wrong configuration file
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/group1/configuration"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: "application/xml"
      data:
        "{wrong_file_xml:s}"
    response:
      status_code: 400
      body:
        code: 1114

---
test_name: PUT /agents/restart

stages:

    # PUT /agents/restart?list_agents=wrong_id
  - name: Try to restart agent with wrong_id
    request: &agent_restart_request
      url: "{protocol:s}://{host:s}:{port:d}/agents/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        list_agents: "wrong_id"
    response:
      status_code: 400
      body:
        <<: *error_spec

    # PUT /agents/restart?list_agents=998,999
  - name: Try to restart non existing agents
    request:
      <<: *agent_restart_request
      params:
        list_agents: "998,999"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1701
              id: !anything
          total_affected_items: 0
          total_failed_items: 2
        message: !anystr


    # PUT /agents/restart?list_agents=000,999
  - name: Try to restart agent 000 and a non existing agent
    request:
      <<: *agent_restart_request
      params:
        list_agents: "000,999"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1701
              id:
                - "999"
            - error:
                code: 1703
              id:
                - "000"
          total_affected_items: 0
          total_failed_items: 2
        message: !anystr

    # THIS FAILS UNTIL DISTRIBUTED ANSWERS ARE MERGED PROPERLY
    # PUT /agents/restart?list_agents=001,002,999
  - name: Try to restart agents 001,002 and 999
    request:
      <<: *agent_restart_request
      params:
        list_agents: "001,002,999"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items:
            - error:
                code: 1701
              id:
                - "999"
          total_affected_items: 2
          total_failed_items: 1
        message: !anystr
    delay_after: 40

    # THIS FAILS UNTIL DISTRIBUTED ANSWERS ARE MERGED PROPERLY
    # PUT /agents/restart
  - name: Try to restart all agents
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: !anything
          failed_items: !anything
          total_affected_items: 7
          total_failed_items: 5
        message: !anystr
    delay_after: 40

---
test_name: PUT /agents/{agent_id}/group/{group_id}

stages:

    # PUT /agents/001/group/group2
  - name: Assign agent 001 to group1
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - "001"
          total_affected_items: 1
        message: !anystr

    # PUT /agents/wrong_id/group/group1
  - name: Try to assign an agent with an invalid id
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/wrong_id/group/group1"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *error_spec

    # PUT /agents/999/group/group3
  - name: Try to assign a non existing agent to group3
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/group/group3"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1701
              id:
                - "999"
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

    # PUT /agents/001/group/group3?force_single_group=true
  - name: Assign agent 001 to group3 with force_single_group
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/group3?force_single_group=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force_single_group: true
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - "001"
          total_affected_items: 1
        message: !anystr

---
test_name: PUT /agents/{agent_id}/restart

stages:

    # PUT /agents/000/restart
  - name: Try to restart agent 000 (manager)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1703
              id:
                - "000"
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

    # PUT /agents/999/restart
  - name: Try to restart a not existing agent
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1701
              id:
                - "999"
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

    # PUT /agents/wrong_id/restart
  - name: Try to restart an agent with an invalid id
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/wrong_id/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *error_spec

    # PUT /agents/002/restart
  - name: Restart an agent
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/002/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - "002"
          total_affected_items: 1
        message: !anystr

---
test_name: PUT /agents/{agent_id}/upgrade

# SKIPPED UNTIL UPGRADES ARE WORKING CORRECTLY
marks:
  - skip

stages:

    # PUT /agents/002/upgrade
  - name: Try to upgrade a not existing agent
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        code: 1701

    # PUT /agents/000/upgrade
  - name: Try to upgrade agent 000 (manager)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        code: 1703

    # PUT /agents/wrong_id/upgrade
  - name: Try to upgrade an agent using an invalid id
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/wrong_id/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *error_spec

    # PUT /agents/001/upgrade
  - name: Upgrade an agent
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        message: !anystr
    delay_after: 30

    # PUT /agents/001/upgrade
  - name: Try to upgrade an agent that is updated to the latest version
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        code: 1716

    # PUT /agents/003/upgrade
  - name: Downgrade agent to an specific version using force
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/003/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        version: v3.9.3
        force: true
    response:
      status_code: 200
      body:
        message: !anystr
    delay_after: 30

    # PUT /agents/004/upgrade
  - name: Upgrade an agent using http
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/004/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        use_http: true
    response:
      status_code: 200
      body:
        message: !anystr
    delay_after: 30

    # PUT /agents/005/upgrade
  - name: Upgrade an agent using wkp repo
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/005/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        wpk_repo: "wazuh_agent_v3.9.0_linux_x86_64.wpk"
    response:
      status_code: 200
      body:
        message: !anystr

---
test_name: PUT /agents/{agent_id}/upgrade_custom

# SKIPPED UNTIL UPGRADES ARE WORKING CORRECTLY
marks:
  - skip

stages:

    # PUT /agents/002/upgrade_custom?installer=agent_upgrade.py&file_path=/var/ossec
  - name: Try to customly upgrade a not existing agent
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/upgrade_custom?installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        code: 1701

    # PUT /agents/000/upgrade_custom?installer=agent_upgrade.py&file_path=/var/ossec
  - name: Try to customly upgrade agent 000 (manager)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/upgrade_custom?installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        code: 1703

    # PUT /agents/wrong_id/upgrade_custom?installer=agent_upgrade.py&file_path=/var/ossec
  - name: Try to customly upgrade an agent using an invalid id
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/wrong_id/upgrade_custom?installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      body:
        <<: *error_spec

    # PUT /agents/006/upgrade_custom
  - name: Try to customly upgrade an agent without parameters
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/003/upgrade_custom"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 500
      body:
        code: 1307

    # PUT /agents/007/upgrade_custom?installer=wa&file_path=/var/ossec
  - name: Customly upgrade an agent
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/006/upgrade_custom?wait_for_complete=true&installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      body:
        message: !anystr
    delay_after: 30
