'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

components:
    - vulnerability_detector

suite: feeds

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2022
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Trusty
    - Ubuntu Xenial
    - Ubuntu Bionic
    - Ubuntu Focal
    - Ubuntu Jammy
    - SUSE Linux Enterprise Desktop 11
    - SUSE Linux Enterprise Desktop 12
    - SUSE Linux Enterprise Desktop 15
    - SUSE Linux Enterprise Server 11
    - SUSE Linux Enterprise Server 12
    - SUSE Linux Enterprise Server 15

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/
    - https://documentation.wazuh.com/current/user-manual/capabilities/syscollector.html

tags:
    - vulnerability
    - vulnerability_detector
    - download
    - feeds
'''
import os
import pytest
from pathlib import Path

from wazuh_testing.constants.paths.logs import WAZUH_LOG_PATH
from wazuh_testing.utils.callbacks import generate_callback
from wazuh_testing.tools.file_monitor import FileMonitor
from wazuh_testing.utils.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.modules.vulnerability_detector import patterns as cb
from wazuh_testing.modules.vulnerability_detector.utils import feed_is_recently_updated
from wazuh_testing.modules.vulnerability_detector.configuration import DEFAULT_LOCAL_INTERNAL_OPTIONS
from . import TEST_CASES_PATH, CONFIGURATIONS_PATH


# Variables
local_internal_options = DEFAULT_LOCAL_INTERNAL_OPTIONS

# Configuration and cases data
configurations_path = Path(CONFIGURATIONS_PATH, 'configuration_download_feeds.yaml')
cases_path = Path(TEST_CASES_PATH, 'cases_download_feeds.yaml')

# Test configurations
configuration_parameters, configuration_metadata, case_ids = get_test_cases_data(cases_path)
configurations = load_configuration_template(configurations_path, configuration_parameters, configuration_metadata)


@pytest.mark.tier(level=2)
@pytest.mark.parametrize('test_configuration, test_metadata', zip(configurations, configuration_metadata),
                         ids=case_ids)
def test_download_feeds(test_configuration, test_metadata, set_wazuh_configuration, configure_local_internal_options,
                        truncate_monitored_files, clean_cve_tables, restart_modulesd):
    '''
    description: Check if modulesd downloads successfully the feeds from different providers and os, and check that
                 the feed update date does not exceed a set limit.

    test_phases:
        - setup:
            - Set a custom Wazuh configuration.
            - Configure custom local_internal_options.
            - Truncate wazuh logs.
            - Restart wazuh-modulesd daemon to apply configuration changes.
        - test:
            - Check in log that the database provider has been updated successfully.
            - Check that the timestamp of the feed metadata does not exceed the established threshold limit.
        - teardown:
            - Truncate wazuh logs.
            - Restore initial configuration, both ossec.conf and local_internal_options.conf.

    wazuh_min_version: 4.4.0

    tier: 2

    parameters:
        - test_configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - test_metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - agent_packages
            type: list
            brief: List of vulnerable packages.
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - configure_local_internal_options:
            type: fixture
            brief: Set local_internal_options configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables:
            type: fixture
            brief: Clean all CVE tables.
        - restart_modulesd:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check that it starts the feed download.
        - Check that the feed is downloaded successfully.
        - Check that the feed update date does not exceed a set limit.

    input_description:
        - The `configuration_download_feeds.yaml` file provides the module configuration for this test.
        - The `cases_download_feeds` file provides the test cases.

    expected_output:
        - r'Starting .* database update'
        - r'The update of the .* feed finished successfully'
    '''
    file_monitor = FileMonitor(monitored_file=WAZUH_LOG_PATH)

    provider_name = test_metadata['provider_name']

    # Check that the feed update has started
    file_monitor.start(callback=generate_callback(regex=cb.DATABASE_UPDATE_STARTING,
                                                  replacement={'provider_name': provider_name}))
    assert file_monitor.callback_result is not None, f"Could not find {provider_name} update starting log"

    # Check that the feed has been updated successfully
    file_monitor.start(timeout=test_metadata['download_timeout'],
                       callback=generate_callback(regex=cb.FEED_UPDATE_FINISHED,
                                                  replacement={'provider_name': provider_name}))
    assert file_monitor.callback_result is not None, f"Could not find 'update of {provider_name} feed finished' event"

    if 'provider_json_name' in test_metadata:

        provider_json_name = test_metadata['provider_json_name']
        file_monitor.start(callback=generate_callback(regex=cb.DATABASE_UPDATE_STARTING,
                                                      replacement={'provider_name': provider_json_name}))
        assert file_monitor.callback_result is not None, f"Could not find {provider_json_name} update starting log"

        file_monitor.start(timeout=test_metadata['download_timeout'],
                           callback=generate_callback(regex=cb.FEED_UPDATE_FINISHED,
                                                      replacement={'provider_name': provider_name}))
        assert file_monitor.callback_result is not None, f"Expected 'update of {provider_json_name} feed finished' \
                                                           event not found."

    if test_metadata['update_treshold_weeks'] != 'None':
        assert feed_is_recently_updated(provider_name=test_metadata['provider_name'],
                                        provider_os=test_metadata['provider_os'],
                                        threshold_weeks=test_metadata['update_treshold_weeks']), '' \
                                        f"The {test_metadata['provider_os']} feed has not been recently updated"
