#!/usr/bin/env python
# Copyright (C) 2015, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from unittest.mock import ANY, patch

with patch('wazuh.core.common.wazuh_uid'):
    with patch('wazuh.core.common.wazuh_gid'):
        from wazuh.core.vulnerability import *

test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data', 'test_agent')


@patch("wazuh.core.vulnerability.WazuhDBBackend")
@patch("wazuh.core.agent.WazuhDBQuery.__init__")
@patch('wazuh.core.wdb.WazuhDBConnection._send')
@patch('wazuh.core.agent.Agent.get_basic_information')
@patch('socket.socket.connect')
def test_WazuhDBQueryVulnerability__init__(mock_conn, mock_info, mock_send, mock_wazuhDBQuery, mock_backend):
    """Test if method __init__ of WazuhDBQueryVulnerability calls WazuhDBQuery with expected params"""
    WazuhDBQueryVulnerability(agent_id='001', offset=500, limit=500, query='version>3.9.81')
    mock_backend.assert_called_once_with('001')
    mock_wazuhDBQuery.assert_called_once_with(
        ANY, offset=500, limit=500, table='vuln_cves', sort=None, search=None, select=None,
        fields={'name': 'name', 'version': 'version', 'architecture': 'architecture', 'cve': 'cve', 'status': 'status',
                'type': 'type', 'detection_time': 'detection_time', 'severity': 'severity',
                'cvss2_score': 'cvss2_score', 'cvss3_score': 'cvss3_score',
                'external_references': 'external_references', 'condition': 'condition', 'title': 'title',
                'published': 'published', 'updated': 'updated'},
        filters={}, count=True, get_data=True, date_fields={'detection_time', 'last_partial_scan', 'last_full_scan'},
        min_select_fields=set(), distinct=False, default_sort_field='name', default_sort_order='ASC',
        query='version>3.9.81', backend=ANY
    )


def test_WazuhDBQueryVulnerability_format_data_into_dictionary():
    """Check that WazuhDBQueryVulnerability's method _format_data_into_dictionary works properly."""
    data = [
        {"version": "5.0-6ubuntu1.1", "detection_time": "1647338576",
         "external_references": '["https://www.youtube.com/watch?v=-wGtxJ8opa8",'
                                '"https://github.com/bminor/bash/commit/951bdaad7a18cc0dc1036bba86b18b90874d39ff",'
                                '"http://packetstormsecurity.com/files/155498/Bash-5.0-Patch-11-Privilege-Escalation'
                                '.html","https://security.netapp.com/advisory/ntap-20200430-0003/",'
                                '"https://lists.apache.org/thread.html'
                                '/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E'
                                '","https://security.gentoo.org/glsa/202105-34",'
                                '"https://nvd.nist.gov/vuln/detail/CVE-2019-18276",'
                                '"http://people.canonical.com/~ubuntu-security/cve/2019/CVE-2019-18276.html",'
                                '"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18276"]',
         "title": "CVE-2019-18276 affects bash", "cve": "CVE-2019-18276", "name": "bash", "published": "2019-11-28",
         "updated": "2021-05-26", "cvss2_score": 7.2, "condition": "Package unfixed", "architecture": "amd64",
         "type": "PACKAGE", "cvss3_score": 7.8, "severity": "High", "status": "VALID"}
    ]

    with patch('wazuh.core.vulnerability.WazuhDBBackend.__init__', return_value=None), \
            patch('wazuh.core.vulnerability.Agent.get_basic_information', return_value=None):
        wdb_vuln = WazuhDBQueryVulnerability(1)

    wdb_vuln._data = data
    result = wdb_vuln._format_data_into_dictionary()

    item = result['items'][0]
    assert all(item[field] == data[0][field] for field in item.keys() - {'external_references', 'detection_time'})
    assert item['external_references'] == eval(data[0]['external_references'])
    assert item['detection_time'] == datetime.utcfromtimestamp(int(data[0]['detection_time']))
