{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "custom-ecs-field.json",
  "name": "schema/custom-ecs-field/0",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "wazuh": {
      "description": "Wazuh internal field.",
      "ecs_type": null
    },
    "@timestamp": {
      "description": "Date/time when the event originated.\nThis is the date/time extracted from the event, typically representing when the event was generated by the source.\nIf the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.\nRequired field for all events.\n\nECS type: date",
      "ecs_type": "date"
    },
    "agent.build.original": {
      "description": "Extended build information for the agent.\nThis field is intended to contain any build information that a data source may provide, no specific formatting is required.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "agent.ephemeral_id": {
      "description": "Ephemeral identifier of this agent (if one exists).\nThis id normally changes across restarts, but `agent.id` does not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "agent.id": {
      "description": "Unique identifier of this agent (if one exists).\nExample: For Beats this would be beat.id.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "agent.name": {
      "description": "Custom name of the agent.\nThis is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "agent.type": {
      "description": "Type of the agent.\nThe agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "agent.version": {
      "description": "Version of the agent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.address": {
      "description": "Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.as.number": {
      "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\nECS type: long",
      "ecs_type": "long"
    },
    "client.as.organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.bytes": {
      "description": "Bytes sent from the client to the server.\n\nECS type: long",
      "ecs_type": "long"
    },
    "client.domain": {
      "description": "The domain name of the client system.\nThis value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "client.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.ip": {
      "description": "IP address of the client (IPv4 or IPv6).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "client.mac": {
      "description": "MAC address of the client.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.nat.ip": {
      "description": "Translated IP of source based NAT sessions (e.g. internal client to internet).\nTypically connections traversing load balancers, firewalls, or routers.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "client.nat.port": {
      "description": "Translated port of source based NAT sessions (e.g. internal client to internet).\nTypically connections traversing load balancers, firewalls, or routers.\n\nECS type: long",
      "ecs_type": "long"
    },
    "client.packets": {
      "description": "Packets sent from the client to the server.\n\nECS type: long",
      "ecs_type": "long"
    },
    "client.port": {
      "description": "Port of the client.\n\nECS type: long",
      "ecs_type": "long"
    },
    "client.registered_domain": {
      "description": "The highest registered client domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "client.user.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "client.user.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "client.user.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "client.user.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "client.user.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.account.id": {
      "description": "The cloud account or organization id used to identify different entities in a multi-tenant environment.\nExamples: AWS account id, Google Cloud ORG Id, or other unique identifier.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.account.name": {
      "description": "The cloud account name or alias used to identify different entities in a multi-tenant environment.\nExamples: AWS account name, Google Cloud ORG display name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.availability_zone": {
      "description": "Availability zone in which this host, resource, or service is located.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.instance.id": {
      "description": "Instance ID of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.instance.name": {
      "description": "Instance name of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.machine.type": {
      "description": "Machine type of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.account.id": {
      "description": "The cloud account or organization id used to identify different entities in a multi-tenant environment.\nExamples: AWS account id, Google Cloud ORG Id, or other unique identifier.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.account.name": {
      "description": "The cloud account name or alias used to identify different entities in a multi-tenant environment.\nExamples: AWS account name, Google Cloud ORG display name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.availability_zone": {
      "description": "Availability zone in which this host, resource, or service is located.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.instance.id": {
      "description": "Instance ID of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.instance.name": {
      "description": "Instance name of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.machine.type": {
      "description": "Machine type of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.project.id": {
      "description": "The cloud project identifier.\nExamples: Google Cloud Project id, Azure Project id.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.project.name": {
      "description": "The cloud project name.\nExamples: Google Cloud Project name, Azure Project name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.provider": {
      "description": "Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.region": {
      "description": "Region in which this host, resource, or service is located.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.origin.service.name": {
      "description": "The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server.\nExamples: app engine, app service, cloud run, fargate, lambda.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.project.id": {
      "description": "The cloud project identifier.\nExamples: Google Cloud Project id, Azure Project id.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.project.name": {
      "description": "The cloud project name.\nExamples: Google Cloud Project name, Azure Project name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.provider": {
      "description": "Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.region": {
      "description": "Region in which this host, resource, or service is located.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.service.name": {
      "description": "The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server.\nExamples: app engine, app service, cloud run, fargate, lambda.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.account.id": {
      "description": "The cloud account or organization id used to identify different entities in a multi-tenant environment.\nExamples: AWS account id, Google Cloud ORG Id, or other unique identifier.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.account.name": {
      "description": "The cloud account name or alias used to identify different entities in a multi-tenant environment.\nExamples: AWS account name, Google Cloud ORG display name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.availability_zone": {
      "description": "Availability zone in which this host, resource, or service is located.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.instance.id": {
      "description": "Instance ID of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.instance.name": {
      "description": "Instance name of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.machine.type": {
      "description": "Machine type of the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.project.id": {
      "description": "The cloud project identifier.\nExamples: Google Cloud Project id, Azure Project id.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.project.name": {
      "description": "The cloud project name.\nExamples: Google Cloud Project name, Azure Project name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.provider": {
      "description": "Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.region": {
      "description": "Region in which this host, resource, or service is located.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "cloud.target.service.name": {
      "description": "The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server.\nExamples: app engine, app service, cloud run, fargate, lambda.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "container.cpu.usage": {
      "description": "Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1. Scaling factor: 1000.\n\nECS type: scaled_float",
      "ecs_type": "scaled_float"
    },
    "container.disk.read.bytes": {
      "description": "The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "container.disk.write.bytes": {
      "description": "The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "container.id": {
      "description": "Unique container id.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "container.image.hash.all": {
      "description": "An array of digests of the image the container was built on. Each digest consists of the hash algorithm and value in this format: `algorithm:value`. Algorithm names should align with the field names in the ECS hash field set.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "container.image.name": {
      "description": "Name of the image the container was built on.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "container.image.tag": {
      "description": "Container image tags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "container.labels": {
      "description": "Image labels.\n\nECS type: object",
      "ecs_type": "object"
    },
    "container.memory.usage": {
      "description": "Memory usage percentage and it ranges from 0 to 1. Scaling factor: 1000.\n\nECS type: scaled_float",
      "ecs_type": "scaled_float"
    },
    "container.name": {
      "description": "Container name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "container.network.egress.bytes": {
      "description": "The number of bytes (gauge) sent out on all network interfaces by the container since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "container.network.ingress.bytes": {
      "description": "The number of bytes received (gauge) on all network interfaces by the container since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "container.runtime": {
      "description": "Runtime managing this container.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "data_stream.dataset": {
      "description": "The field can contain anything that makes sense to signify the source of the data.\nExamples include `nginx.access`, `prometheus`, `endpoint` etc. For data streams that otherwise fit, but that do not have dataset set we use the value \"generic\" for the dataset value. `event.dataset` should have the same value as `data_stream.dataset`.\nBeyond the Elasticsearch data stream naming criteria noted above, the `dataset` value has additional restrictions:\n  * Must not contain `-`\n  * No longer than 100 characters\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "data_stream.namespace": {
      "description": "A user defined namespace. Namespaces are useful to allow grouping of data.\nMany users already organize their indices this way, and the data stream naming scheme now provides this best practice as a default. Many users will populate this field with `default`. If no value is used, it falls back to `default`.\nBeyond the Elasticsearch index naming criteria noted above, `namespace` value has the additional restrictions:\n  * Must not contain `-`\n  * No longer than 100 characters\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "data_stream.type": {
      "description": "An overarching type for the data stream.\nCurrently allowed values are \"logs\" and \"metrics\". We expect to also add \"traces\" and \"synthetics\" in the near future.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.address": {
      "description": "Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.as.number": {
      "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\nECS type: long",
      "ecs_type": "long"
    },
    "destination.as.organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.bytes": {
      "description": "Bytes sent from the destination to the source.\n\nECS type: long",
      "ecs_type": "long"
    },
    "destination.domain": {
      "description": "The domain name of the destination system.\nThis value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "destination.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.ip": {
      "description": "IP address of the destination (IPv4 or IPv6).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "destination.mac": {
      "description": "MAC address of the destination.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.nat.ip": {
      "description": "Translated ip of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "destination.nat.port": {
      "description": "Port the source session is translated to by NAT Device.\nTypically used with load balancers, firewalls, or routers.\n\nECS type: long",
      "ecs_type": "long"
    },
    "destination.packets": {
      "description": "Packets sent from the destination to the source.\n\nECS type: long",
      "ecs_type": "long"
    },
    "destination.port": {
      "description": "Port of the destination.\n\nECS type: long",
      "ecs_type": "long"
    },
    "destination.registered_domain": {
      "description": "The highest registered destination domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "destination.user.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "destination.user.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "destination.user.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "destination.user.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "destination.user.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.code_signature.digest_algorithm": {
      "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.code_signature.exists": {
      "description": "Boolean to capture if a signature is present.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "dll.code_signature.signing_id": {
      "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.code_signature.status": {
      "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.code_signature.subject_name": {
      "description": "Subject name of the code signer\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.code_signature.team_id": {
      "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.code_signature.timestamp": {
      "description": "Date and time when the code signature was generated and signed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "dll.code_signature.trusted": {
      "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "dll.code_signature.valid": {
      "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "dll.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.name": {
      "description": "Name of the library.\nThis generally maps to the name of the file on disk.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.path": {
      "description": "Full file path of the library.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.architecture": {
      "description": "CPU architecture target for the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.company": {
      "description": "Internal company name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.description": {
      "description": "Internal description of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.file_version": {
      "description": "Internal version of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.imphash": {
      "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.original_file_name": {
      "description": "Internal name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.pehash": {
      "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dll.pe.product": {
      "description": "Internal product name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.answers": {
      "description": "An array containing an object for each answer section returned by the server.\nThe main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines.\nNot all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.\n\nECS type: object",
      "ecs_type": "object"
    },
    "dns.answers.class": {
      "description": "The class of DNS data contained in this resource record.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.answers.data": {
      "description": "The data describing the resource.\nThe meaning of this data depends on the type and class of the resource record.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.answers.name": {
      "description": "The domain name to which this resource record pertains.\nIf a chain of CNAME is being resolved, each answer's `name` should be the one that corresponds with the answer's `data`. It should not simply be the original `question.name` repeated.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.answers.ttl": {
      "description": "The time interval in seconds that this resource record may be cached before it should be discarded. Zero values mean that the data should not be cached.\n\nECS type: long",
      "ecs_type": "long"
    },
    "dns.answers.type": {
      "description": "The type of data contained in this resource record.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.header_flags": {
      "description": "Array of 2 letter DNS header flags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.id": {
      "description": "The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.op_code": {
      "description": "The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.question.class": {
      "description": "The class of records being queried.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.question.name": {
      "description": "The name being queried.\nIf the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \\t, \\r, and \\n respectively.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.question.registered_domain": {
      "description": "The highest registered domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.question.subdomain": {
      "description": "The subdomain is all of the labels under the registered_domain.\nIf the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.question.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.question.type": {
      "description": "The type of record being queried.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.resolved_ip": {
      "description": "Array containing all IPs seen in `answers.data`.\nThe `answers` array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them easier to visualize and query for.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "dns.response_code": {
      "description": "The DNS response code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "dns.type": {
      "description": "The type of DNS event captured, query or answer.\nIf your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.\nIf your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "ecs.version": {
      "description": "ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.\nWhen querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments": {
      "description": "A list of objects describing the attachment files sent along with an email message.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "email.attachments.file.extension": {
      "description": "Attachment file extension, excluding the leading dot.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.mime_type": {
      "description": "The MIME media type of the attachment.\nThis value will typically be extracted from the `Content-Type` MIME header field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.name": {
      "description": "Name of the attachment file including the file extension.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.attachments.file.size": {
      "description": "Attachment file size in bytes.\n\nECS type: long",
      "ecs_type": "long"
    },
    "email.bcc.address": {
      "description": "The email address of BCC recipient\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.cc.address": {
      "description": "The email address of CC recipient\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.content_type": {
      "description": "Information about how the message is to be displayed.\nTypically a MIME type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.delivery_timestamp": {
      "description": "The date and time when the email message was received by the service or client.\n\nECS type: date",
      "ecs_type": "date"
    },
    "email.direction": {
      "description": "The direction of the message based on the sending and receiving domains.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.from.address": {
      "description": "The email address of the sender, typically from the RFC 5322 `From:` header field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.local_id": {
      "description": "Unique identifier given to the email by the source that created the event.\nIdentifier is not persistent across hops.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.message_id": {
      "description": "Identifier from the RFC 5322 `Message-ID:` email header that refers to a particular email message.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.origination_timestamp": {
      "description": "The date and time the email message was composed. Many email clients will fill in this value automatically when the message is sent by a user.\n\nECS type: date",
      "ecs_type": "date"
    },
    "email.reply_to.address": {
      "description": "The address that replies should be delivered to based on the value in the RFC 5322 `Reply-To:` header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.sender.address": {
      "description": "Per RFC 5322, specifies the address responsible for the actual transmission of the message.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.subject": {
      "description": "A brief summary of the topic of the message.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.to.address": {
      "description": "The email address of recipient\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "email.x_mailer": {
      "description": "The name of the application that was used to draft and send the original email message.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "error.code": {
      "description": "Error code describing the error.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "error.id": {
      "description": "Unique identifier for the error.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "error.message": {
      "description": "Error message.\n\nECS type: text",
      "ecs_type": "text"
    },
    "error.stack_trace": {
      "description": "The stack trace of this error in plain text.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "error.type": {
      "description": "The type of the error, for example the class name of the exception.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.action": {
      "description": "The action captured by the event.\nThis describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.agent_id_status": {
      "description": "Agents are normally responsible for populating the `agent.id` field value. If the system receiving events is capable of validating the value based on authentication information for the client then this field can be used to reflect the outcome of that validation.\nFor example if the agent's connection is authenticated with mTLS and the client cert contains the ID of the agent to which the cert was issued then the `agent.id` value in events can be checked against the certificate. If the values match then `event.agent_id_status: verified` is added to the event, otherwise one of the other allowed values should be used.\nIf no validation is performed then the field should be omitted.\nThe allowed values are:\n`verified` - The `agent.id` field value matches expected value obtained from auth metadata.\n`mismatch` - The `agent.id` field value does not match the expected value obtained from auth metadata.\n`missing` - There was no `agent.id` field in the event to validate.\n`auth_metadata_missing` - There was no auth metadata or it was missing information about the agent ID.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.category": {
      "description": "This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.\n`event.category` represents the \"big buckets\" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.\nThis field is an array. This will allow proper categorization of some events that fall in multiple categories.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.code": {
      "description": "Identification code for this event, if one exists.\nSome event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.created": {
      "description": "event.created contains the date/time when the event was first read by an agent, or by your pipeline.\nThis field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.\nIn most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.\nIn case the two timestamps are identical, @timestamp should be used.\n\nECS type: date",
      "ecs_type": "date"
    },
    "event.dataset": {
      "description": "Name of the dataset.\nIf an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.\nIt's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.duration": {
      "description": "Duration of the event in nanoseconds.\nIf event.start and event.end are known this value should be the difference between the end and start time.\n\nECS type: long",
      "ecs_type": "long"
    },
    "event.end": {
      "description": "event.end contains the date when the event ended or when the activity was last observed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "event.hash": {
      "description": "Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.id": {
      "description": "Unique ID to describe the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.ingested": {
      "description": "Timestamp when an event arrived in the central data store.\nThis is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.\nIn normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.\n\nECS type: date",
      "ecs_type": "date"
    },
    "event.kind": {
      "description": "This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.\n`event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.\nThe value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.module": {
      "description": "Name of the module this data is coming from.\nIf your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.original": {
      "description": "Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.\nThis field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.outcome": {
      "description": "This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.\n`event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.\nNote that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.\nAlso note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.\nFurther note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.provider": {
      "description": "Source of the event.\nEvent transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.reason": {
      "description": "Reason why this event happened, according to the source.\nThis describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site`).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.reference": {
      "description": "Reference URL linking to additional information about this event.\nThis URL links to a static definition of this event. Alert events, indicated by `event.kind:alert`, are a common use case for this field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.risk_score": {
      "description": "Risk score or priority of the event (e.g. security solutions). Use your system's original value here.\n\nECS type: float",
      "ecs_type": "float"
    },
    "event.risk_score_norm": {
      "description": "Normalized risk score or priority of the event, on a scale of 0 to 100.\nThis is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.\n\nECS type: float",
      "ecs_type": "float"
    },
    "event.sequence": {
      "description": "Sequence number of the event.\nThe sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.\n\nECS type: long",
      "ecs_type": "long"
    },
    "event.severity": {
      "description": "The numeric severity of the event according to your event source.\nWhat the different severity values mean can be different between sources and use cases. It's up to the implementer to make sure severities are consistent across events from the same source.\nThe Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.\n\nECS type: long",
      "ecs_type": "long"
    },
    "event.start": {
      "description": "event.start contains the date when the event started or when the activity was first observed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "event.timezone": {
      "description": "This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.\nAcceptable timezone formats are: a canonical ID (e.g. \"Europe/Amsterdam\"), abbreviated (e.g. \"EST\") or an HH:mm differential (e.g. \"-05:00\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.type": {
      "description": "This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.\n`event.type` represents a categorization \"sub-bucket\" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.\nThis field is an array. This will allow proper categorization of some events that fall in multiple event types.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "event.url": {
      "description": "URL linking to an external system to continue investigation of this event.\nThis URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by `event.kind:alert`, are a common use case for this field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "faas.coldstart": {
      "description": "Boolean value indicating a cold start of a function.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "faas.execution": {
      "description": "The execution ID of the current function execution.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "faas.id": {
      "description": "The unique identifier of a serverless function.\nFor AWS Lambda it's the function ARN (Amazon Resource Name) without a version or alias suffix.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "faas.name": {
      "description": "The name of a serverless function.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "faas.trigger": {
      "description": "Details about the function trigger.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "faas.trigger.request_id": {
      "description": "The ID of the trigger request , message, event, etc.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "faas.trigger.type": {
      "description": "The trigger for the function execution.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "faas.version": {
      "description": "The version of a serverless function.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.accessed": {
      "description": "Last time the file was accessed.\nNote that not all filesystems keep track of access time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.attributes": {
      "description": "Array of file attributes.\nAttributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.code_signature.digest_algorithm": {
      "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.code_signature.exists": {
      "description": "Boolean to capture if a signature is present.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "file.code_signature.signing_id": {
      "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.code_signature.status": {
      "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.code_signature.subject_name": {
      "description": "Subject name of the code signer\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.code_signature.team_id": {
      "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.code_signature.timestamp": {
      "description": "Date and time when the code signature was generated and signed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.code_signature.trusted": {
      "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "file.code_signature.valid": {
      "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "file.created": {
      "description": "File creation time.\nNote that not all filesystems store the creation time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.ctime": {
      "description": "Last time the file attributes or metadata changed.\nNote that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.device": {
      "description": "Device that is the source of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.directory": {
      "description": "Directory where the file is located. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.drive_letter": {
      "description": "Drive letter where the file is located. This field is only relevant on Windows.\nThe value should be uppercase, and not include the colon.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.architecture": {
      "description": "Machine architecture of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.byte_order": {
      "description": "Byte sequence of ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.cpu_type": {
      "description": "CPU type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.creation_date": {
      "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.elf.exports": {
      "description": "List of exported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "file.elf.header.abi_version": {
      "description": "Version of the ELF Application Binary Interface (ABI).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.header.class": {
      "description": "Header class of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.header.data": {
      "description": "Data table of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.header.entrypoint": {
      "description": "Header entrypoint of the ELF file.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.elf.header.object_version": {
      "description": "\"0x1\" for original ELF files.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.header.os_abi": {
      "description": "Application Binary Interface (ABI) of the Linux OS.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.header.type": {
      "description": "Header type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.header.version": {
      "description": "Version of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.imports": {
      "description": "List of imported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "file.elf.sections": {
      "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "file.elf.sections.chi2": {
      "description": "Chi-square probability distribution of the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.elf.sections.entropy": {
      "description": "Shannon entropy calculation from the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.elf.sections.flags": {
      "description": "ELF Section List flags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.sections.name": {
      "description": "ELF Section List name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.sections.physical_offset": {
      "description": "ELF Section List offset.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.sections.physical_size": {
      "description": "ELF Section List physical size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.elf.sections.type": {
      "description": "ELF Section List type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.sections.virtual_address": {
      "description": "ELF Section List virtual address.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.elf.sections.virtual_size": {
      "description": "ELF Section List virtual size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.elf.segments": {
      "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "file.elf.segments.sections": {
      "description": "ELF object segment sections.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.segments.type": {
      "description": "ELF object segment type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.shared_libraries": {
      "description": "List of shared libraries used by this ELF object.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.elf.telfhash": {
      "description": "telfhash symbol hash for ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.extension": {
      "description": "File extension, excluding the leading dot.\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.fork_name": {
      "description": "A fork is additional data associated with a filesystem object.\nOn Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.\nOn NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\\path\\to\\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.gid": {
      "description": "Primary group ID (GID) of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.group": {
      "description": "Primary group name of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.inode": {
      "description": "Inode representing the file in the filesystem.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.mime_type": {
      "description": "MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.mode": {
      "description": "Mode of the file in octal representation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.mtime": {
      "description": "Last time the file content was modified.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.name": {
      "description": "Name of the file including the extension, without the directory.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.owner": {
      "description": "File owner's username.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.path": {
      "description": "Full path to the file, including the file name. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.architecture": {
      "description": "CPU architecture target for the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.company": {
      "description": "Internal company name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.description": {
      "description": "Internal description of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.file_version": {
      "description": "Internal version of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.imphash": {
      "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.original_file_name": {
      "description": "Internal name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.pehash": {
      "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.pe.product": {
      "description": "Internal product name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.size": {
      "description": "File size in bytes.\nOnly relevant when `file.type` is \"file\".\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.target_path": {
      "description": "Target path for symlinks.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.type": {
      "description": "File type (file, dir, or symlink).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.uid": {
      "description": "The user ID (UID) or security identifier (SID) of the file owner.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "file.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "file.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "file.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.architecture": {
      "description": "Operating system architecture.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.boot.id": {
      "description": "Linux boot uuid taken from /proc/sys/kernel/random/boot_id. Note the boot_id value from /proc may or may not be the same in containers as on the host. Some container runtimes will bind mount a new boot_id value onto the proc file in each container.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.cpu.usage": {
      "description": "Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1.\nScaling factor: 1000.\nFor example: For a two core host, this value should be the average of the two cores, between 0 and 1.\n\nECS type: scaled_float",
      "ecs_type": "scaled_float"
    },
    "host.disk.read.bytes": {
      "description": "The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "host.disk.write.bytes": {
      "description": "The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "host.domain": {
      "description": "Name of the domain of which the host is a member.\nFor example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "host.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.hostname": {
      "description": "Hostname of the host.\nIt normally contains what the `hostname` command returns on the host machine.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.id": {
      "description": "Unique host id.\nAs hostname is not always unique, use values that are meaningful in your environment.\nExample: The current usage of `beat.name`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.ip": {
      "description": "Host ip addresses.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "host.mac": {
      "description": "Host MAC addresses.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.name": {
      "description": "Name of the host.\nIt can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.network.egress.bytes": {
      "description": "The number of bytes (gauge) sent out on all network interfaces by the host since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "host.network.egress.packets": {
      "description": "The number of packets (gauge) sent out on all network interfaces by the host since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "host.network.ingress.bytes": {
      "description": "The number of bytes received (gauge) on all network interfaces by the host since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "host.network.ingress.packets": {
      "description": "The number of packets (gauge) received on all network interfaces by the host since the last metric collection.\n\nECS type: long",
      "ecs_type": "long"
    },
    "host.os.family": {
      "description": "OS family (such as redhat, debian, freebsd, windows).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.os.full": {
      "description": "Operating system name, including the version or code name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.os.kernel": {
      "description": "Operating system kernel version as a raw string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.os.name": {
      "description": "Operating system name, without the version.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.os.platform": {
      "description": "Operating system platform (such centos, ubuntu, windows).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.os.type": {
      "description": "Use the `os.type` field to categorize the operating system into one of the broad commercial families.\nIf the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.os.version": {
      "description": "Operating system version as a raw string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.pid_ns_ino": {
      "description": "This is the inode number of the namespace in the namespace file system (nsfs). Unsigned int inum in include/linux/ns_common.h.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "host.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "host.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "host.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "host.type": {
      "description": "Type of host.\nFor Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "host.uptime": {
      "description": "Seconds the host has been up.\n\nECS type: long",
      "ecs_type": "long"
    },
    "http.request.body.bytes": {
      "description": "Size in bytes of the request body.\n\nECS type: long",
      "ecs_type": "long"
    },
    "http.request.body.content": {
      "description": "The full HTTP request body.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "http.request.bytes": {
      "description": "Total size in bytes of the request (body and headers).\n\nECS type: long",
      "ecs_type": "long"
    },
    "http.request.id": {
      "description": "A unique identifier for each HTTP request to correlate logs between clients and servers in transactions.\nThe id may be contained in a non-standard HTTP header, such as `X-Request-ID` or `X-Correlation-ID`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "http.request.method": {
      "description": "HTTP request method.\nThe value should retain its casing from the original event. For example, `GET`, `get`, and `GeT` are all considered valid values for this field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "http.request.mime_type": {
      "description": "Mime type of the body of the request.\nThis value must only be populated based on the content of the request body, not on the `Content-Type` header. Comparing the mime type of a request with the request's Content-Type header can be helpful in detecting threats or misconfigured clients.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "http.request.referrer": {
      "description": "Referrer for this HTTP request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "http.response.body.bytes": {
      "description": "Size in bytes of the response body.\n\nECS type: long",
      "ecs_type": "long"
    },
    "http.response.body.content": {
      "description": "The full HTTP response body.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "http.response.bytes": {
      "description": "Total size in bytes of the response (body and headers).\n\nECS type: long",
      "ecs_type": "long"
    },
    "http.response.mime_type": {
      "description": "Mime type of the body of the response.\nThis value must only be populated based on the content of the response body, not on the `Content-Type` header. Comparing the mime type of a response with the response's Content-Type header can be helpful in detecting misconfigured servers.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "http.response.status_code": {
      "description": "HTTP response status code.\n\nECS type: long",
      "ecs_type": "long"
    },
    "http.version": {
      "description": "HTTP version.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "labels": {
      "description": "Custom key/value pairs.\nCan be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.\nExample: `docker` and `k8s` labels.\n\nECS type: object",
      "ecs_type": "object"
    },
    "log.file.path": {
      "description": "Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.\nIf the event wasn't read from a log file, do not populate this field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.level": {
      "description": "Original log level of the log event.\nIf the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).\nSome examples are `warn`, `err`, `i`, `informational`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.logger": {
      "description": "The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.origin.file.line": {
      "description": "The line number of the file containing the source code which originated the log event.\n\nECS type: long",
      "ecs_type": "long"
    },
    "log.origin.file.name": {
      "description": "The name of the file containing the source code which originated the log event.\nNote that this field is not meant to capture the log file. The correct field to capture the log file is `log.file.path`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.origin.function": {
      "description": "The name of the function or method which originated the log event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.syslog": {
      "description": "The Syslog metadata of the event, if the event was transmitted via Syslog. Please see RFCs 5424 or 3164.\n\nECS type: object",
      "ecs_type": "object"
    },
    "log.syslog.appname": {
      "description": "The device or application that originated the Syslog message, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.syslog.facility.code": {
      "description": "The Syslog numeric facility of the log event, if available.\nAccording to RFCs 5424 and 3164, this value should be an integer between 0 and 23.\n\nECS type: long",
      "ecs_type": "long"
    },
    "log.syslog.facility.name": {
      "description": "The Syslog text-based facility of the log event, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.syslog.hostname": {
      "description": "The hostname, FQDN, or IP of the machine that originally sent the Syslog message. This is sourced from the hostname field of the syslog header. Depending on the environment, this value may be different from the host that handled the event, especially if the host handling the events is acting as a collector.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.syslog.msgid": {
      "description": "An identifier for the type of Syslog message, if available. Only applicable for RFC 5424 messages.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.syslog.priority": {
      "description": "Syslog numeric priority of the event, if available.\nAccording to RFCs 5424 and 3164, the priority is 8 * facility + severity. This number is therefore expected to contain a value between 0 and 191.\n\nECS type: long",
      "ecs_type": "long"
    },
    "log.syslog.procid": {
      "description": "The process name or ID that originated the Syslog message, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.syslog.severity.code": {
      "description": "The Syslog numeric severity of the log event, if available.\nIf the event source publishing via Syslog provides a different numeric severity value (e.g. firewall, IDS), your source's numeric severity should go to `event.severity`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `event.severity`.\n\nECS type: long",
      "ecs_type": "long"
    },
    "log.syslog.severity.name": {
      "description": "The Syslog numeric severity of the log event, if available.\nIf the event source publishing via Syslog provides a different severity value (e.g. firewall, IDS), your source's text severity should go to `log.level`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `log.level`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "log.syslog.structured_data": {
      "description": "Structured data expressed in RFC 5424 messages, if available. These are key-value pairs formed from the structured data portion of the syslog message, as defined in RFC 5424 Section 6.3.\n\nECS type: object",
      "ecs_type": "object"
    },
    "log.syslog.version": {
      "description": "The version of the Syslog protocol specification. Only applicable for RFC 5424 messages.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "message": {
      "description": "For log events the message field contains the log message, optimized for viewing in a log viewer.\nFor structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.\nIf multiple messages exist, they can be combined into one message.\n\nECS type: text",
      "ecs_type": "text"
    },
    "network.application": {
      "description": "When a specific application or service is identified from network connection details (source/dest IPs, ports, certificates, or wire format), this field captures the application's or service's name.\nFor example, the original event identifies the network connection being from a specific web service in a `https` network connection, like `facebook` or `twitter`.\nThe field value must be normalized to lowercase for querying.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.bytes": {
      "description": "Total bytes transferred in both directions.\nIf `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.\n\nECS type: long",
      "ecs_type": "long"
    },
    "network.community_id": {
      "description": "A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.\nLearn more at https://github.com/corelight/community-id-spec.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.direction": {
      "description": "Direction of the network traffic.\nWhen mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values \"ingress\" or \"egress\".\nWhen mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values \"inbound\", \"outbound\", \"internal\" or \"external\".\nNote that \"internal\" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that \"external\" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.forwarded_ip": {
      "description": "Host IP address when the source IP address is the proxy.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "network.iana_number": {
      "description": "IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.inner": {
      "description": "Network.inner fields are added in addition to network.vlan fields to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)\n\nECS type: object",
      "ecs_type": "object"
    },
    "network.inner.vlan.id": {
      "description": "VLAN ID as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.inner.vlan.name": {
      "description": "Optional VLAN name as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.name": {
      "description": "Name given by operators to sections of their network.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.packets": {
      "description": "Total packets transferred in both directions.\nIf `source.packets` and `destination.packets` are known, `network.packets` is their sum.\n\nECS type: long",
      "ecs_type": "long"
    },
    "network.protocol": {
      "description": "In the OSI Model this would be the Application Layer protocol. For example, `http`, `dns`, or `ssh`.\nThe field value must be normalized to lowercase for querying.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.transport": {
      "description": "Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)\nThe field value must be normalized to lowercase for querying.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.type": {
      "description": "In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc\nThe field value must be normalized to lowercase for querying.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.vlan.id": {
      "description": "VLAN ID as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "network.vlan.name": {
      "description": "Optional VLAN name as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.egress": {
      "description": "Observer.egress holds information like interface number and name, vlan, and zone information to classify egress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.\n\nECS type: object",
      "ecs_type": "object"
    },
    "observer.egress.interface.alias": {
      "description": "Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.egress.interface.id": {
      "description": "Interface ID as reported by an observer (typically SNMP interface ID).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.egress.interface.name": {
      "description": "Interface name as reported by the system.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.egress.vlan.id": {
      "description": "VLAN ID as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.egress.vlan.name": {
      "description": "Optional VLAN name as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.egress.zone": {
      "description": "Network zone of outbound traffic as reported by the observer to categorize the destination area of egress traffic, e.g. Internal, External, DMZ, HR, Legal, etc.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "observer.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.hostname": {
      "description": "Hostname of the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.ingress": {
      "description": "Observer.ingress holds information like interface number and name, vlan, and zone information to classify ingress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.\n\nECS type: object",
      "ecs_type": "object"
    },
    "observer.ingress.interface.alias": {
      "description": "Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.ingress.interface.id": {
      "description": "Interface ID as reported by an observer (typically SNMP interface ID).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.ingress.interface.name": {
      "description": "Interface name as reported by the system.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.ingress.vlan.id": {
      "description": "VLAN ID as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.ingress.vlan.name": {
      "description": "Optional VLAN name as reported by the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.ingress.zone": {
      "description": "Network zone of incoming traffic as reported by the observer to categorize the source area of ingress traffic. e.g. internal, External, DMZ, HR, Legal, etc.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.ip": {
      "description": "IP addresses of the observer.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "observer.mac": {
      "description": "MAC addresses of the observer.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.name": {
      "description": "Custom name of the observer.\nThis is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.\nIf no custom name is needed, the field can be left empty.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.os.family": {
      "description": "OS family (such as redhat, debian, freebsd, windows).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.os.full": {
      "description": "Operating system name, including the version or code name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.os.kernel": {
      "description": "Operating system kernel version as a raw string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.os.name": {
      "description": "Operating system name, without the version.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.os.platform": {
      "description": "Operating system platform (such centos, ubuntu, windows).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.os.type": {
      "description": "Use the `os.type` field to categorize the operating system into one of the broad commercial families.\nIf the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.os.version": {
      "description": "Operating system version as a raw string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.product": {
      "description": "The product name of the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.serial_number": {
      "description": "Observer serial number.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.type": {
      "description": "The type of the observer the data is coming from.\nThere is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.vendor": {
      "description": "Vendor name of the observer.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "observer.version": {
      "description": "Observer version.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.api_version": {
      "description": "API version being used to carry out the action\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.cluster.id": {
      "description": "Unique ID of the cluster.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.cluster.name": {
      "description": "Name of the cluster.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.cluster.url": {
      "description": "URL of the API used to manage the cluster.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.cluster.version": {
      "description": "The version of the cluster.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.namespace": {
      "description": "Namespace in which the action is taking place.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.organization": {
      "description": "Organization affected by the event (for multi-tenant orchestrator setups).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.resource.id": {
      "description": "Unique ID of the resource being acted upon.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.resource.ip": {
      "description": "IP address assigned to the resource associated with the event being observed. In the case of a Kubernetes Pod, this array would contain only one element: the IP of the Pod (as opposed to the Node on which the Pod is running).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "orchestrator.resource.name": {
      "description": "Name of the resource being acted upon.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.resource.parent.type": {
      "description": "Type or kind of the parent resource associated with the event being observed. In Kubernetes, this will be the name of a built-in workload resource (e.g., Deployment, StatefulSet, DaemonSet).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.resource.type": {
      "description": "Type of resource being acted upon.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "orchestrator.type": {
      "description": "Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "organization.id": {
      "description": "Unique identifier for the organization.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.architecture": {
      "description": "Package architecture.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.build_version": {
      "description": "Additional information about the build version of the installed package.\nFor example use the commit SHA of a non-released package.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.checksum": {
      "description": "Checksum of the installed package for verification.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.description": {
      "description": "Description of the package.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.install_scope": {
      "description": "Indicating how the package was installed, e.g. user-local, global.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.installed": {
      "description": "Time when package was installed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "package.license": {
      "description": "License under which the package was released.\nUse a short name, e.g. the license identifier from SPDX License List where possible (https://spdx.org/licenses/).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.name": {
      "description": "Package name\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.path": {
      "description": "Path where the package is installed.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.reference": {
      "description": "Home page or reference URL of the software in this package, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.size": {
      "description": "Package size in bytes.\n\nECS type: long",
      "ecs_type": "long"
    },
    "package.type": {
      "description": "Type of package.\nThis should contain the package file type, rather than the package manager name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "package.version": {
      "description": "Package version\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.args": {
      "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.args_count": {
      "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.code_signature.digest_algorithm": {
      "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.code_signature.exists": {
      "description": "Boolean to capture if a signature is present.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.code_signature.signing_id": {
      "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.code_signature.status": {
      "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.code_signature.subject_name": {
      "description": "Subject name of the code signer\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.code_signature.team_id": {
      "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.code_signature.timestamp": {
      "description": "Date and time when the code signature was generated and signed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.code_signature.trusted": {
      "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.code_signature.valid": {
      "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.command_line": {
      "description": "Full command line that started the process, including the absolute path to the executable, and all arguments.\nSome arguments may be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.architecture": {
      "description": "Machine architecture of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.byte_order": {
      "description": "Byte sequence of ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.cpu_type": {
      "description": "CPU type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.creation_date": {
      "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.elf.exports": {
      "description": "List of exported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.elf.header.abi_version": {
      "description": "Version of the ELF Application Binary Interface (ABI).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.header.class": {
      "description": "Header class of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.header.data": {
      "description": "Data table of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.header.entrypoint": {
      "description": "Header entrypoint of the ELF file.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.elf.header.object_version": {
      "description": "\"0x1\" for original ELF files.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.header.os_abi": {
      "description": "Application Binary Interface (ABI) of the Linux OS.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.header.type": {
      "description": "Header type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.header.version": {
      "description": "Version of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.imports": {
      "description": "List of imported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.elf.sections": {
      "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "process.elf.sections.chi2": {
      "description": "Chi-square probability distribution of the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.elf.sections.entropy": {
      "description": "Shannon entropy calculation from the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.elf.sections.flags": {
      "description": "ELF Section List flags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.sections.name": {
      "description": "ELF Section List name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.sections.physical_offset": {
      "description": "ELF Section List offset.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.sections.physical_size": {
      "description": "ELF Section List physical size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.elf.sections.type": {
      "description": "ELF Section List type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.sections.virtual_address": {
      "description": "ELF Section List virtual address.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.elf.sections.virtual_size": {
      "description": "ELF Section List virtual size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.elf.segments": {
      "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "process.elf.segments.sections": {
      "description": "ELF object segment sections.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.segments.type": {
      "description": "ELF object segment type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.shared_libraries": {
      "description": "List of shared libraries used by this ELF object.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.elf.telfhash": {
      "description": "telfhash symbol hash for ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.end": {
      "description": "The time the process ended.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.args": {
      "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.args_count": {
      "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.entry_leader.attested_groups.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.attested_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.attested_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.command_line": {
      "description": "Full command line that started the process, including the absolute path to the executable, and all arguments.\nSome arguments may be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.entry_meta.source.ip": {
      "description": "IP address of the source (IPv4 or IPv6).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "process.entry_leader.entry_meta.type": {
      "description": "The entry type for the entry session leader. Values include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal, console\nNote: This field is only set on process.session_leader.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.executable": {
      "description": "Absolute path to the process executable.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.interactive": {
      "description": "Whether the process is connected to an interactive shell.\nProcess interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.\nNote: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.entry_leader.name": {
      "description": "Process name.\nSometimes called program name or similar.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.parent.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.parent.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.entry_leader.parent.session_leader.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.parent.session_leader.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.entry_leader.parent.session_leader.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.entry_leader.parent.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.entry_leader.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.entry_leader.real_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.real_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.real_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.real_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.same_as_process": {
      "description": "This boolean is used to identify if a leader process is the same as the top level process.\nFor example, if `process.group_leader.same_as_process = true`, it means the process event in question is the leader of its process group. Details under `process.*` like `pid` would be the same under `process.group_leader.*` The same applies for both `process.session_leader` and `process.entry_leader`.\nThis field exists to the benefit of EQL and other rule engines since it's not possible to compare equality between two fields in a single document. e.g `process.entity_id` = `process.group_leader.entity_id` (top level process is the process group leader) OR `process.entity_id` = `process.entry_leader.entity_id` (top level process is the entry session leader)\nInstead these rules could be written like: `process.group_leader.same_as_process: true` OR `process.entry_leader.same_as_process: true`\nNote: This field is only set on `process.entry_leader`, `process.session_leader` and `process.group_leader`.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.entry_leader.saved_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.saved_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.saved_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.saved_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.entry_leader.supplemental_groups.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.supplemental_groups.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.tty": {
      "description": "Information about the controlling TTY device. If set, the process belongs to an interactive session.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.entry_leader.tty.char_device.major": {
      "description": "The major number identifies the driver associated with the device. The character device's major and minor numbers can be algorithmically combined to produce the more familiar terminal identifiers such as \"ttyS0\" and \"pts/0\". For more details, please refer to the Linux kernel documentation.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.entry_leader.tty.char_device.minor": {
      "description": "The minor number is used only by the driver specified by the major number; other parts of the kernel don\u2019t use it, and merely pass it along to the driver. It is common for a driver to control several devices; the minor number provides a way for the driver to differentiate among them.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.entry_leader.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.entry_leader.working_directory": {
      "description": "The working directory of the process.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.env_vars": {
      "description": "Array of environment variable bindings. Captured from a snapshot of the environment at the time of execution.\nMay be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.executable": {
      "description": "Absolute path to the process executable.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.exit_code": {
      "description": "The exit code of the process, if this is a termination event.\nThe field should be absent if there is no exit code for the event (e.g. process start).\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.group_leader.args": {
      "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.args_count": {
      "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.group_leader.command_line": {
      "description": "Full command line that started the process, including the absolute path to the executable, and all arguments.\nSome arguments may be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.executable": {
      "description": "Absolute path to the process executable.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.interactive": {
      "description": "Whether the process is connected to an interactive shell.\nProcess interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.\nNote: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.group_leader.name": {
      "description": "Process name.\nSometimes called program name or similar.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.group_leader.real_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.real_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.real_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.real_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.same_as_process": {
      "description": "This boolean is used to identify if a leader process is the same as the top level process.\nFor example, if `process.group_leader.same_as_process = true`, it means the process event in question is the leader of its process group. Details under `process.*` like `pid` would be the same under `process.group_leader.*` The same applies for both `process.session_leader` and `process.entry_leader`.\nThis field exists to the benefit of EQL and other rule engines since it's not possible to compare equality between two fields in a single document. e.g `process.entity_id` = `process.group_leader.entity_id` (top level process is the process group leader) OR `process.entity_id` = `process.entry_leader.entity_id` (top level process is the entry session leader)\nInstead these rules could be written like: `process.group_leader.same_as_process: true` OR `process.entry_leader.same_as_process: true`\nNote: This field is only set on `process.entry_leader`, `process.session_leader` and `process.group_leader`.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.group_leader.saved_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.saved_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.saved_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.saved_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.group_leader.supplemental_groups.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.supplemental_groups.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.tty": {
      "description": "Information about the controlling TTY device. If set, the process belongs to an interactive session.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.group_leader.tty.char_device.major": {
      "description": "The major number identifies the driver associated with the device. The character device's major and minor numbers can be algorithmically combined to produce the more familiar terminal identifiers such as \"ttyS0\" and \"pts/0\". For more details, please refer to the Linux kernel documentation.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.group_leader.tty.char_device.minor": {
      "description": "The minor number is used only by the driver specified by the major number; other parts of the kernel don\u2019t use it, and merely pass it along to the driver. It is common for a driver to control several devices; the minor number provides a way for the driver to differentiate among them.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.group_leader.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.group_leader.working_directory": {
      "description": "The working directory of the process.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.interactive": {
      "description": "Whether the process is connected to an interactive shell.\nProcess interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.\nNote: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.name": {
      "description": "Process name.\nSometimes called program name or similar.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.args": {
      "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.args_count": {
      "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.code_signature.digest_algorithm": {
      "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.code_signature.exists": {
      "description": "Boolean to capture if a signature is present.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.parent.code_signature.signing_id": {
      "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.code_signature.status": {
      "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.code_signature.subject_name": {
      "description": "Subject name of the code signer\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.code_signature.team_id": {
      "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.code_signature.timestamp": {
      "description": "Date and time when the code signature was generated and signed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.parent.code_signature.trusted": {
      "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.parent.code_signature.valid": {
      "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.parent.command_line": {
      "description": "Full command line that started the process, including the absolute path to the executable, and all arguments.\nSome arguments may be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.architecture": {
      "description": "Machine architecture of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.byte_order": {
      "description": "Byte sequence of ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.cpu_type": {
      "description": "CPU type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.creation_date": {
      "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.parent.elf.exports": {
      "description": "List of exported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.parent.elf.header.abi_version": {
      "description": "Version of the ELF Application Binary Interface (ABI).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.header.class": {
      "description": "Header class of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.header.data": {
      "description": "Data table of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.header.entrypoint": {
      "description": "Header entrypoint of the ELF file.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.elf.header.object_version": {
      "description": "\"0x1\" for original ELF files.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.header.os_abi": {
      "description": "Application Binary Interface (ABI) of the Linux OS.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.header.type": {
      "description": "Header type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.header.version": {
      "description": "Version of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.imports": {
      "description": "List of imported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.parent.elf.sections": {
      "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "process.parent.elf.sections.chi2": {
      "description": "Chi-square probability distribution of the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.elf.sections.entropy": {
      "description": "Shannon entropy calculation from the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.elf.sections.flags": {
      "description": "ELF Section List flags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.sections.name": {
      "description": "ELF Section List name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.sections.physical_offset": {
      "description": "ELF Section List offset.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.sections.physical_size": {
      "description": "ELF Section List physical size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.elf.sections.type": {
      "description": "ELF Section List type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.sections.virtual_address": {
      "description": "ELF Section List virtual address.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.elf.sections.virtual_size": {
      "description": "ELF Section List virtual size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.elf.segments": {
      "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "process.parent.elf.segments.sections": {
      "description": "ELF object segment sections.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.segments.type": {
      "description": "ELF object segment type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.shared_libraries": {
      "description": "List of shared libraries used by this ELF object.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.elf.telfhash": {
      "description": "telfhash symbol hash for ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.end": {
      "description": "The time the process ended.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.parent.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.executable": {
      "description": "Absolute path to the process executable.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.exit_code": {
      "description": "The exit code of the process, if this is a termination event.\nThe field should be absent if there is no exit code for the event (e.g. process start).\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.group_leader.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.group_leader.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.group_leader.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.parent.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.interactive": {
      "description": "Whether the process is connected to an interactive shell.\nProcess interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.\nNote: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.parent.name": {
      "description": "Process name.\nSometimes called program name or similar.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.architecture": {
      "description": "CPU architecture target for the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.company": {
      "description": "Internal company name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.description": {
      "description": "Internal description of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.file_version": {
      "description": "Internal version of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.imphash": {
      "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.original_file_name": {
      "description": "Internal name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.pehash": {
      "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pe.product": {
      "description": "Internal product name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.pgid": {
      "description": "Deprecated for removal in next major version release. This field is superseded by `process.group_leader.pid`.\nIdentifier of the group of processes the process belongs to.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.real_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.real_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.real_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.real_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.saved_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.saved_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.saved_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.saved_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.parent.supplemental_groups.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.supplemental_groups.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.thread.id": {
      "description": "Thread ID.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.thread.name": {
      "description": "Thread name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.title": {
      "description": "Process title.\nThe proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.tty": {
      "description": "Information about the controlling TTY device. If set, the process belongs to an interactive session.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.parent.tty.char_device.major": {
      "description": "The major number identifies the driver associated with the device. The character device's major and minor numbers can be algorithmically combined to produce the more familiar terminal identifiers such as \"ttyS0\" and \"pts/0\". For more details, please refer to the Linux kernel documentation.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.tty.char_device.minor": {
      "description": "The minor number is used only by the driver specified by the major number; other parts of the kernel don\u2019t use it, and merely pass it along to the driver. It is common for a driver to control several devices; the minor number provides a way for the driver to differentiate among them.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.uptime": {
      "description": "Seconds the process has been up.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.parent.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.parent.working_directory": {
      "description": "The working directory of the process.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.architecture": {
      "description": "CPU architecture target for the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.company": {
      "description": "Internal company name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.description": {
      "description": "Internal description of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.file_version": {
      "description": "Internal version of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.imphash": {
      "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.original_file_name": {
      "description": "Internal name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.pehash": {
      "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pe.product": {
      "description": "Internal product name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.pgid": {
      "description": "Deprecated for removal in next major version release. This field is superseded by `process.group_leader.pid`.\nIdentifier of the group of processes the process belongs to.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.previous.args": {
      "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.previous.args_count": {
      "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.previous.executable": {
      "description": "Absolute path to the process executable.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.real_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.real_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.real_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.real_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.saved_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.saved_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.saved_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.saved_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.args": {
      "description": "Array of process arguments, starting with the absolute path to the executable.\nMay be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.args_count": {
      "description": "Length of the process.args array.\nThis field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.session_leader.command_line": {
      "description": "Full command line that started the process, including the absolute path to the executable, and all arguments.\nSome arguments may be filtered to protect sensitive information.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.executable": {
      "description": "Absolute path to the process executable.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.interactive": {
      "description": "Whether the process is connected to an interactive shell.\nProcess interactivity is inferred from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.\nNote: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.session_leader.name": {
      "description": "Process name.\nSometimes called program name or similar.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.parent.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.parent.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.session_leader.parent.session_leader.entity_id": {
      "description": "Unique identifier for the process.\nThe implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.\nConstructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.parent.session_leader.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.session_leader.parent.session_leader.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.session_leader.parent.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.session_leader.pid": {
      "description": "Process id.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.session_leader.real_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.real_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.real_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.real_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.same_as_process": {
      "description": "This boolean is used to identify if a leader process is the same as the top level process.\nFor example, if `process.group_leader.same_as_process = true`, it means the process event in question is the leader of its process group. Details under `process.*` like `pid` would be the same under `process.group_leader.*` The same applies for both `process.session_leader` and `process.entry_leader`.\nThis field exists to the benefit of EQL and other rule engines since it's not possible to compare equality between two fields in a single document. e.g `process.entity_id` = `process.group_leader.entity_id` (top level process is the process group leader) OR `process.entity_id` = `process.entry_leader.entity_id` (top level process is the entry session leader)\nInstead these rules could be written like: `process.group_leader.same_as_process: true` OR `process.entry_leader.same_as_process: true`\nNote: This field is only set on `process.entry_leader`, `process.session_leader` and `process.group_leader`.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "process.session_leader.saved_group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.saved_group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.saved_user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.saved_user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.session_leader.supplemental_groups.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.supplemental_groups.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.tty": {
      "description": "Information about the controlling TTY device. If set, the process belongs to an interactive session.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.session_leader.tty.char_device.major": {
      "description": "The major number identifies the driver associated with the device. The character device's major and minor numbers can be algorithmically combined to produce the more familiar terminal identifiers such as \"ttyS0\" and \"pts/0\". For more details, please refer to the Linux kernel documentation.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.session_leader.tty.char_device.minor": {
      "description": "The minor number is used only by the driver specified by the major number; other parts of the kernel don\u2019t use it, and merely pass it along to the driver. It is common for a driver to control several devices; the minor number provides a way for the driver to differentiate among them.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.session_leader.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.session_leader.working_directory": {
      "description": "The working directory of the process.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.start": {
      "description": "The time the process started.\n\nECS type: date",
      "ecs_type": "date"
    },
    "process.supplemental_groups.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.supplemental_groups.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.thread.id": {
      "description": "Thread ID.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.thread.name": {
      "description": "Thread name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.title": {
      "description": "Process title.\nThe proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.tty": {
      "description": "Information about the controlling TTY device. If set, the process belongs to an interactive session.\n\nECS type: object",
      "ecs_type": "object"
    },
    "process.tty.char_device.major": {
      "description": "The major number identifies the driver associated with the device. The character device's major and minor numbers can be algorithmically combined to produce the more familiar terminal identifiers such as \"ttyS0\" and \"pts/0\". For more details, please refer to the Linux kernel documentation.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.tty.char_device.minor": {
      "description": "The minor number is used only by the driver specified by the major number; other parts of the kernel don\u2019t use it, and merely pass it along to the driver. It is common for a driver to control several devices; the minor number provides a way for the driver to differentiate among them.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.tty.columns": {
      "description": "The number of character columns per line. e.g terminal width\nTerminal sizes can change, so this value reflects the maximum value for a given IO event. i.e. where event.action = 'text_output'\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.tty.rows": {
      "description": "The number of character rows in the terminal. e.g terminal height\nTerminal sizes can change, so this value reflects the maximum value for a given IO event. i.e. where event.action = 'text_output'\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.uptime": {
      "description": "Seconds the process has been up.\n\nECS type: long",
      "ecs_type": "long"
    },
    "process.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "process.working_directory": {
      "description": "The working directory of the process.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "registry.data.bytes": {
      "description": "Original bytes written with base64 encoding.\nFor Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "registry.data.strings": {
      "description": "Content when writing string types.\nPopulated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `\"1\"`).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "registry.data.type": {
      "description": "Standard registry type for encoding contents\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "registry.hive": {
      "description": "Abbreviated name for the hive.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "registry.key": {
      "description": "Hive-relative path of keys.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "registry.path": {
      "description": "Full path, including hive, key and value\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "registry.value": {
      "description": "Name of the value written.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "related.hash": {
      "description": "All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "related.hosts": {
      "description": "All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "related.ip": {
      "description": "All of the IPs seen on your event.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "related.user": {
      "description": "All the user names or other user identifiers seen on the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.author": {
      "description": "Name, organization, or pseudonym of the author or authors who created the rule used to generate this event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.category": {
      "description": "A categorization value keyword used by the entity using the rule for detection of this event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.description": {
      "description": "The description of the rule generating the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.id": {
      "description": "A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.license": {
      "description": "Name of the license under which the rule used to generate this event is made available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.name": {
      "description": "The name of the rule or signature generating the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.reference": {
      "description": "Reference URL to additional information about the rule used to generate this event.\nThe URL can point to the vendor's documentation about the rule. If that's not available, it can also be a link to a more general page describing this type of alert.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.ruleset": {
      "description": "Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.uuid": {
      "description": "A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "rule.version": {
      "description": "The version / revision of the rule being used for analysis.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.address": {
      "description": "Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.as.number": {
      "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\nECS type: long",
      "ecs_type": "long"
    },
    "server.as.organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.bytes": {
      "description": "Bytes sent from the server to the client.\n\nECS type: long",
      "ecs_type": "long"
    },
    "server.domain": {
      "description": "The domain name of the server system.\nThis value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "server.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.ip": {
      "description": "IP address of the server (IPv4 or IPv6).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "server.mac": {
      "description": "MAC address of the server.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.nat.ip": {
      "description": "Translated ip of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "server.nat.port": {
      "description": "Translated port of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.\n\nECS type: long",
      "ecs_type": "long"
    },
    "server.packets": {
      "description": "Packets sent from the server to the client.\n\nECS type: long",
      "ecs_type": "long"
    },
    "server.port": {
      "description": "Port of the server.\n\nECS type: long",
      "ecs_type": "long"
    },
    "server.registered_domain": {
      "description": "The highest registered server domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "server.user.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "server.user.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "server.user.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "server.user.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "server.user.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.address": {
      "description": "Address where data about this service was collected from.\nThis should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.environment": {
      "description": "Identifies the environment where the service is running.\nIf the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.ephemeral_id": {
      "description": "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.id": {
      "description": "Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.\nThis id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.\nNote that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.name": {
      "description": "Name of the service data is collected from.\nThe name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.node.name": {
      "description": "Name of a service node.\nThis allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.\nIn the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.node.role": {
      "description": "Deprecated for removal in next major version release. This field will be superseded by `node.roles`.\nRole of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data`.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.node.roles": {
      "description": "Roles of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.address": {
      "description": "Address where data about this service was collected from.\nThis should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.environment": {
      "description": "Identifies the environment where the service is running.\nIf the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.ephemeral_id": {
      "description": "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.id": {
      "description": "Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.\nThis id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.\nNote that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.name": {
      "description": "Name of the service data is collected from.\nThe name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.node.name": {
      "description": "Name of a service node.\nThis allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.\nIn the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.node.role": {
      "description": "Deprecated for removal in next major version release. This field will be superseded by `node.roles`.\nRole of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data`.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.node.roles": {
      "description": "Roles of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.state": {
      "description": "Current state of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.type": {
      "description": "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.origin.version": {
      "description": "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.state": {
      "description": "Current state of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.address": {
      "description": "Address where data about this service was collected from.\nThis should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.environment": {
      "description": "Identifies the environment where the service is running.\nIf the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.ephemeral_id": {
      "description": "Ephemeral identifier of this service (if one exists).\nThis id normally changes across restarts, but `service.id` does not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.id": {
      "description": "Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes.\nThis id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event.\nNote that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.name": {
      "description": "Name of the service data is collected from.\nThe name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.\nIn the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.node.name": {
      "description": "Name of a service node.\nThis allows for two nodes of the same service running on the same host to be differentiated. Therefore, `service.node.name` should typically be unique across nodes of a given service.\nIn the case of Elasticsearch, the `service.node.name` could contain the unique node name within the Elasticsearch cluster. In cases where the service doesn't have the concept of a node name, the host name or container name can be used to distinguish running instances that make up this service. If those do not provide uniqueness (e.g. multiple instances of the service running on the same host) - the node name can be manually set.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.node.role": {
      "description": "Deprecated for removal in next major version release. This field will be superseded by `node.roles`.\nRole of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks`.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data`.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.node.roles": {
      "description": "Roles of a service node.\nThis allows for distinction between different running roles of the same service.\nIn the case of Kibana, the `service.node.role` could be `ui` or `background_tasks` or both.\nIn the case of Elasticsearch, the `service.node.role` could be `master` or `data` or both.\nOther services could use this to distinguish between a `web` and `worker` role running as part of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.state": {
      "description": "Current state of the service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.type": {
      "description": "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.target.version": {
      "description": "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.type": {
      "description": "The type of the service data is collected from.\nThe type can be used to group and correlate logs and metrics from one service type.\nExample: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "service.version": {
      "description": "Version of the service the data was collected from.\nThis allows to look at a data set only for a specific version of a service.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.address": {
      "description": "Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.\nThen it should be duplicated to `.ip` or `.domain`, depending on which one it is.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.as.number": {
      "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\nECS type: long",
      "ecs_type": "long"
    },
    "source.as.organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.bytes": {
      "description": "Bytes sent from the source to the destination.\n\nECS type: long",
      "ecs_type": "long"
    },
    "source.domain": {
      "description": "The domain name of the source system.\nThis value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "source.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.ip": {
      "description": "IP address of the source (IPv4 or IPv6).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "source.mac": {
      "description": "MAC address of the source.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.nat.ip": {
      "description": "Translated ip of source based NAT sessions (e.g. internal client to internet)\nTypically connections traversing load balancers, firewalls, or routers.\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "source.nat.port": {
      "description": "Translated port of source based NAT sessions. (e.g. internal client to internet)\nTypically used with load balancers, firewalls, or routers.\n\nECS type: long",
      "ecs_type": "long"
    },
    "source.packets": {
      "description": "Packets sent from the source to the destination.\n\nECS type: long",
      "ecs_type": "long"
    },
    "source.port": {
      "description": "Port of the source.\n\nECS type: long",
      "ecs_type": "long"
    },
    "source.registered_domain": {
      "description": "The highest registered source domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "source.user.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "source.user.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "source.user.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "source.user.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "source.user.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "span.id": {
      "description": "Unique identifier of the span within the scope of its trace.\nA span represents an operation within a transaction, such as a request to another service, or a database query.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tags": {
      "description": "List of keywords used to tag each event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments": {
      "description": "A list of associated indicators objects enriching the event, and the context of that association/enrichment.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "threat.enrichments.indicator": {
      "description": "Object containing associated indicators enriching the event.\n\nECS type: object",
      "ecs_type": "object"
    },
    "threat.enrichments.indicator.as.number": {
      "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.as.organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.confidence": {
      "description": "Identifies the vendor-neutral confidence rating using the None/Low/Medium/High scale defined in Appendix A of the STIX 2.1 framework. Vendor-specific confidence scales may be added as custom fields.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.description": {
      "description": "Describes the type of action conducted by the threat.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.email.address": {
      "description": "Identifies a threat indicator as an email address (irrespective of direction).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.accessed": {
      "description": "Last time the file was accessed.\nNote that not all filesystems keep track of access time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.attributes": {
      "description": "Array of file attributes.\nAttributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.code_signature.digest_algorithm": {
      "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.code_signature.exists": {
      "description": "Boolean to capture if a signature is present.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "threat.enrichments.indicator.file.code_signature.signing_id": {
      "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.code_signature.status": {
      "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.code_signature.subject_name": {
      "description": "Subject name of the code signer\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.code_signature.team_id": {
      "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.code_signature.timestamp": {
      "description": "Date and time when the code signature was generated and signed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.code_signature.trusted": {
      "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "threat.enrichments.indicator.file.code_signature.valid": {
      "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "threat.enrichments.indicator.file.created": {
      "description": "File creation time.\nNote that not all filesystems store the creation time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.ctime": {
      "description": "Last time the file attributes or metadata changed.\nNote that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.device": {
      "description": "Device that is the source of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.directory": {
      "description": "Directory where the file is located. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.drive_letter": {
      "description": "Drive letter where the file is located. This field is only relevant on Windows.\nThe value should be uppercase, and not include the colon.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.architecture": {
      "description": "Machine architecture of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.byte_order": {
      "description": "Byte sequence of ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.cpu_type": {
      "description": "CPU type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.creation_date": {
      "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.elf.exports": {
      "description": "List of exported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "threat.enrichments.indicator.file.elf.header.abi_version": {
      "description": "Version of the ELF Application Binary Interface (ABI).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.header.class": {
      "description": "Header class of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.header.data": {
      "description": "Data table of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.header.entrypoint": {
      "description": "Header entrypoint of the ELF file.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.elf.header.object_version": {
      "description": "\"0x1\" for original ELF files.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.header.os_abi": {
      "description": "Application Binary Interface (ABI) of the Linux OS.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.header.type": {
      "description": "Header type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.header.version": {
      "description": "Version of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.imports": {
      "description": "List of imported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "threat.enrichments.indicator.file.elf.sections": {
      "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "threat.enrichments.indicator.file.elf.sections.chi2": {
      "description": "Chi-square probability distribution of the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.elf.sections.entropy": {
      "description": "Shannon entropy calculation from the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.elf.sections.flags": {
      "description": "ELF Section List flags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.sections.name": {
      "description": "ELF Section List name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.sections.physical_offset": {
      "description": "ELF Section List offset.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.sections.physical_size": {
      "description": "ELF Section List physical size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.elf.sections.type": {
      "description": "ELF Section List type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.sections.virtual_address": {
      "description": "ELF Section List virtual address.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.elf.sections.virtual_size": {
      "description": "ELF Section List virtual size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.elf.segments": {
      "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "threat.enrichments.indicator.file.elf.segments.sections": {
      "description": "ELF object segment sections.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.segments.type": {
      "description": "ELF object segment type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.shared_libraries": {
      "description": "List of shared libraries used by this ELF object.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.elf.telfhash": {
      "description": "telfhash symbol hash for ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.extension": {
      "description": "File extension, excluding the leading dot.\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.fork_name": {
      "description": "A fork is additional data associated with a filesystem object.\nOn Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.\nOn NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\\path\\to\\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.gid": {
      "description": "Primary group ID (GID) of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.group": {
      "description": "Primary group name of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.inode": {
      "description": "Inode representing the file in the filesystem.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.mime_type": {
      "description": "MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.mode": {
      "description": "Mode of the file in octal representation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.mtime": {
      "description": "Last time the file content was modified.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.name": {
      "description": "Name of the file including the extension, without the directory.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.owner": {
      "description": "File owner's username.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.path": {
      "description": "Full path to the file, including the file name. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.architecture": {
      "description": "CPU architecture target for the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.company": {
      "description": "Internal company name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.description": {
      "description": "Internal description of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.file_version": {
      "description": "Internal version of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.imphash": {
      "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.original_file_name": {
      "description": "Internal name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.pehash": {
      "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.pe.product": {
      "description": "Internal product name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.size": {
      "description": "File size in bytes.\nOnly relevant when `file.type` is \"file\".\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.target_path": {
      "description": "Target path for symlinks.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.type": {
      "description": "File type (file, dir, or symlink).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.uid": {
      "description": "The user ID (UID) or security identifier (SID) of the file owner.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.file.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.file.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.file.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.first_seen": {
      "description": "The date and time when intelligence source first reported sighting this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "threat.enrichments.indicator.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.ip": {
      "description": "Identifies a threat indicator as an IP address (irrespective of direction).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "threat.enrichments.indicator.last_seen": {
      "description": "The date and time when intelligence source last reported sighting this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.marking.tlp": {
      "description": "Traffic Light Protocol sharing markings.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.modified_at": {
      "description": "The date and time when intelligence source last modified information for this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.port": {
      "description": "Identifies a threat indicator as a port number (irrespective of direction).\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.provider": {
      "description": "The name of the indicator's provider.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.reference": {
      "description": "Reference URL linking to additional information about this indicator.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.registry.data.bytes": {
      "description": "Original bytes written with base64 encoding.\nFor Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.registry.data.strings": {
      "description": "Content when writing string types.\nPopulated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `\"1\"`).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.registry.data.type": {
      "description": "Standard registry type for encoding contents\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.registry.hive": {
      "description": "Abbreviated name for the hive.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.registry.key": {
      "description": "Hive-relative path of keys.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.registry.path": {
      "description": "Full path, including hive, key and value\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.registry.value": {
      "description": "Name of the value written.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.scanner_stats": {
      "description": "Count of AV/EDR vendors that successfully detected malicious file or URL.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.sightings": {
      "description": "Number of times this indicator was observed conducting threat activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.type": {
      "description": "Type of indicator as represented by Cyber Observable in STIX 2.0.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.domain": {
      "description": "Domain of the url, such as \"www.elastic.co\".\nIn some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.\nIf the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.extension": {
      "description": "The field contains the file extension from the original request url, excluding the leading dot.\nThe file extension is only set if it exists, as not every url has a file extension.\nThe leading period must not be included. For example, the value must be \"png\", not \".png\".\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.fragment": {
      "description": "Portion of the url after the `#`, such as \"top\".\nThe `#` is not part of the fragment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.full": {
      "description": "If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.original": {
      "description": "Unmodified original url as seen in the event source.\nNote that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.\nThis field is meant to represent the URL as it was observed, complete or not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.password": {
      "description": "Password of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.path": {
      "description": "Path of the request, such as \"/search\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.port": {
      "description": "Port of the request, such as 443.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.url.query": {
      "description": "The query field describes the query string of the request, such as \"q=elasticsearch\".\nThe `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.registered_domain": {
      "description": "The highest registered url domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.scheme": {
      "description": "Scheme of the request, such as \"https\".\nNote: The `:` is not part of the scheme.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.url.username": {
      "description": "Username of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.indicator.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.enrichments.indicator.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.indicator.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.matched.atomic": {
      "description": "Identifies the atomic indicator value that matched a local environment endpoint or network event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.matched.field": {
      "description": "Identifies the field of the atomic indicator that matched a local environment endpoint or network event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.matched.id": {
      "description": "Identifies the _id of the indicator document enriching the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.matched.index": {
      "description": "Identifies the _index of the indicator document enriching the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.enrichments.matched.occurred": {
      "description": "Indicates when the indicator match was generated\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.enrichments.matched.type": {
      "description": "Identifies the type of match that caused the event to be enriched with the given indicator\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.feed.dashboard_id": {
      "description": "The saved object ID of the dashboard belonging to the threat feed for displaying dashboard links to threat feeds in Kibana.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.feed.description": {
      "description": "Description of the threat feed in a UI friendly format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.feed.name": {
      "description": "The name of the threat feed in UI friendly format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.feed.reference": {
      "description": "Reference information for the threat feed in a UI friendly format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.framework": {
      "description": "Name of the threat framework used to further categorize and classify the tactic and technique of the reported threat. Framework classification can be provided by detecting systems, evaluated at ingest time, or retrospectively tagged to events.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.group.alias": {
      "description": "The alias(es) of the group for a set of related intrusion activity that are tracked by a common name in the security community.\nWhile not required, you can use a MITRE ATT&CK\u00ae group alias(es).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.group.id": {
      "description": "The id of the group for a set of related intrusion activity that are tracked by a common name in the security community.\nWhile not required, you can use a MITRE ATT&CK\u00ae group id.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.group.name": {
      "description": "The name of the group for a set of related intrusion activity that are tracked by a common name in the security community.\nWhile not required, you can use a MITRE ATT&CK\u00ae group name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.group.reference": {
      "description": "The reference URL of the group for a set of related intrusion activity that are tracked by a common name in the security community.\nWhile not required, you can use a MITRE ATT&CK\u00ae group reference URL.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.as.number": {
      "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.as.organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.confidence": {
      "description": "Identifies the vendor-neutral confidence rating using the None/Low/Medium/High scale defined in Appendix A of the STIX 2.1 framework. Vendor-specific confidence scales may be added as custom fields.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.description": {
      "description": "Describes the type of action conducted by the threat.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.email.address": {
      "description": "Identifies a threat indicator as an email address (irrespective of direction).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.accessed": {
      "description": "Last time the file was accessed.\nNote that not all filesystems keep track of access time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.attributes": {
      "description": "Array of file attributes.\nAttributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.code_signature.digest_algorithm": {
      "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.code_signature.exists": {
      "description": "Boolean to capture if a signature is present.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "threat.indicator.file.code_signature.signing_id": {
      "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.code_signature.status": {
      "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.code_signature.subject_name": {
      "description": "Subject name of the code signer\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.code_signature.team_id": {
      "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.code_signature.timestamp": {
      "description": "Date and time when the code signature was generated and signed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.code_signature.trusted": {
      "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "threat.indicator.file.code_signature.valid": {
      "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "threat.indicator.file.created": {
      "description": "File creation time.\nNote that not all filesystems store the creation time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.ctime": {
      "description": "Last time the file attributes or metadata changed.\nNote that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.device": {
      "description": "Device that is the source of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.directory": {
      "description": "Directory where the file is located. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.drive_letter": {
      "description": "Drive letter where the file is located. This field is only relevant on Windows.\nThe value should be uppercase, and not include the colon.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.architecture": {
      "description": "Machine architecture of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.byte_order": {
      "description": "Byte sequence of ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.cpu_type": {
      "description": "CPU type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.creation_date": {
      "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.elf.exports": {
      "description": "List of exported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "threat.indicator.file.elf.header.abi_version": {
      "description": "Version of the ELF Application Binary Interface (ABI).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.header.class": {
      "description": "Header class of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.header.data": {
      "description": "Data table of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.header.entrypoint": {
      "description": "Header entrypoint of the ELF file.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.elf.header.object_version": {
      "description": "\"0x1\" for original ELF files.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.header.os_abi": {
      "description": "Application Binary Interface (ABI) of the Linux OS.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.header.type": {
      "description": "Header type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.header.version": {
      "description": "Version of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.imports": {
      "description": "List of imported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "threat.indicator.file.elf.sections": {
      "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "threat.indicator.file.elf.sections.chi2": {
      "description": "Chi-square probability distribution of the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.elf.sections.entropy": {
      "description": "Shannon entropy calculation from the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.elf.sections.flags": {
      "description": "ELF Section List flags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.sections.name": {
      "description": "ELF Section List name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.sections.physical_offset": {
      "description": "ELF Section List offset.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.sections.physical_size": {
      "description": "ELF Section List physical size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.elf.sections.type": {
      "description": "ELF Section List type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.sections.virtual_address": {
      "description": "ELF Section List virtual address.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.elf.sections.virtual_size": {
      "description": "ELF Section List virtual size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.elf.segments": {
      "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "threat.indicator.file.elf.segments.sections": {
      "description": "ELF object segment sections.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.segments.type": {
      "description": "ELF object segment type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.shared_libraries": {
      "description": "List of shared libraries used by this ELF object.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.elf.telfhash": {
      "description": "telfhash symbol hash for ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.extension": {
      "description": "File extension, excluding the leading dot.\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.fork_name": {
      "description": "A fork is additional data associated with a filesystem object.\nOn Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.\nOn NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\\path\\to\\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.gid": {
      "description": "Primary group ID (GID) of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.group": {
      "description": "Primary group name of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.inode": {
      "description": "Inode representing the file in the filesystem.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.mime_type": {
      "description": "MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.mode": {
      "description": "Mode of the file in octal representation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.mtime": {
      "description": "Last time the file content was modified.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.name": {
      "description": "Name of the file including the extension, without the directory.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.owner": {
      "description": "File owner's username.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.path": {
      "description": "Full path to the file, including the file name. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.architecture": {
      "description": "CPU architecture target for the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.company": {
      "description": "Internal company name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.description": {
      "description": "Internal description of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.file_version": {
      "description": "Internal version of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.imphash": {
      "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.original_file_name": {
      "description": "Internal name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.pehash": {
      "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.pe.product": {
      "description": "Internal product name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.size": {
      "description": "File size in bytes.\nOnly relevant when `file.type` is \"file\".\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.target_path": {
      "description": "Target path for symlinks.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.type": {
      "description": "File type (file, dir, or symlink).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.uid": {
      "description": "The user ID (UID) or security identifier (SID) of the file owner.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.file.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.file.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.file.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.first_seen": {
      "description": "The date and time when intelligence source first reported sighting this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "threat.indicator.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.ip": {
      "description": "Identifies a threat indicator as an IP address (irrespective of direction).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "threat.indicator.last_seen": {
      "description": "The date and time when intelligence source last reported sighting this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.marking.tlp": {
      "description": "Traffic Light Protocol sharing markings.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.modified_at": {
      "description": "The date and time when intelligence source last modified information for this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.port": {
      "description": "Identifies a threat indicator as a port number (irrespective of direction).\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.provider": {
      "description": "The name of the indicator's provider.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.reference": {
      "description": "Reference URL linking to additional information about this indicator.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.registry.data.bytes": {
      "description": "Original bytes written with base64 encoding.\nFor Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.registry.data.strings": {
      "description": "Content when writing string types.\nPopulated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `\"1\"`).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.registry.data.type": {
      "description": "Standard registry type for encoding contents\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.registry.hive": {
      "description": "Abbreviated name for the hive.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.registry.key": {
      "description": "Hive-relative path of keys.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.registry.path": {
      "description": "Full path, including hive, key and value\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.registry.value": {
      "description": "Name of the value written.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.scanner_stats": {
      "description": "Count of AV/EDR vendors that successfully detected malicious file or URL.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.sightings": {
      "description": "Number of times this indicator was observed conducting threat activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.type": {
      "description": "Type of indicator as represented by Cyber Observable in STIX 2.0.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.domain": {
      "description": "Domain of the url, such as \"www.elastic.co\".\nIn some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.\nIf the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.extension": {
      "description": "The field contains the file extension from the original request url, excluding the leading dot.\nThe file extension is only set if it exists, as not every url has a file extension.\nThe leading period must not be included. For example, the value must be \"png\", not \".png\".\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.fragment": {
      "description": "Portion of the url after the `#`, such as \"top\".\nThe `#` is not part of the fragment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.full": {
      "description": "If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.original": {
      "description": "Unmodified original url as seen in the event source.\nNote that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.\nThis field is meant to represent the URL as it was observed, complete or not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.password": {
      "description": "Password of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.path": {
      "description": "Path of the request, such as \"/search\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.port": {
      "description": "Port of the request, such as 443.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.url.query": {
      "description": "The query field describes the query string of the request, such as \"q=elasticsearch\".\nThe `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.registered_domain": {
      "description": "The highest registered url domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.scheme": {
      "description": "Scheme of the request, such as \"https\".\nNote: The `:` is not part of the scheme.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.url.username": {
      "description": "Username of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "threat.indicator.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "threat.indicator.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.indicator.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.software.alias": {
      "description": "The alias(es) of the software for a set of related intrusion activity that are tracked by a common name in the security community.\nWhile not required, you can use a MITRE ATT&CK\u00ae associated software description.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.software.id": {
      "description": "The id of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&CK\u00ae.\nWhile not required, you can use a MITRE ATT&CK\u00ae software id.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.software.name": {
      "description": "The name of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&CK\u00ae.\nWhile not required, you can use a MITRE ATT&CK\u00ae software name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.software.platforms": {
      "description": "The platforms of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&CK\u00ae.\nWhile not required, you can use MITRE ATT&CK\u00ae software platform values.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.software.reference": {
      "description": "The reference URL of the software used by this threat to conduct behavior commonly modeled using MITRE ATT&CK\u00ae.\nWhile not required, you can use a MITRE ATT&CK\u00ae software reference URL.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.software.type": {
      "description": "The type of software used by this threat to conduct behavior commonly modeled using MITRE ATT&CK\u00ae.\nWhile not required, you can use a MITRE ATT&CK\u00ae software type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.tactic.id": {
      "description": "The id of tactic used by this threat. You can use a MITRE ATT&CK\u00ae tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.tactic.name": {
      "description": "Name of the type of tactic used by this threat. You can use a MITRE ATT&CK\u00ae tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.tactic.reference": {
      "description": "The reference url of tactic used by this threat. You can use a MITRE ATT&CK\u00ae tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.technique.id": {
      "description": "The id of technique used by this threat. You can use a MITRE ATT&CK\u00ae technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.technique.name": {
      "description": "The name of technique used by this threat. You can use a MITRE ATT&CK\u00ae technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.technique.reference": {
      "description": "The reference url of technique used by this threat. You can use a MITRE ATT&CK\u00ae technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.technique.subtechnique.id": {
      "description": "The full id of subtechnique used by this threat. You can use a MITRE ATT&CK\u00ae subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.technique.subtechnique.name": {
      "description": "The name of subtechnique used by this threat. You can use a MITRE ATT&CK\u00ae subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "threat.technique.subtechnique.reference": {
      "description": "The reference url of subtechnique used by this threat. You can use a MITRE ATT&CK\u00ae subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.cipher": {
      "description": "String indicating the cipher used during the current connection.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.certificate": {
      "description": "PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.certificate_chain": {
      "description": "Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.hash.md5": {
      "description": "Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.hash.sha1": {
      "description": "Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.hash.sha256": {
      "description": "Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.issuer": {
      "description": "Distinguished name of subject of the issuer of the x.509 certificate presented by the client.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.ja3": {
      "description": "A hash that identifies clients based on how they perform an SSL/TLS handshake.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.not_after": {
      "description": "Date/Time indicating when client certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.client.not_before": {
      "description": "Date/Time indicating when client certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.client.server_name": {
      "description": "Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain`.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.subject": {
      "description": "Distinguished name of subject of the x.509 certificate presented by the client.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.supported_ciphers": {
      "description": "Array of ciphers offered by the client during the client hello.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.client.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.client.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "tls.client.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "tls.client.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.client.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.curve": {
      "description": "String indicating the curve used for the given cipher, when applicable.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.established": {
      "description": "Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "tls.next_protocol": {
      "description": "String indicating the protocol being tunneled. Per the values in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.resumed": {
      "description": "Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "tls.server.certificate": {
      "description": "PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.certificate_chain": {
      "description": "Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.hash.md5": {
      "description": "Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.hash.sha1": {
      "description": "Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.hash.sha256": {
      "description": "Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.issuer": {
      "description": "Subject of the issuer of the x.509 certificate presented by the server.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.ja3s": {
      "description": "A hash that identifies servers based on how they perform an SSL/TLS handshake.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.not_after": {
      "description": "Timestamp indicating when server certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.server.not_before": {
      "description": "Timestamp indicating when server certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.server.subject": {
      "description": "Subject of the x.509 certificate presented by the server.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.server.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "tls.server.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "tls.server.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "tls.server.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.server.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.version": {
      "description": "Numeric part of the version parsed from the original string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "tls.version_protocol": {
      "description": "Normalized lowercase protocol name parsed from original string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "trace.id": {
      "description": "Unique identifier of the trace.\nA trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "transaction.id": {
      "description": "Unique identifier of the transaction within the scope of its trace.\nA transaction is the highest level of work measured within a service, such as a request to a server.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.domain": {
      "description": "Domain of the url, such as \"www.elastic.co\".\nIn some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.\nIf the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.extension": {
      "description": "The field contains the file extension from the original request url, excluding the leading dot.\nThe file extension is only set if it exists, as not every url has a file extension.\nThe leading period must not be included. For example, the value must be \"png\", not \".png\".\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.fragment": {
      "description": "Portion of the url after the `#`, such as \"top\".\nThe `#` is not part of the fragment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.full": {
      "description": "If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.original": {
      "description": "Unmodified original url as seen in the event source.\nNote that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.\nThis field is meant to represent the URL as it was observed, complete or not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.password": {
      "description": "Password of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.path": {
      "description": "Path of the request, such as \"/search\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.port": {
      "description": "Port of the request, such as 443.\n\nECS type: long",
      "ecs_type": "long"
    },
    "url.query": {
      "description": "The query field describes the query string of the request, such as \"q=elasticsearch\".\nThe `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.registered_domain": {
      "description": "The highest registered url domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.scheme": {
      "description": "Scheme of the request, such as \"https\".\nNote: The `:` is not part of the scheme.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "url.username": {
      "description": "Username of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.changes.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.changes.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.changes.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.changes.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.changes.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.effective.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.effective.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.effective.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.effective.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.effective.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.domain": {
      "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.email": {
      "description": "User email address.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.full_name": {
      "description": "User's full name, if available.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.group.domain": {
      "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.group.id": {
      "description": "Unique identifier for the group on the system/platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.group.name": {
      "description": "Name of the group.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.hash": {
      "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.id": {
      "description": "Unique identifier of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.name": {
      "description": "Short name or login of the user.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.risk.calculated_level": {
      "description": "A risk classification level calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.risk.calculated_score": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.target.risk.calculated_score_norm": {
      "description": "A risk classification score calculated by an internal system as part of entity analytics and entity risk scoring, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.target.risk.static_level": {
      "description": "A risk classification level obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user.target.risk.static_score": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.target.risk.static_score_norm": {
      "description": "A risk classification score obtained from outside the system, such as from some external Threat Intelligence Platform, and normalized to a range of 0 to 100.\n\nECS type: float",
      "ecs_type": "float"
    },
    "user.target.roles": {
      "description": "Array of user roles at the time of the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.device.name": {
      "description": "Name of the device.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.name": {
      "description": "Name of the user agent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.original": {
      "description": "Unparsed user_agent string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.os.family": {
      "description": "OS family (such as redhat, debian, freebsd, windows).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.os.full": {
      "description": "Operating system name, including the version or code name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.os.kernel": {
      "description": "Operating system kernel version as a raw string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.os.name": {
      "description": "Operating system name, without the version.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.os.platform": {
      "description": "Operating system platform (such centos, ubuntu, windows).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.os.type": {
      "description": "Use the `os.type` field to categorize the operating system into one of the broad commercial families.\nIf the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.os.version": {
      "description": "Operating system version as a raw string.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "user_agent.version": {
      "description": "Version of the user agent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.category": {
      "description": "The type of system or architecture that the vulnerability affects. These may be platform-specific (for example, Debian or SUSE) or general (for example, Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys vulnerability categories])\nThis field must be an array.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.classification": {
      "description": "The classification of the vulnerability scoring system. For example (https://www.first.org/cvss/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.description": {
      "description": "The description of the vulnerability that provides additional context of the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common Vulnerabilities and Exposure CVE description])\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.enumeration": {
      "description": "The type of identifier used for this vulnerability. For example (https://cve.mitre.org/about/)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.id": {
      "description": "The identification (ID) is the number portion of a vulnerability entry. It includes a unique identification number for the vulnerability. For example (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities and Exposure CVE ID]\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.reference": {
      "description": "A resource that provides additional information, context, and mitigations for the identified vulnerability.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.report_id": {
      "description": "The report or scan identification number.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.scanner.vendor": {
      "description": "The name of the vulnerability scanner vendor.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.score.base": {
      "description": "Scores can range from 0.0 to 10.0, with 10.0 being the most severe.\nBase scores cover an assessment for exploitability metrics (attack vector, complexity, privileges, and user interaction), impact metrics (confidentiality, integrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)\n\nECS type: float",
      "ecs_type": "float"
    },
    "vulnerability.score.environmental": {
      "description": "Scores can range from 0.0 to 10.0, with 10.0 being the most severe.\nEnvironmental scores cover an assessment for any modified Base metrics, confidentiality, integrity, and availability requirements. For example (https://www.first.org/cvss/specification-document)\n\nECS type: float",
      "ecs_type": "float"
    },
    "vulnerability.score.temporal": {
      "description": "Scores can range from 0.0 to 10.0, with 10.0 being the most severe.\nTemporal scores cover an assessment for code maturity, remediation level, and confidence. For example (https://www.first.org/cvss/specification-document)\n\nECS type: float",
      "ecs_type": "float"
    },
    "vulnerability.score.version": {
      "description": "The National Vulnerability Database (NVD) provides qualitative severity rankings of \"Low\", \"Medium\", and \"High\" for CVSS v2.0 base score ranges in addition to the severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0 specification.\nCVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit organization, whose mission is to help computer security incident response teams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "vulnerability.severity": {
      "description": "The severity of the vulnerability can help with metrics and internal prioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator": {
      "description": "Object containing associated indicators enriching the event.\n\nECS type: object",
      "ecs_type": "object"
    },
    "~enrichment.indicator.as.number": {
      "description": "Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.as.organization.name": {
      "description": "Organization name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.confidence": {
      "description": "Identifies the vendor-neutral confidence rating using the None/Low/Medium/High scale defined in Appendix A of the STIX 2.1 framework. Vendor-specific confidence scales may be added as custom fields.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.description": {
      "description": "Describes the type of action conducted by the threat.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.email.address": {
      "description": "Identifies a threat indicator as an email address (irrespective of direction).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.accessed": {
      "description": "Last time the file was accessed.\nNote that not all filesystems keep track of access time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.attributes": {
      "description": "Array of file attributes.\nAttributes names will vary by platform. Here's a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.code_signature.digest_algorithm": {
      "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.code_signature.exists": {
      "description": "Boolean to capture if a signature is present.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "~enrichment.indicator.file.code_signature.signing_id": {
      "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.code_signature.status": {
      "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.code_signature.subject_name": {
      "description": "Subject name of the code signer\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.code_signature.team_id": {
      "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.code_signature.timestamp": {
      "description": "Date and time when the code signature was generated and signed.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.code_signature.trusted": {
      "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "~enrichment.indicator.file.code_signature.valid": {
      "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.\n\nECS type: boolean",
      "ecs_type": "boolean"
    },
    "~enrichment.indicator.file.created": {
      "description": "File creation time.\nNote that not all filesystems store the creation time.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.ctime": {
      "description": "Last time the file attributes or metadata changed.\nNote that changes to the file content will update `mtime`. This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.device": {
      "description": "Device that is the source of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.directory": {
      "description": "Directory where the file is located. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.drive_letter": {
      "description": "Drive letter where the file is located. This field is only relevant on Windows.\nThe value should be uppercase, and not include the colon.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.architecture": {
      "description": "Machine architecture of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.byte_order": {
      "description": "Byte sequence of ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.cpu_type": {
      "description": "CPU type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.creation_date": {
      "description": "Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can also be faked by malware creators.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.elf.exports": {
      "description": "List of exported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "~enrichment.indicator.file.elf.header.abi_version": {
      "description": "Version of the ELF Application Binary Interface (ABI).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.header.class": {
      "description": "Header class of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.header.data": {
      "description": "Data table of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.header.entrypoint": {
      "description": "Header entrypoint of the ELF file.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.elf.header.object_version": {
      "description": "\"0x1\" for original ELF files.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.header.os_abi": {
      "description": "Application Binary Interface (ABI) of the Linux OS.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.header.type": {
      "description": "Header type of the ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.header.version": {
      "description": "Version of the ELF header.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.imports": {
      "description": "List of imported element names and types.\n\nECS type: object",
      "ecs_type": "object"
    },
    "~enrichment.indicator.file.elf.sections": {
      "description": "An array containing an object for each section of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "~enrichment.indicator.file.elf.sections.chi2": {
      "description": "Chi-square probability distribution of the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.elf.sections.entropy": {
      "description": "Shannon entropy calculation from the section.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.elf.sections.flags": {
      "description": "ELF Section List flags.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.sections.name": {
      "description": "ELF Section List name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.sections.physical_offset": {
      "description": "ELF Section List offset.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.sections.physical_size": {
      "description": "ELF Section List physical size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.elf.sections.type": {
      "description": "ELF Section List type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.sections.virtual_address": {
      "description": "ELF Section List virtual address.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.elf.sections.virtual_size": {
      "description": "ELF Section List virtual size.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.elf.segments": {
      "description": "An array containing an object for each segment of the ELF file.\nThe keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*`.\n\nECS type: nested",
      "ecs_type": "nested"
    },
    "~enrichment.indicator.file.elf.segments.sections": {
      "description": "ELF object segment sections.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.segments.type": {
      "description": "ELF object segment type.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.shared_libraries": {
      "description": "List of shared libraries used by this ELF object.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.elf.telfhash": {
      "description": "telfhash symbol hash for ELF file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.extension": {
      "description": "File extension, excluding the leading dot.\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.fork_name": {
      "description": "A fork is additional data associated with a filesystem object.\nOn Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.\nOn NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\\path\\to\\filename.extension:some_fork_name`, and `some_fork_name` is the value that should populate `fork_name`. `filename.extension` should populate `file.name`, and `extension` should populate `file.extension`. The full path, `file.path`, will include the fork name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.gid": {
      "description": "Primary group ID (GID) of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.group": {
      "description": "Primary group name of the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.hash.md5": {
      "description": "MD5 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.hash.sha1": {
      "description": "SHA1 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.hash.sha256": {
      "description": "SHA256 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.hash.sha384": {
      "description": "SHA384 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.hash.sha512": {
      "description": "SHA512 hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.hash.ssdeep": {
      "description": "SSDEEP hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.hash.tlsh": {
      "description": "TLSH hash.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.inode": {
      "description": "Inode representing the file in the filesystem.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.mime_type": {
      "description": "MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.mode": {
      "description": "Mode of the file in octal representation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.mtime": {
      "description": "Last time the file content was modified.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.name": {
      "description": "Name of the file including the extension, without the directory.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.owner": {
      "description": "File owner's username.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.path": {
      "description": "Full path to the file, including the file name. It should include the drive letter, when appropriate.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.architecture": {
      "description": "CPU architecture target for the file.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.company": {
      "description": "Internal company name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.description": {
      "description": "Internal description of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.file_version": {
      "description": "Internal version of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.imphash": {
      "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.original_file_name": {
      "description": "Internal name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.pehash": {
      "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.pe.product": {
      "description": "Internal product name of the file, provided at compile-time.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.size": {
      "description": "File size in bytes.\nOnly relevant when `file.type` is \"file\".\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.target_path": {
      "description": "Target path for symlinks.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.type": {
      "description": "File type (file, dir, or symlink).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.uid": {
      "description": "The user ID (UID) or security identifier (SID) of the file owner.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.file.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.file.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.file.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.first_seen": {
      "description": "The date and time when intelligence source first reported sighting this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.geo.city_name": {
      "description": "City name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.continent_code": {
      "description": "Two-letter code representing continent's name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.continent_name": {
      "description": "Name of the continent.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.country_iso_code": {
      "description": "Country ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.country_name": {
      "description": "Country name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.location": {
      "description": "Longitude and latitude.\n\nECS type: geo_point",
      "ecs_type": "geo_point"
    },
    "~enrichment.indicator.geo.name": {
      "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.postal_code": {
      "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.region_iso_code": {
      "description": "Region ISO code.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.region_name": {
      "description": "Region name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.geo.timezone": {
      "description": "The time zone of the location, such as IANA time zone name.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.ip": {
      "description": "Identifies a threat indicator as an IP address (irrespective of direction).\n\nECS type: ip",
      "ecs_type": "ip"
    },
    "~enrichment.indicator.last_seen": {
      "description": "The date and time when intelligence source last reported sighting this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.marking.tlp": {
      "description": "Traffic Light Protocol sharing markings.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.modified_at": {
      "description": "The date and time when intelligence source last modified information for this indicator.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.port": {
      "description": "Identifies a threat indicator as a port number (irrespective of direction).\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.provider": {
      "description": "The name of the indicator's provider.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.reference": {
      "description": "Reference URL linking to additional information about this indicator.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.registry.data.bytes": {
      "description": "Original bytes written with base64 encoding.\nFor Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data`. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.registry.data.strings": {
      "description": "Content when writing string types.\nPopulated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `\"1\"`).\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.registry.data.type": {
      "description": "Standard registry type for encoding contents\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.registry.hive": {
      "description": "Abbreviated name for the hive.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.registry.key": {
      "description": "Hive-relative path of keys.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.registry.path": {
      "description": "Full path, including hive, key and value\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.registry.value": {
      "description": "Name of the value written.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.scanner_stats": {
      "description": "Count of AV/EDR vendors that successfully detected malicious file or URL.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.sightings": {
      "description": "Number of times this indicator was observed conducting threat activity.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.type": {
      "description": "Type of indicator as represented by Cyber Observable in STIX 2.0.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.domain": {
      "description": "Domain of the url, such as \"www.elastic.co\".\nIn some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.\nIf the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.extension": {
      "description": "The field contains the file extension from the original request url, excluding the leading dot.\nThe file extension is only set if it exists, as not every url has a file extension.\nThe leading period must not be included. For example, the value must be \"png\", not \".png\".\nNote that when the file name has multiple extensions (example.tar.gz), only the last one should be captured (\"gz\", not \"tar.gz\").\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.fragment": {
      "description": "Portion of the url after the `#`, such as \"top\".\nThe `#` is not part of the fragment.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.full": {
      "description": "If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.original": {
      "description": "Unmodified original url as seen in the event source.\nNote that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.\nThis field is meant to represent the URL as it was observed, complete or not.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.password": {
      "description": "Password of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.path": {
      "description": "Path of the request, such as \"/search\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.port": {
      "description": "Port of the request, such as 443.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.url.query": {
      "description": "The query field describes the query string of the request, such as \"q=elasticsearch\".\nThe `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.registered_domain": {
      "description": "The highest registered url domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.scheme": {
      "description": "Scheme of the request, such as \"https\".\nNote: The `:` is not part of the scheme.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.subdomain": {
      "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.top_level_domain": {
      "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.url.username": {
      "description": "Username of the request.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.alternative_names": {
      "description": "List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.issuer.common_name": {
      "description": "List of common name (CN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.issuer.country": {
      "description": "List of country \\(C) codes\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.issuer.distinguished_name": {
      "description": "Distinguished name (DN) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.issuer.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.issuer.organization": {
      "description": "List of organizations (O) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.issuer.organizational_unit": {
      "description": "List of organizational units (OU) of issuing certificate authority.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.issuer.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.not_after": {
      "description": "Time at which the certificate is no longer considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.x509.not_before": {
      "description": "Time at which the certificate is first considered valid.\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.indicator.x509.public_key_algorithm": {
      "description": "Algorithm used to generate the public key.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.public_key_curve": {
      "description": "The curve used by the elliptic curve public key algorithm. This is algorithm specific.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.public_key_exponent": {
      "description": "Exponent used to derive the public key. This is algorithm specific.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.x509.public_key_size": {
      "description": "The size of the public key space in bits.\n\nECS type: long",
      "ecs_type": "long"
    },
    "~enrichment.indicator.x509.serial_number": {
      "description": "Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.signature_algorithm": {
      "description": "Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.subject.common_name": {
      "description": "List of common names (CN) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.subject.country": {
      "description": "List of country \\(C) code\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.subject.distinguished_name": {
      "description": "Distinguished name (DN) of the certificate subject entity.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.subject.locality": {
      "description": "List of locality names (L)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.subject.organization": {
      "description": "List of organizations (O) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.subject.organizational_unit": {
      "description": "List of organizational units (OU) of subject.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.subject.state_or_province": {
      "description": "List of state or province names (ST, S, or P)\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.indicator.x509.version_number": {
      "description": "Version of x509 format.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.matched.atomic": {
      "description": "Identifies the atomic indicator value that matched a local environment endpoint or network event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.matched.field": {
      "description": "Identifies the field of the atomic indicator that matched a local environment endpoint or network event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.matched.id": {
      "description": "Identifies the _id of the indicator document enriching the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.matched.index": {
      "description": "Identifies the _index of the indicator document enriching the event.\n\nECS type: keyword",
      "ecs_type": "keyword"
    },
    "~enrichment.matched.occurred": {
      "description": "Indicates when the indicator match was generated\n\nECS type: date",
      "ecs_type": "date"
    },
    "~enrichment.matched.type": {
      "description": "Identifies the type of match that caused the event to be enriched with the given indicator\n\nECS type: keyword",
      "ecs_type": "keyword"
    }
  },
  "patternProperties": {
    "^~.+": {
      "description": "Custom field.",
      "ecs_type": null
    },
    "^wazuh\\..+": {
      "description": "Wazuh internal field.",
      "ecs_type": null
    }
  }
}
