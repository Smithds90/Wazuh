name: auth

parents:
  - syslog

check: >-
  process.name==sshd
  OR process.name==sudo
  OR process.name==groupadd
  OR process.name==groupdel
  OR process.name==goupmod
  OR process.name==useradd
  OR process.name==userdel
  OR process.name==usermod

parse:
  logql:
    # - message: >-
    #     <system.auth.ssh.event> <system.auth.ssh.method> for (invalid user) <?user.name>
    #     from <source.ip> port <source.port>

    # Jul 10 10:11:12 somehostname sshd[6969]: Invalid user test from 192.20.30.40
    - message: >-
        <_system.auth.ssh.event> user <user.name> from <source.ip>

    # Jul 10 10:11:12 somehostname sshd[6969]: Did not receive identification string from 192.50.60.70
    - message: >-
        Did not receive identification string from <source.ip>

    # Jul 10 10:11:12 somehostname sudo:      tsg : user NOT in sudoers ; TTY=pts/1 ; PWD=/home/vagrant ; USER=root ; COMMAND=/bin/ls
    - message: >-
        <_/ ><user.name> <_system.auth.sudo.error/quoted/: / ;> TTY=<_system.auth.sudo.tty> ; PWD=<system.auth.sudo.pwd> ;
        USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>

    # Jul 10 10:11:12 somehostname sudo:  vagrant : TTY=pts/0 ; PWD=/home/vagrant ; USER=root ; COMMAND=/bin/cat /var/log/auth.log
    - message: >-
        <_/ ><user.name> : TTY=<_system.auth.sudo.tty> ; PWD=<_system.auth.sudo.pwd> ;
        USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>

    # Jul 10 10:11:12 somehostname groupadd[6969]: new group: name=mysql, GID=666
    - message: >-
        new group: name=<group.name>, GID=<group.id>

    # Jul 10 10:11:12 somehostname useradd[6969]: new user: name=mysql, UID=101, GID=666, home=/nonexistent, shell=/bin/false
    - message: >-
        new user: name=<user.name>, UID=<user.id>, GID=<group.id>,
        home=<_system.auth.useradd.home>, shell=<_system.auth.useradd.shell>

    # Jul 10 10:11:12 somehostname sshd[6969]: Accepted publickey for vagrant from 255.0.1.2 port 55555 ssh2: RSA 11:22:33:aa:bb:cc:dd:ee:ff:1a:2b:3c:4b:5c:6d:7e
    - message: >-
        <_system.auth.ssh.event> <_system.auth.ssh.method> for <user.name> from <source.ip> port
        <source.port> ssh2: <_system.auth.ssh.signature/any>

    # Jul 10 10:11:12 somehostname sshd[6969]: Failed password for root from 210.111.222.0 port 6969 ssh2
    - message: >-
        <_system.auth.ssh.event> <_system.auth.ssh.method> for <user.name> from <source.ip> port
        <source.port> <_>

    # Jul 10 10:11:12 somehostname sudo: pam_unix(sudo:session): session opened for user root by vagrant(uid=1000)
    - message: >-
        pam_unix(sudo:session): <_system.auth.sudo.event> <_system.auth.sudo.method> for user <user.effective.name> by <user.name>(uid=<user.id>)
    # Jul 10 10:11:12 somehostname sshd[6969]: subsystem request for sftp by user vagrant
    - message: >-
        <_system.auth.ssh.event> <_system.auth.ssh.method> for <user.effective.name> by user <user.name>
    # Jul 10 10:11:12 somehostname sudo: pam_unix(sudo:session): session closed for user root
    - message: >-
        pam_unix(sudo:session): <_system.auth.sudo.event> <_system.auth.sudo.method> for <user.name>

normalize:
  # Jul 10 10:11:12 somehostname sshd[6969]: Accepted publickey for vagrant from 100.0.1.0 port 55555 ssh2: RSA 11:22:33:aa:bb:cc:dd:ee:ff:1a:2b:3c:4b:5c:6d:7e
  - check:
      - _system.auth.ssh.event: Accepted
    map:
      event.type: +s_append/authentication_success/info
      event.category: +s_append/authentication/session
      event.action: ssh_login
      event.outcome: success

  # Jul 10 10:11:12 somehostname sshd[6969]: Failed password for root from 200.100.5.69 port 2911 ssh2"
  - check: _system.auth.ssh.event==Invalid OR _system.auth.ssh.event==Failed
    map:
      event.type: +s_append/authentication_failure/info
      event.category: +s_append/authentication
      event.action: ssh_login
      event.outcome: failure

  # Jul 10 10:11:12 somehostname sudo:  vagrant : TTY=pts/0 ; PWD=/home/vagrant ; USER=root ; COMMAND=/bin/cat /path/file.log
  - check: >-
      +exists/process.name AND (
      process.name==groupadd
      OR process.name==groupdel
      OR process.name==groupmod
      OR process.name==useradd
      OR process.name==userdel
      OR process.name==usermod
      )
    map:
      event.category: +s_append/iam
      event.outcome: success

  - check: >-
      +exists/process.name AND (
      process.name==useradd
      OR process.name==userdel
      OR process.name==usermod
      )
    map:
      event.type: +s_append/user

  # Jul 10 10:11:12 somehostname groupadd[6969]: new group: name=mysql, GID=222
  - check: >-
      +exists/process.name AND (
      process.name==groupadd
      OR process.name==groupdel
      OR process.name==groupmod
      )
    map:
      event.type: +s_append/group

  - check: >-
      +exists/process.name AND (
      process.name==groupadd
      OR process.name==useradd
      )
    map:
      event.type: +s_append/creation

  - check: >-
      +exists/process.name AND (
      process.name==groupdel
      OR process.name==userdel
      )
    map:
      event.type: +s_append/deletion

  - check: >-
      +exists/process.name AND (
      process.name==groupmod
      OR process.name==usermod
      )
    map:
      event.type: +s_append/change

  - map:
      related.user: +s_append/$user.name/$user.effective.name # check for uniques only +s_append_unique/$user.name/$user.effective.name
      related.ip: +s_append/$source.ip # check for uniques only +s_append_unique/$source.ip
