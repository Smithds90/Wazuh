/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * September 21, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "scanContext_test.hpp"
#include "scanOrchestrator/scanContext.hpp"
#include <external/nlohmann/json.hpp>
#include <memory>
#include <string>
#include <vector>

/*
 * @brief Test instantion of the ScanContext struct.
 */
TEST_F(ScanContextTest, TestInstantionOfTheScanContextStruct)
{
    // Instantion of the ScanContext struct.
    EXPECT_NO_THROW(std::make_shared<ScanContext>());
}

/*
 * @brief Test build with valid message.
 */
TEST_F(ScanContextTest, TestBuildWithValidMessage)
{
    std::string data {R"({"type":"dbsync_packages"})"};
    std::vector<char> message(50, ' ');
    std::copy(data.begin(), data.end(), message.begin() + 15);

    std::shared_ptr<ScanContext> scanContext;

    // Instantion of the ScanContext struct.
    EXPECT_NO_THROW(scanContext = std::make_shared<ScanContext>());

    EXPECT_NE(scanContext->scanType, ScannerType::Package);

    EXPECT_NO_THROW(scanContext->build(message));

    EXPECT_EQ(scanContext->scanType, ScannerType::Package);
}

/*
 * @brief Test build with invalid message.
 */
TEST_F(ScanContextTest, TestBuildWithInvalidMessage)
{
    std::string data {R"({"type":"invalid"})"};
    std::vector<char> message(50, ' ');
    std::copy(data.begin(), data.end(), message.begin() + 15);

    std::shared_ptr<ScanContext> scanContext;

    // Instantion of the ScanContext struct.
    EXPECT_NO_THROW(scanContext = std::make_shared<ScanContext>());

    EXPECT_NE(scanContext->scanType, ScannerType::Package);

    EXPECT_NO_THROW(scanContext->build(message));
}

/*
 * @brief Test build with empty message.
 */
TEST_F(ScanContextTest, TestBuildWithEmptyMessage)
{
    std::string data {R"({})"};
    std::vector<char> message(50, ' ');
    std::copy(data.begin(), data.end(), message.begin() + 15);

    std::shared_ptr<ScanContext> scanContext;

    // Instantion of the ScanContext struct.
    EXPECT_NO_THROW(scanContext = std::make_shared<ScanContext>());

    EXPECT_NE(scanContext->scanType, ScannerType::Package);

    EXPECT_THROW(scanContext->build(message), nlohmann::json::out_of_range);
}
