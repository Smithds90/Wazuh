/*
 * Wazuh databaseFeedManager
 * Copyright (C) 2015, Wazuh Inc.
 * November 2, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */
#include "versionMatcher_test.hpp"

using ::testing::_;
using ::testing::Return;

void VersionMatcherTest::SetUp() {};

void VersionMatcherTest::TearDown() {};

TEST_F(VersionMatcherTest, compareCalVer_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.11.02.1", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("23.11.02.1", "23.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.02", "2023.11.02", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11", "2023.11", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023", "2023", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareCalVer_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.11.02.0", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("23.11.02.0", "23.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.01", "2023.11.02", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.10", "2023.11", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2022", "2023", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, compareCalVer_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.11.02.2", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("23.11.02.2", "23.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.03", "2023.11.02", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.12", "2023.11", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2024", "2023", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, compareCalVer_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.13.02.1", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.12.32.1", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, comparePEP440_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev456", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev456", "2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345", "2.0b2.post345", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0", "2.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.3.0.0.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3.0.0.0", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, comparePEP440_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev455", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev455", "1!2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev455", "2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345", "2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post344", "2.0b2.post345", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0b2.post344", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b1", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0a2", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0a2", "2.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0", "2.1", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0.1.2.2", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.2", "2.0.1.2.3.0.0.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.2.0.0.0", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, comparePEP440_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev457", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev455", "2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev456", "2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345.dev455", "2.0b2.post345", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345", "2.0b2.post344", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2.post344", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0b1", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0a2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0", "2.0a2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.1", "2.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3.0.0.0", "2.0.1.2.2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.2.0.0.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, comparePEP440_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("A.B.C", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareMajorMinor_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-2", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareMajorMinor_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.1", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.1", "2.1", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-1", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-1", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, compareMajorMinor_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.3", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.2", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-3", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-3", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, compareMajorMinor_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareSemVer_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta+001", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta+001", "1.2.3-beta", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3+001", "1.2.3+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3+001", "1.2.3", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareSemVer_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "2.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "1.3.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "1.2.3-beta", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-alfa+001", "1.2.3+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-alfa+001", "1.2.3-beta", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.2+001", "1.2.3+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.2+001", "1.2.3", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, compareSemVer_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.4-beta+001", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.3.2-beta+001", "1.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.2.2-beta+001", "1.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta", "1.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta", "1.2.3-alfa+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3+001", "1.2.2+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3", "1.2.2+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, compareSemVer_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkCalVer)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.02.1", "2023.11.02.1")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkPEP440)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1!2.0b2.post345.dev456", "1!2.0b2.post345.dev456")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkMajorMinor)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2", "1.2")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkSemVer)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3-beta+001", "1.2.3-beta+001")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_ErrorInvalidFormat)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "2023.11.02.1")));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareUnspecified_ErrorDifferentFormats)
{
    EXPECT_EQ(VersionMatcher::compare("2023.11.02.1", "1!2.0b2.post345.dev456"), INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareUnexistingVersionObjectType)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "A.B.C", static_cast<VersionObjectType>(1000))));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}
