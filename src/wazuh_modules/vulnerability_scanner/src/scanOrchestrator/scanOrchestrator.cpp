/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "scanOrchestrator.hpp"

#include <iostream>

// TODO: Remove LCOV flags once the implementation of 'ScanOrchestrator' is completed
// LCOV_EXCL_START
void ScanOrchestrator::run(
    std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*>& data)
{
    // Decoder, build context with builder pattern.
    try
    {
        auto context = std::make_shared<ScanContext>(data);
        const auto type = context->getType();

        if (type == ScannerType::PackageInsert)
        {
            m_packageInsertOrchestration->handleRequest(context);
        }
        else if (type == ScannerType::PackageDelete)
        {
            m_packageDeleteOrchestration->handleRequest(context);
        }
        else if (type == ScannerType::HotfixInsert)
        {
            std::cout << "ScanOrchestrator::run::HotfixInserted" << std::endl;
        }
        else if (type == ScannerType::HotfixDelete)
        {
            std::cout << "ScanOrchestrator::run::HotfixDeleted" << std::endl;
        }
        else if (type == ScannerType::Os)
        {
            std::cout << "ScanOrchestrator::run::Os" << std::endl;
        }
        else
        {
        }
    }
    catch (const std::exception& e)
    {
        logError(WM_VULNSCAN_LOGTAG, "ScanOrchestrator::run::Exception: %s", e.what());
    }
}
// LCOV_EXCL_START
