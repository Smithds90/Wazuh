/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * Nov 23, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _OS_DATA_CACHE_HPP
#define _OS_DATA_CACHE_HPP

#include "cacheLRU.hpp"
#include "singleton.hpp"
#include <shared_mutex>
#include <string>

/**
 * @brief Os structure.
 */
struct Os final
{
    std::string hostName;       ///< Hostname of the agent.
    std::string architecture;   ///< Architecture of the agent.
    std::string name;           ///< Name of operating system.
    std::string codeName;       ///< Code name of the operating system.
    std::string majorVersion;   ///< Major version of the operating system.
    std::string minorVersion;   ///< Minor version of the operating system.
    std::string patch;          ///< Patch of the operating system.
    std::string build;          ///< Build of the operating system.
    std::string platform;       ///< Platform of the operating system.
    std::string version;        ///< Version of the operating system.
    std::string release;        ///< Release of the operating system.
    std::string displayVersion; ///< Display version of the operating system.
    std::string sysName;        ///< System name of the operating system.
    std::string kernelVersion;  ///< Version of the kernel operating system.
    std::string kernelRelease;  ///< Release of the kernel operating system.
};

// LCOV_EXCL_START
/**
 * @brief OsDataCache class.
 */
class OsDataCache final : public Singleton<OsDataCache>
{
private:
    LRUCache<std::string, Os> m_osData {1000};
    std::shared_mutex m_mutex;

public:
    /**
     * @brief This method returns the os data.
     * @param agentId agent id.
     *
     * @return Os
     */
    Os getOsData(const std::string& agentId)
    {
        std::shared_lock<std::shared_mutex> lock(m_mutex);
        auto value = m_osData.getValue(agentId);
        return value ? *value : Os();
    }

    /**
     * @brief This method sets the os data.
     *
     * @param agentId agent id.
     * @param osData os data.
     */
    void setOsData(const std::string& agentId, const Os& osData)
    {
        std::lock_guard<std::shared_mutex> lock(m_mutex);
        m_osData.insertKey(agentId, osData);
    }
};
// LCOV_EXCL_STOP
#endif // _OS_DATA_CACHE_HPP
