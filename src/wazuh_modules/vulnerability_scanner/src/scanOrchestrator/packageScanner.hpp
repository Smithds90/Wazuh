/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _PACKAGE_SCANNER_HPP
#define _PACKAGE_SCANNER_HPP

#include "chainOfResponsability.hpp"
#include "databaseFeedManager.hpp"
#include "scanContext.hpp"
#include "versionMatcher/versionMatcher.hpp"
#include <iostream>

/**
 * @brief PackageScanner class.
 *
 */
class PackageScanner final : public AbstractHandler<std::shared_ptr<ScanContext>>
{
private:
    std::shared_ptr<DatabaseFeedManager> m_databaseFeedManager;

public:
    // LCOV_EXCL_START
    /**
     * @brief PackageScanner constructor.
     *
     * @param databaseFeedManager Database feed manager.
     */
    explicit PackageScanner(std::shared_ptr<DatabaseFeedManager>& databaseFeedManager)
        : m_databaseFeedManager(databaseFeedManager)
    {
    }
    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<ScanContext> handleRequest(std::shared_ptr<ScanContext> data) override
    {
        const std::string packageName {Utils::toLowerCase(std::string(data->packageName()))};

        auto vulnerabilityScan =
            [&](const std::string& cnaName, const NSVulnerabilityScanner::ScanVulnerabilityCandidate& callbackData)
        {
            for (const auto& version : *callbackData.versions())
            {
                const std::string packageVersion {data->packageVersion()};
                std::string versionString {version->version() ? version->version()->str() : ""};
                std::string versionStringLessThan {version->lessThan() ? version->lessThan()->str() : ""};
                std::string versionStringLessThanOrEqual {version->lessThanOrEqual() ? version->lessThanOrEqual()->str()
                                                                                     : ""};

                logDebug2(WM_VULNSCAN_LOGTAG,
                          "SCAN -> Package: %s, Version: %s, CVE: %s, Ver: %s, RLT: %s, RLTE: %s",
                          packageName.c_str(),
                          packageVersion.c_str(),
                          callbackData.cveId()->str().c_str(),
                          versionString.c_str(),
                          versionStringLessThan.c_str(),
                          versionStringLessThanOrEqual.c_str());

                if (versionStringLessThan.empty() && versionStringLessThanOrEqual.empty())
                {
                    if (VersionMatcher::compare(packageVersion, versionString) == 0)
                    {
                        if (version->status() == NSVulnerabilityScanner::Status::Status_affected)
                        {
                            logDebug1(WM_VULNSCAN_LOGTAG,
                                      "MATCH Package: %s, Version: %s, CVE: %s, Ver: %s, RLT: %s, RLTE: %s",
                                      packageName.c_str(),
                                      packageVersion.c_str(),
                                      callbackData.cveId()->str().c_str(),
                                      versionString.c_str(),
                                      versionStringLessThan.c_str(),
                                      versionStringLessThanOrEqual.c_str());

                            data->m_elements[callbackData.cveId()->str()] = nlohmann::json::object();
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    if ((versionString.compare("0") == 0 ||
                         VersionMatcher::compare(packageVersion, versionString) >= 0))
                    {
                        if (((!versionStringLessThan.empty() && versionStringLessThan.compare("*") != 0 &&
                              VersionMatcher::compare(packageVersion, versionStringLessThan) < 0) ||
                             (!versionStringLessThanOrEqual.empty() &&
                              VersionMatcher::compare(packageVersion, versionStringLessThanOrEqual) <= 0)))
                        {
                            if (version->status() == NSVulnerabilityScanner::Status::Status_affected)
                            {
                                logDebug1(WM_VULNSCAN_LOGTAG,
                                          "MATCH Package: %s, Version: %s, CVE: %s, Ver: %s, RLT: %s, RLTE: %s",
                                          packageName.c_str(),
                                          packageVersion.c_str(),
                                          callbackData.cveId()->str().c_str(),
                                          versionString.c_str(),
                                          versionStringLessThan.c_str(),
                                          versionStringLessThanOrEqual.c_str());

                                data->m_elements[callbackData.cveId()->str()] = nlohmann::json::object();
                                return true;
                            }
                            else
                            {
                                logDebug2(WM_VULNSCAN_LOGTAG,
                                          "NO MATCH because the default status, Package: %s, Version: %s, CVE: %s, "
                                          "Ver: %s, RLT: %s, RLTE: %s",
                                          packageName.c_str(),
                                          packageVersion.c_str(),
                                          callbackData.cveId()->str().c_str(),
                                          versionString.c_str(),
                                          versionStringLessThan.c_str(),
                                          versionStringLessThanOrEqual.c_str());
                                return false;
                            }
                        }
                    }
                }
            }
            const auto defaultStatus {callbackData.defaultStatus()};
            if (defaultStatus == NSVulnerabilityScanner::Status::Status_affected)
            {
                logDebug1(WM_VULNSCAN_LOGTAG,
                          "MATCH Package: %s, CVE: %s by default status.",
                          packageName.c_str(),
                          callbackData.cveId()->str().c_str());

                data->m_elements[callbackData.cveId()->str()] = nlohmann::json::object();
                return true;
            }
            else
            {
                return false;
            }
        };

        const auto cnaName {m_databaseFeedManager->getCnaName(data->packageVendor())};
        logDebug1(WM_VULNSCAN_LOGTAG, "Scanning package: %s, CNA: %s", packageName.c_str(), cnaName.c_str());

        m_databaseFeedManager->getVulnerabilitiesCandidates(cnaName, packageName, vulnerabilityScan);

        if (data->m_elements.empty())
        {
            return nullptr;
        }
        return AbstractHandler<std::shared_ptr<ScanContext>>::handleRequest(data);
    }
    // LCOV_EXCL_STOP
};

#endif // _PACKAGE_SCANNER_HPP
