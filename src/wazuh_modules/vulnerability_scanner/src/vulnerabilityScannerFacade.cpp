/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * March 25, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "vulnerabilityScannerFacade.hpp"
#include "wazuh_modules/vulnerability_scanner/src/policyManager/policyManager.hpp"

constexpr auto VULNERABILITY_SCANNER_TEMPLATE = "queue/indexer/template.json";

// TODO: Remove LCOV flags once the implementation of the 'Indexer Connector' module is completed
// LCOV_EXCL_START
void VulnerabilityScannerFacade::start(
    const std::function<void(const modules_log_level_t, const std::string&)>& logFunction,
    const nlohmann::json& configuration)
{
    // Policy manager initialization.
    PolicyManager::instance().initialize(configuration);

    // Indexer connector initialization.
    m_indexerConnector = std::make_shared<IndexerConnector>(PolicyManager::instance().getIndexerConfiguration(),
                                                            VULNERABILITY_SCANNER_TEMPLATE);

    // Database feed manager initialization.
    m_databaseFeedManager = std::make_shared<DatabaseFeedManager>(m_indexerConnector);

    // Add subscribers for policy updates.
    PolicyManager::instance().addSubscriber(m_databaseFeedManager);

    // Subscription to syscollector events.
    m_syscollectorSubscription = std::make_unique<RouterSubscriber>("syscollector", "vulnerability_scanner");
    m_syscollectorSubscription->subscribe(
        [logFunction, this](const std::vector<char>& message)
        { std::make_unique<ScanOrchestrator>(logFunction)->run("agentId", message, m_indexerConnector); });
}
// LCOV_EXCL_STOP

void VulnerabilityScannerFacade::stop()
{
    m_databaseFeedManager.reset();
    m_syscollectorSubscription.reset();
}
