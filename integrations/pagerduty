#!/bin/bash
# Pagerduty Integration
#
# Copyright (C) 2015-2019, Wazuh Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Author: Daniel B. Cid
# Modified by: @spartantri, @kravietz
# Last modified: Feb 2020

set -euo pipefail

ALERTFILE="$1"
APIKEY="$2"
WEBHOOK="$3"

# Parameters file allows setting HTTP proxy variables etc
params_file=/var/ossec/integrations/params.sh
if [ -r "${params_file}" ]; then
	source "${params_file}"
fi

LOCAL="$(dirname $0)"
SERVER="$(hostname)"
cd "${LOCAL}/.." || exit 1
PWD="$(pwd)"

if [ -z "${ALERTFILE}" -o -z "${APIKEY}"]; then
   echo "$0: Missing argument <alertfile> <api_key> [webhook]"
   exit 1
fi

if [ ! -r "${ALERTFILE}" ]; then
	echo "$0: alert file ${ALERTFILE} is not readable"
	exit 1
fi

# webhook is optional, use default developer API if not specified
if [ -z "${WEBHOOK}" ]; then
   WEBHOOK="https://events.pagerduty.com/generic/2010-04-15/create_event.json"
fi

# Kibana URL allows instant review of the target alert using its unique id
if [ -z "${KIBANA}" ]; then
	KIBANA="http://127.0.0.1:5601"
fi



function build_payload () {
	# JSON escaping in bash is tricky, only jq can deal correctly
	jq -n --arg apikey "${APIKEY}" \
		--arg kibana "${KIBANA}/app/kibana#/discover/?_g=(interval:auto,query(language:lucene,query:'id:$alertid')" \
		--arg alertid "${alertid}" \
		--arg alertlocation "${alertlocation}" \
		--arg ruleid "${ruleid}" \
		--arg ruledescription "${ruledescription}" \
		--arg alertlog "${alertlog}" \
		--arg alertdate "${alertdate}" \
		--arg alertnode "${alertnode}" \
		'{"service_key": $apikey, "incident_key": $ruledescription, "event_type": "trigger",  "description": $ruledescription, "client": "Wazuh", "client_url": $kibana, "details": { "Agent": $alertnode, "Location": $alertlocation, "Rule": $ruleid, "Description": $ruledescription, "Log": $alertlog, "Id": $alertid } }'
}

function send_payload () {
        postfile="$(mktemp)"
        if ! build_payload > "${postfile}"; then
            echo "Cannot write temporary alert file to ${postfile}"
            exit 1
        fi

        # Send the PagerDuty notification
        if ! curl --compressed -s -H "Content-type: application/json" -X POST --data "@${postfile}" "${WEBHOOK}"; then
            echo "Error sending the alert to PagerDuty"
            exit 1
        fi

        rm -f "${postfile}"
}

# Logging the call
echo "$(date) $0 $1 $2 $3" >> ${PWD}/logs/integrations.log

# Alert format detection
# If format of the file is JSON then each line contains one alert
if jq . "${ALERTFILE}" > /dev/null; then
	format=json
else
	format=text
fi

function process_alert () {
	alertdate=$(echo "${alert}" | jq -r .timestamp)
	ruleid=$(echo  "${alert}" | jq -r .rule.id)
	alertlocation=$(echo  "${alert}" | jq -r .location)
	ruledescription=$(echo  "${alert}" | jq .rule.description)
	alertlog=$(echo "${alert}" | jq -r .full_log)
	alertid=$(echo "${alert}" | jq -r .id)
	alertnode=$(echo "${alert}" | jq -r .agent.name)
}

# input is assumed to contain one JSON block per line
# each line is a separate alert
if [ "${format}" = "json" ]; then
	# standard input from alert file
	exec < "${ALERTFILE}"
	while read -r line; do
		alert="${line}"
		if [ -z "${alert}" ]; then continue; fi
		process_alert
    		send_payload
	done
# plain text log has a single alert in multiple lines
else
	alertdate=$(egrep '^[0-9]{4} [A-Z][a-z]+ [0-9]+ [0-9]+:[0-9]+:[0-9]+ \(' "${ALERTFILE}" | awk '{print $1,$2,$3,$4;}')
	ruleid=$(egrep 'Rule: [0-9]+ ' "${ALERTFILE}" | awk '{print $2;}')
	ruledescription=$(egrep 'Rule: [0-9]+ ' "${ALERTFILE}" | cut -f6- -d' ')
	alertid=$(egrep '\*\* Alert [0-9]+\.[0-9]+:' "${ALERTFILE}" | awk '{print $3;}')

    	send_payload
fi

exit 0
