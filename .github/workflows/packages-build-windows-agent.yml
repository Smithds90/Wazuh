name: Build Wazuh Agent Packages - Windows
on:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: |
          Tag name of the Docker image to be downloaded.
          Use 'developer' to set branch name as tag.
          Use 'auto' to set branch version as tag.
          Default is 'auto'.
        required: false
        default: 'auto'
      revision:
        description: |
          Revision used to naming Windows package.
          Default is '0'.
        required: false
        default: '0'
      is_stage:
        type: boolean
        description: Should set development/production nomenclature. By default 'development'.
        required: false
      debug:
        type: boolean
        description: Activate debug mode in the compilation. By Default is 'false'.
        required: false
      trust_verification:
        type: choice
        description: |
          This flag controls the dll and exe files signature verification mechanism.
          Use '0' to disable mechanism.
          Use '1' to warning only.
          Use '2' to full enforce.
          Default is '1'.
        options:
          - 0
          - 1
          - 2
        required: false
        default: '1'
      ca_name:
        description: |
          CA name to be used to verify the trust of the agent."
          Default is 'DigiCert Assured ID Root CA'.
        required: false
        default: 'DigiCert Assured ID Root CA'
      checksum:
        type: boolean
        description: Generate checksum on the same directory than the package.
        required: false

jobs:
  Build-agent-windows-base:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: 'true'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_after_successful_duplicate: 'false'

      - uses: actions/checkout@v4

      - name: Set VERSION and CONTAINER_NAME
        run: |
          echo "VERSION=$(sed 's/.*\([0-9]\.[0-9]*\.[0-9]*\).*/\1/' $GITHUB_WORKSPACE/src/VERSION)" >> $GITHUB_ENV
          echo "CONTAINER_NAME=compile_windows_agent" >> $GITHUB_ENV

      - name: Set TAG
        run: |
          if [ "${{ inputs.docker_image_tag }}" == "auto" ]; then echo "TAG=${{ env.VERSION }}" >> $GITHUB_ENV;
          elif [ "${{ inputs.docker_image_tag }}" == "developer" ]; then echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV;
          else echo "TAG=${{ inputs.docker_image_tag }}" >> $GITHUB_ENV; fi

      - name: Set ZIP_NAME
        run: |
          COMMIT_HASH="$(git rev-parse --short HEAD)"
          if [ "${{ inputs.naming_format }}" == "release" ]; then
            echo "ZIP_NAME=wazuh-agent-${{ env.VERSION }}-${{ inputs.revision }}.zip" >> $GITHUB_ENV;
          else
            echo "ZIP_NAME=wazuh-agent_${{ env.VERSION }}-${{ inputs.revision }}_windows_${COMMIT_HASH}.zip" >> $GITHUB_ENV;
          fi

      - name: Download docker image for package building
        run: |
          bash $GITHUB_WORKSPACE/.github/actions/ghcr-pull-and-push/pull_image_from_ghcr.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.actor}} $CONTAINER_NAME ${{ env.TAG }}

      - name: Build Windows wazuh-agent
        working-directory: packages/windows
        run: |
          FLAGS="-s /tmp --dont-build-docker -j $(nproc) -o ${{ env.ZIP_NAME }} "
          if [ "${{ inputs.debug}}" == "true" ]; then FLAGS+="--debug "; fi
          bash generate_compiled_windows_agent.sh -t ${{ inputs.trust_verification }} --tag ${{ env.TAG }} -c "${{ inputs.ca_name }}" $FLAGS

      # todo Modify ZIP_NAME to MSI_NAME
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: us-east-1

      - name: Upload package to S3
        run: |
          if [ inputs.checksum == 'true'  ]; then
            sha512sum "/tmp/${{ env.ZIP_NAME }}" > "/tmp/${{ env.ZIP_NAME }}.sha512"
            aws s3 cp /tmp/${{ env.ZIP_NAME }}.sha512 s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/
          fi
          aws s3 cp /tmp/${{ env.ZIP_NAME }} s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/

          # - link_windows_agent_base: s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/${{ env.ZIP_NAME }}

  # check_upgrade_result:
  #   runs-on: windows-latest
  #   needs: Build-agent-windows-base
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v3
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version-file: ".github/workflows/.python-version"
  #         architecture: x64
  #     - name: Add WiX toolkit to PATH
  #       shell: bash
  #       run: echo "${WIX}bin" >> $GITHUB_PATH
  #     - name: Install dependencies
  #       run: |
  #         pip install -r src/win32/qa/requirements.txt
  #     # - name: Download released .msi
  #     #   run: |
  #     #     mkdir C:\win-agent-released
  #     #     python -m wget https://packages.wazuh.com/4.x/windows/wazuh-agent-${{ matrix.wazuh_version }}.msi -o C:\win-agent-released
  #     # - name: Download base folder
  #     #   uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: win-agent-base.zip
  #     #     path: C:\win-agent-base


  #     - name: Unzip base folder
  #       run: 7z x C:\win-agent-base\win-agent-base.zip -oC:\win-agent-base
  #     - name: Create .msi package
  #       run: |
  #         cd C:\win-agent-base\src\win32
  #         $VERSION = Get-Content ..\VERSION
  #         .\wazuh-installer-build-msi.bat $VERSION 0
  #         cp *.msi C:\win-agent-base\
  #     - name: Run tests
  #       run: |
  #         cd src/win32/qa
  #         python -m pytest -vv ./test_win_upgrade.py
  #     - name: Upload release installation log
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: release_log
  #         path: C:\win-agent-released\win-agent-released.log
  #     - name: Upload base installation log
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: base_log
  #         path: C:\win-agent-base\win-agent-base.log
