name: Build Wazuh Agent Packages - Windows
on:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: |
          Tag name of the Docker image to be downloaded.
          Use 'developer' to set branch name as tag.
          Use 'auto' to set branch version as tag.
          Default is 'auto'.
        required: false
        default: 'auto'
      revision:
        description: |
          Package revision (name and metadata).
          Default is '0'.
        required: false
        default: '0'
      is_stage:
        description: |
          Set production nomenclature if true.
          Default is 'false'.
        type: boolean
        required: false
      debug:
        description: |
          Activate debug mode in the compilation.
          Default is 'false'.
        type: boolean
        required: false
      trust_verification:
        type: choice
        description: |
          This flag controls the dll and exe files signature verification mechanism.
          Use '0' to disable mechanism.
          Use '1' to warning only.
          Use '2' to full enforce.
          Default is '1'.
        options:
          - 0
          - 1
          - 2
        required: false
        default: '1'
      ca_name:
        description: |
          CA name to be used to verify the trust of the agent.
          Default is 'DigiCert Assured ID Root CA'.
        required: false
        default: 'DigiCert Assured ID Root CA'
      checksum:
        description: |
          Generate checksum on the same directory than the package.
          Default is 'false'.
        type: boolean
        required: false

  workflow_call:
    inputs:
      docker_image_tag:
        type: string
        required: false
      revision:
        type: string
        required: false
      is_stage:
        type: boolean
        required: false
      debug:
        type: boolean
        required: false
      trust_verification:
        type: string
        required: false
      ca_name:
        type: string
        required: false
      checksum:
        type: boolean
        required: false

jobs:
  build-agent-windows-base:
    runs-on: ubuntu-latest
    outputs:
      PKG_NAME: ${{ steps.package_name_set_step.outputs.PKG_NAME }}
    steps:
      - name: Cancel previous runs
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: 'true'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_after_successful_duplicate: 'false'

      - uses: actions/checkout@v4

      - name: Set VERSION and CONTAINER_NAME
        run: |
          echo "VERSION=$(sed 's/.*\([0-9]\.[0-9]*\.[0-9]*\).*/\1/' $GITHUB_WORKSPACE/src/VERSION)" >> $GITHUB_ENV
          echo "CONTAINER_NAME=compile_windows_agent" >> $GITHUB_ENV

      - name: Set TAG
        run: |
          if [ "${{ inputs.docker_image_tag }}" == "auto" ]; then echo "TAG=${{ env.VERSION }}" >> $GITHUB_ENV;
          elif [ "${{ inputs.docker_image_tag }}" == "developer" ]; then echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV;
          else echo "TAG=${{ inputs.docker_image_tag }}" >> $GITHUB_ENV; fi

      - name: Set PKG_NAME
        id: package_name_set_step
        run: |
          COMMIT_HASH="$(git rev-parse --short HEAD)"
          if [ "${{ inputs.is_stage }}" == "true" ]; then
            echo "PKG_NAME=wazuh-agent-${{ env.VERSION }}-${{ inputs.revision }}" | tee -a $GITHUB_OUTPUT $GITHUB_ENV;
          else
            echo "PKG_NAME=wazuh-agent_${{ env.VERSION }}-${{ inputs.revision }}_windows_${COMMIT_HASH}" | tee -a $GITHUB_OUTPUT $GITHUB_ENV;
          fi

      - name: Download docker image for package building
        run: |
          bash $GITHUB_WORKSPACE/.github/actions/ghcr-pull-and-push/pull_image_from_ghcr.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.actor}} ${{ env.CONTAINER_NAME }} ${{ env.TAG }}

      - name: Build Windows wazuh-agent
        working-directory: packages/windows
        run: |
          FLAGS="-s /tmp/windowsPKG --dont-build-docker -j $(nproc) -o ${{ env.PKG_NAME }}.zip "
          if [ "${{ inputs.debug}}" == "true" ]; then FLAGS+="--debug "; fi
          echo "generate_compiled_windows_agent.sh -t ${{ inputs.trust_verification }} --tag ${{ env.TAG }} -c "${{ inputs.ca_name }}" $FLAGS"
          bash generate_compiled_windows_agent.sh -t ${{ inputs.trust_verification }} --tag ${{ env.TAG }} -c "${{ inputs.ca_name }}" $FLAGS

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: us-east-1

      - name: Upload package to artifact
        uses: actions/upload-artifact@v4
        with:
          name: windowsPKG
          path: /tmp/windowsPKG

  generate-msi-agent:
    runs-on: windows-latest
    needs: build-agent-windows-base
    steps:
      - uses: actions/checkout@v4

      - name: Add WiX toolkit to PATH
        shell: bash
        run: |
          echo "${WIX}bin" >> $GITHUB_PATH
          echo "C:\Program Files\Microsoft SDKs\Windows\v7.0\Bin" >> $GITHUB_PATH

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: us-east-1

      - name: Download package from artifact
        uses: actions/download-artifact@v4
        with:
          name: windowsPKG
          path: C:\

      - name: Unzip base folder
        run: |
          7z x C:\${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.zip -oC:\win-agent-base

      - name: Create MSI package
        run: |
          cp .\packages\windows\generate_wazuh_msi.ps1 C:\win-agent-base\wazuh-local-src\src\win32
          cd C:\win-agent-base\wazuh-local-src\src\win32
          .\generate_wazuh_msi.ps1 -MSI_NAME ${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.msi -SIGN no
          cp .\${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.msi C:\win-agent-base\
      
      - name: Install Windows agent
        run: |
          cd C:\win-agent-base\
          Start-Process -FilePath "./${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.msi" -ArgumentList "/q WAZUH_MANAGER='1.1.1.1' /l installer.log" -wait
          $SEL = Select-String -Path 'C:\win-agent-base\installer.log' -Pattern "Wazuh Agent -- Installation completed successfully."
          if($SEL -eq $null) {
            cat 'C:\win-agent-base\installer.log'
            exit 1
          }

      - name: Upload MSI to S3
        run: |
          aws s3 cp C:\win-agent-base\${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.msi s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/

      - name: Upload checksum to S3
        if: ${{ inputs.checksum == true }}
        run: |
          sha512sum "C:\win-agent-base\${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.msi" > "C:\win-agent-base\${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.msi.sha512"
          aws s3 cp C:\win-agent-base\${{ needs.build-agent-windows-base.outputs.PKG_NAME }}.msi.sha512 s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/
